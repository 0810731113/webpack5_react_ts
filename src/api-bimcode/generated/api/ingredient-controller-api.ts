// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DataCode } from '../model';
// @ts-ignore
import { ResponseListDataCode } from '../model';
// @ts-ignore
import { Responseint } from '../model';
// @ts-ignore
import { TypeTableTranslate } from '../model';
/**
 * IngredientControllerApi - axios parameter creator
 * @export
 */
export const IngredientControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createNewIngredient
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewIngredientUsingPUT: async (body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createNewIngredientUsingPUT.');
            }
            const localVarPath = `/ingredient`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteIngredientCode
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredientCodeUsingDELETE: async (code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling deleteIngredientCodeUsingDELETE.');
            }
            const localVarPath = `/ingredient/bycode`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getIngredientCodeByCode
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientCodeByCodeUsingGET: async (code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling getIngredientCodeByCodeUsingGET.');
            }
            const localVarPath = `/ingredient/bycode`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getIngredientCodeFuzzy
         * @param {string} cond cond
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientCodeFuzzyUsingGET: async (cond: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cond' is not null or undefined
            if (cond === null || cond === undefined) {
                throw new RequiredError('cond','Required parameter cond was null or undefined when calling getIngredientCodeFuzzyUsingGET.');
            }
            const localVarPath = `/ingredient/codes/fuzzy`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cond !== undefined) {
                localVarQueryParameter['cond'] = cond;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getIngredientTreeByIngredientType
         * @param {string} [codetype] codetype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientTreeByIngredientTypeUsingGET: async (codetype?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ingredient/codes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codetype !== undefined) {
                localVarQueryParameter['codetype'] = codetype;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getIngredientTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientTypesUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ingredient/types`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateIngredient
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIngredientUsingPOST: async (body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateIngredientUsingPOST.');
            }
            const localVarPath = `/ingredient`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IngredientControllerApi - functional programming interface
 * @export
 */
export const IngredientControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createNewIngredient
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewIngredientUsingPUT(body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await IngredientControllerApiAxiosParamCreator(configuration).createNewIngredientUsingPUT(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteIngredientCode
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIngredientCodeUsingDELETE(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await IngredientControllerApiAxiosParamCreator(configuration).deleteIngredientCodeUsingDELETE(code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getIngredientCodeByCode
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredientCodeByCodeUsingGET(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataCode>> {
            const localVarAxiosArgs = await IngredientControllerApiAxiosParamCreator(configuration).getIngredientCodeByCodeUsingGET(code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getIngredientCodeFuzzy
         * @param {string} cond cond
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredientCodeFuzzyUsingGET(cond: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataCode>> {
            const localVarAxiosArgs = await IngredientControllerApiAxiosParamCreator(configuration).getIngredientCodeFuzzyUsingGET(cond, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getIngredientTreeByIngredientType
         * @param {string} [codetype] codetype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredientTreeByIngredientTypeUsingGET(codetype?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataCode>>> {
            const localVarAxiosArgs = await IngredientControllerApiAxiosParamCreator(configuration).getIngredientTreeByIngredientTypeUsingGET(codetype, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getIngredientTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredientTypesUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TypeTableTranslate>>> {
            const localVarAxiosArgs = await IngredientControllerApiAxiosParamCreator(configuration).getIngredientTypesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateIngredient
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIngredientUsingPOST(body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await IngredientControllerApiAxiosParamCreator(configuration).updateIngredientUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IngredientControllerApi - factory interface
 * @export
 */
export const IngredientControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary createNewIngredient
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewIngredientUsingPUT(body: object, options?: any): AxiosPromise<Responseint> {
            return IngredientControllerApiFp(configuration).createNewIngredientUsingPUT(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteIngredientCode
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredientCodeUsingDELETE(code: string, options?: any): AxiosPromise<Responseint> {
            return IngredientControllerApiFp(configuration).deleteIngredientCodeUsingDELETE(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getIngredientCodeByCode
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientCodeByCodeUsingGET(code: string, options?: any): AxiosPromise<DataCode> {
            return IngredientControllerApiFp(configuration).getIngredientCodeByCodeUsingGET(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getIngredientCodeFuzzy
         * @param {string} cond cond
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientCodeFuzzyUsingGET(cond: string, options?: any): AxiosPromise<ResponseListDataCode> {
            return IngredientControllerApiFp(configuration).getIngredientCodeFuzzyUsingGET(cond, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getIngredientTreeByIngredientType
         * @param {string} [codetype] codetype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientTreeByIngredientTypeUsingGET(codetype?: string, options?: any): AxiosPromise<Array<DataCode>> {
            return IngredientControllerApiFp(configuration).getIngredientTreeByIngredientTypeUsingGET(codetype, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getIngredientTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientTypesUsingGET(options?: any): AxiosPromise<Array<TypeTableTranslate>> {
            return IngredientControllerApiFp(configuration).getIngredientTypesUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateIngredient
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIngredientUsingPOST(body: object, options?: any): AxiosPromise<Responseint> {
            return IngredientControllerApiFp(configuration).updateIngredientUsingPOST(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IngredientControllerApi - object-oriented interface
 * @export
 * @class IngredientControllerApi
 * @extends {BaseAPI}
 */
export class IngredientControllerApi extends BaseAPI {
    /**
     * 
     * @summary createNewIngredient
     * @param {object} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientControllerApi
     */
    public createNewIngredientUsingPUT(body: object, options?: any) {
        return IngredientControllerApiFp(this.configuration).createNewIngredientUsingPUT(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteIngredientCode
     * @param {string} code code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientControllerApi
     */
    public deleteIngredientCodeUsingDELETE(code: string, options?: any) {
        return IngredientControllerApiFp(this.configuration).deleteIngredientCodeUsingDELETE(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getIngredientCodeByCode
     * @param {string} code code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientControllerApi
     */
    public getIngredientCodeByCodeUsingGET(code: string, options?: any) {
        return IngredientControllerApiFp(this.configuration).getIngredientCodeByCodeUsingGET(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getIngredientCodeFuzzy
     * @param {string} cond cond
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientControllerApi
     */
    public getIngredientCodeFuzzyUsingGET(cond: string, options?: any) {
        return IngredientControllerApiFp(this.configuration).getIngredientCodeFuzzyUsingGET(cond, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getIngredientTreeByIngredientType
     * @param {string} [codetype] codetype
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientControllerApi
     */
    public getIngredientTreeByIngredientTypeUsingGET(codetype?: string, options?: any) {
        return IngredientControllerApiFp(this.configuration).getIngredientTreeByIngredientTypeUsingGET(codetype, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getIngredientTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientControllerApi
     */
    public getIngredientTypesUsingGET(options?: any) {
        return IngredientControllerApiFp(this.configuration).getIngredientTypesUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateIngredient
     * @param {object} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientControllerApi
     */
    public updateIngredientUsingPOST(body: object, options?: any) {
        return IngredientControllerApiFp(this.configuration).updateIngredientUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }

}

// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DataCode } from '../model';
// @ts-ignore
import { ResponseListDataCode } from '../model';
// @ts-ignore
import { Responseint } from '../model';
// @ts-ignore
import { TypeTableTranslate } from '../model';
/**
 * PropertyControllerApi - axios parameter creator
 * @export
 */
export const PropertyControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createNewProperty
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewPropertyUsingPUT: async (body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createNewPropertyUsingPUT.');
            }
            const localVarPath = `/property`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deletePropertyCode
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyCodeUsingDELETE: async (code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling deletePropertyCodeUsingDELETE.');
            }
            const localVarPath = `/property/bycode`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPropertyCodeByCode
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertyCodeByCodeUsingGET: async (code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling getPropertyCodeByCodeUsingGET.');
            }
            const localVarPath = `/property/bycode`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPropertyCodeFuzzy
         * @param {string} cond cond
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertyCodeFuzzyUsingGET: async (cond: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cond' is not null or undefined
            if (cond === null || cond === undefined) {
                throw new RequiredError('cond','Required parameter cond was null or undefined when calling getPropertyCodeFuzzyUsingGET.');
            }
            const localVarPath = `/property/codes/fuzzy`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cond !== undefined) {
                localVarQueryParameter['cond'] = cond;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPropertyEnumCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertyEnumCodesUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/property/enumcodes/flat`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPropertyTreeByCodeType
         * @param {string} codetype codetype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertyTreeByCodeTypeUsingGET: async (codetype: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'codetype' is not null or undefined
            if (codetype === null || codetype === undefined) {
                throw new RequiredError('codetype','Required parameter codetype was null or undefined when calling getPropertyTreeByCodeTypeUsingGET.');
            }
            const localVarPath = `/property/codes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codetype !== undefined) {
                localVarQueryParameter['codetype'] = codetype;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getPropertyTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertyTypesUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/property/types`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateProperty
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePropertyUsingPOST: async (body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePropertyUsingPOST.');
            }
            const localVarPath = `/property`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PropertyControllerApi - functional programming interface
 * @export
 */
export const PropertyControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createNewProperty
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewPropertyUsingPUT(body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await PropertyControllerApiAxiosParamCreator(configuration).createNewPropertyUsingPUT(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deletePropertyCode
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePropertyCodeUsingDELETE(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await PropertyControllerApiAxiosParamCreator(configuration).deletePropertyCodeUsingDELETE(code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getPropertyCodeByCode
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPropertyCodeByCodeUsingGET(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataCode>> {
            const localVarAxiosArgs = await PropertyControllerApiAxiosParamCreator(configuration).getPropertyCodeByCodeUsingGET(code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getPropertyCodeFuzzy
         * @param {string} cond cond
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPropertyCodeFuzzyUsingGET(cond: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataCode>> {
            const localVarAxiosArgs = await PropertyControllerApiAxiosParamCreator(configuration).getPropertyCodeFuzzyUsingGET(cond, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getPropertyEnumCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPropertyEnumCodesUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataCode>>> {
            const localVarAxiosArgs = await PropertyControllerApiAxiosParamCreator(configuration).getPropertyEnumCodesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getPropertyTreeByCodeType
         * @param {string} codetype codetype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPropertyTreeByCodeTypeUsingGET(codetype: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataCode>>> {
            const localVarAxiosArgs = await PropertyControllerApiAxiosParamCreator(configuration).getPropertyTreeByCodeTypeUsingGET(codetype, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getPropertyTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPropertyTypesUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TypeTableTranslate>>> {
            const localVarAxiosArgs = await PropertyControllerApiAxiosParamCreator(configuration).getPropertyTypesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateProperty
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePropertyUsingPOST(body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await PropertyControllerApiAxiosParamCreator(configuration).updatePropertyUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PropertyControllerApi - factory interface
 * @export
 */
export const PropertyControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary createNewProperty
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewPropertyUsingPUT(body: object, options?: any): AxiosPromise<Responseint> {
            return PropertyControllerApiFp(configuration).createNewPropertyUsingPUT(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deletePropertyCode
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePropertyCodeUsingDELETE(code: string, options?: any): AxiosPromise<Responseint> {
            return PropertyControllerApiFp(configuration).deletePropertyCodeUsingDELETE(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getPropertyCodeByCode
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertyCodeByCodeUsingGET(code: string, options?: any): AxiosPromise<DataCode> {
            return PropertyControllerApiFp(configuration).getPropertyCodeByCodeUsingGET(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getPropertyCodeFuzzy
         * @param {string} cond cond
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertyCodeFuzzyUsingGET(cond: string, options?: any): AxiosPromise<ResponseListDataCode> {
            return PropertyControllerApiFp(configuration).getPropertyCodeFuzzyUsingGET(cond, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getPropertyEnumCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertyEnumCodesUsingGET(options?: any): AxiosPromise<Array<DataCode>> {
            return PropertyControllerApiFp(configuration).getPropertyEnumCodesUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getPropertyTreeByCodeType
         * @param {string} codetype codetype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertyTreeByCodeTypeUsingGET(codetype: string, options?: any): AxiosPromise<Array<DataCode>> {
            return PropertyControllerApiFp(configuration).getPropertyTreeByCodeTypeUsingGET(codetype, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getPropertyTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPropertyTypesUsingGET(options?: any): AxiosPromise<Array<TypeTableTranslate>> {
            return PropertyControllerApiFp(configuration).getPropertyTypesUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateProperty
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePropertyUsingPOST(body: object, options?: any): AxiosPromise<Responseint> {
            return PropertyControllerApiFp(configuration).updatePropertyUsingPOST(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PropertyControllerApi - object-oriented interface
 * @export
 * @class PropertyControllerApi
 * @extends {BaseAPI}
 */
export class PropertyControllerApi extends BaseAPI {
    /**
     * 
     * @summary createNewProperty
     * @param {object} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyControllerApi
     */
    public createNewPropertyUsingPUT(body: object, options?: any) {
        return PropertyControllerApiFp(this.configuration).createNewPropertyUsingPUT(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deletePropertyCode
     * @param {string} code code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyControllerApi
     */
    public deletePropertyCodeUsingDELETE(code: string, options?: any) {
        return PropertyControllerApiFp(this.configuration).deletePropertyCodeUsingDELETE(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getPropertyCodeByCode
     * @param {string} code code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyControllerApi
     */
    public getPropertyCodeByCodeUsingGET(code: string, options?: any) {
        return PropertyControllerApiFp(this.configuration).getPropertyCodeByCodeUsingGET(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getPropertyCodeFuzzy
     * @param {string} cond cond
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyControllerApi
     */
    public getPropertyCodeFuzzyUsingGET(cond: string, options?: any) {
        return PropertyControllerApiFp(this.configuration).getPropertyCodeFuzzyUsingGET(cond, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getPropertyEnumCodes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyControllerApi
     */
    public getPropertyEnumCodesUsingGET(options?: any) {
        return PropertyControllerApiFp(this.configuration).getPropertyEnumCodesUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getPropertyTreeByCodeType
     * @param {string} codetype codetype
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyControllerApi
     */
    public getPropertyTreeByCodeTypeUsingGET(codetype: string, options?: any) {
        return PropertyControllerApiFp(this.configuration).getPropertyTreeByCodeTypeUsingGET(codetype, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getPropertyTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyControllerApi
     */
    public getPropertyTypesUsingGET(options?: any) {
        return PropertyControllerApiFp(this.configuration).getPropertyTypesUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateProperty
     * @param {object} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertyControllerApi
     */
    public updatePropertyUsingPOST(body: object, options?: any) {
        return PropertyControllerApiFp(this.configuration).updatePropertyUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }

}

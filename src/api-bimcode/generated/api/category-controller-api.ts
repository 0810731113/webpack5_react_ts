// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Category } from '../model';
// @ts-ignore
import { CategoryPropertyRef } from '../model';
// @ts-ignore
import { ResponseCategory } from '../model';
// @ts-ignore
import { ResponseCategoryPropertyRef } from '../model';
// @ts-ignore
import { Responseint } from '../model';
/**
 * CategoryControllerApi - axios parameter creator
 * @export
 */
export const CategoryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteCategoryPropertyById
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoryPropertyByIdUsingDELETE: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteCategoryPropertyByIdUsingDELETE.');
            }
            const localVarPath = `/category/property/byid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCategoryProperty
         * @param {number} categoryid categoryid
         * @param {string} propertycode propertycode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoryPropertyUsingDELETE: async (categoryid: number, propertycode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryid' is not null or undefined
            if (categoryid === null || categoryid === undefined) {
                throw new RequiredError('categoryid','Required parameter categoryid was null or undefined when calling deleteCategoryPropertyUsingDELETE.');
            }
            // verify required parameter 'propertycode' is not null or undefined
            if (propertycode === null || propertycode === undefined) {
                throw new RequiredError('propertycode','Required parameter propertycode was null or undefined when calling deleteCategoryPropertyUsingDELETE.');
            }
            const localVarPath = `/category/property`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categoryid !== undefined) {
                localVarQueryParameter['categoryid'] = categoryid;
            }

            if (propertycode !== undefined) {
                localVarQueryParameter['propertycode'] = propertycode;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCategory
         * @param {number} categoryid categoryid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoryUsingDELETE: async (categoryid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryid' is not null or undefined
            if (categoryid === null || categoryid === undefined) {
                throw new RequiredError('categoryid','Required parameter categoryid was null or undefined when calling deleteCategoryUsingDELETE.');
            }
            const localVarPath = `/category/{categoryid}`
                .replace(`{${"categoryid"}}`, encodeURIComponent(String(categoryid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCategories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCategoryById
         * @param {number} categoryId categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryByIdUsingGET: async (categoryId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling getCategoryByIdUsingGET.');
            }
            const localVarPath = `/category/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCategoryPropertyRefsById
         * @param {number} categoryid categoryid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryPropertyRefsByIdUsingGET: async (categoryid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryid' is not null or undefined
            if (categoryid === null || categoryid === undefined) {
                throw new RequiredError('categoryid','Required parameter categoryid was null or undefined when calling getCategoryPropertyRefsByIdUsingGET.');
            }
            const localVarPath = `/category/properties/{categoryid}`
                .replace(`{${"categoryid"}}`, encodeURIComponent(String(categoryid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCategoryPropertyRefs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryPropertyRefsUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/category/properties`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary newCategoryProperty
         * @param {CategoryPropertyRef} newCategoryPropertyRef newCategoryPropertyRef
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newCategoryPropertyUsingPUT: async (newCategoryPropertyRef: CategoryPropertyRef, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'newCategoryPropertyRef' is not null or undefined
            if (newCategoryPropertyRef === null || newCategoryPropertyRef === undefined) {
                throw new RequiredError('newCategoryPropertyRef','Required parameter newCategoryPropertyRef was null or undefined when calling newCategoryPropertyUsingPUT.');
            }
            const localVarPath = `/category/property`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof newCategoryPropertyRef !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newCategoryPropertyRef !== undefined ? newCategoryPropertyRef : {}) : (newCategoryPropertyRef || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary newCategory
         * @param {Category} newCategory newCategory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newCategoryUsingPUT: async (newCategory: Category, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'newCategory' is not null or undefined
            if (newCategory === null || newCategory === undefined) {
                throw new RequiredError('newCategory','Required parameter newCategory was null or undefined when calling newCategoryUsingPUT.');
            }
            const localVarPath = `/category`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof newCategory !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newCategory !== undefined ? newCategory : {}) : (newCategory || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCategory
         * @param {Category} category category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategoryUsingPOST: async (category: Category, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling updateCategoryUsingPOST.');
            }
            const localVarPath = `/category`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof category !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(category !== undefined ? category : {}) : (category || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryControllerApi - functional programming interface
 * @export
 */
export const CategoryControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary deleteCategoryPropertyById
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategoryPropertyByIdUsingDELETE(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await CategoryControllerApiAxiosParamCreator(configuration).deleteCategoryPropertyByIdUsingDELETE(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteCategoryProperty
         * @param {number} categoryid categoryid
         * @param {string} propertycode propertycode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategoryPropertyUsingDELETE(categoryid: number, propertycode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await CategoryControllerApiAxiosParamCreator(configuration).deleteCategoryPropertyUsingDELETE(categoryid, propertycode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteCategory
         * @param {number} categoryid categoryid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategoryUsingDELETE(categoryid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await CategoryControllerApiAxiosParamCreator(configuration).deleteCategoryUsingDELETE(categoryid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCategories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoriesUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await CategoryControllerApiAxiosParamCreator(configuration).getCategoriesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCategoryById
         * @param {number} categoryId categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoryByIdUsingGET(categoryId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await CategoryControllerApiAxiosParamCreator(configuration).getCategoryByIdUsingGET(categoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCategoryPropertyRefsById
         * @param {number} categoryid categoryid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoryPropertyRefsByIdUsingGET(categoryid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryPropertyRef>>> {
            const localVarAxiosArgs = await CategoryControllerApiAxiosParamCreator(configuration).getCategoryPropertyRefsByIdUsingGET(categoryid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCategoryPropertyRefs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoryPropertyRefsUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryPropertyRef>>> {
            const localVarAxiosArgs = await CategoryControllerApiAxiosParamCreator(configuration).getCategoryPropertyRefsUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary newCategoryProperty
         * @param {CategoryPropertyRef} newCategoryPropertyRef newCategoryPropertyRef
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newCategoryPropertyUsingPUT(newCategoryPropertyRef: CategoryPropertyRef, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCategoryPropertyRef>> {
            const localVarAxiosArgs = await CategoryControllerApiAxiosParamCreator(configuration).newCategoryPropertyUsingPUT(newCategoryPropertyRef, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary newCategory
         * @param {Category} newCategory newCategory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newCategoryUsingPUT(newCategory: Category, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCategory>> {
            const localVarAxiosArgs = await CategoryControllerApiAxiosParamCreator(configuration).newCategoryUsingPUT(newCategory, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateCategory
         * @param {Category} category category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategoryUsingPOST(category: Category, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await CategoryControllerApiAxiosParamCreator(configuration).updateCategoryUsingPOST(category, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CategoryControllerApi - factory interface
 * @export
 */
export const CategoryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary deleteCategoryPropertyById
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoryPropertyByIdUsingDELETE(id: number, options?: any): AxiosPromise<Responseint> {
            return CategoryControllerApiFp(configuration).deleteCategoryPropertyByIdUsingDELETE(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteCategoryProperty
         * @param {number} categoryid categoryid
         * @param {string} propertycode propertycode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoryPropertyUsingDELETE(categoryid: number, propertycode: string, options?: any): AxiosPromise<Responseint> {
            return CategoryControllerApiFp(configuration).deleteCategoryPropertyUsingDELETE(categoryid, propertycode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteCategory
         * @param {number} categoryid categoryid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoryUsingDELETE(categoryid: number, options?: any): AxiosPromise<Responseint> {
            return CategoryControllerApiFp(configuration).deleteCategoryUsingDELETE(categoryid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCategories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesUsingGET(options?: any): AxiosPromise<Array<Category>> {
            return CategoryControllerApiFp(configuration).getCategoriesUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCategoryById
         * @param {number} categoryId categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryByIdUsingGET(categoryId: number, options?: any): AxiosPromise<Category> {
            return CategoryControllerApiFp(configuration).getCategoryByIdUsingGET(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCategoryPropertyRefsById
         * @param {number} categoryid categoryid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryPropertyRefsByIdUsingGET(categoryid: number, options?: any): AxiosPromise<Array<CategoryPropertyRef>> {
            return CategoryControllerApiFp(configuration).getCategoryPropertyRefsByIdUsingGET(categoryid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getCategoryPropertyRefs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryPropertyRefsUsingGET(options?: any): AxiosPromise<Array<CategoryPropertyRef>> {
            return CategoryControllerApiFp(configuration).getCategoryPropertyRefsUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary newCategoryProperty
         * @param {CategoryPropertyRef} newCategoryPropertyRef newCategoryPropertyRef
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newCategoryPropertyUsingPUT(newCategoryPropertyRef: CategoryPropertyRef, options?: any): AxiosPromise<ResponseCategoryPropertyRef> {
            return CategoryControllerApiFp(configuration).newCategoryPropertyUsingPUT(newCategoryPropertyRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary newCategory
         * @param {Category} newCategory newCategory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newCategoryUsingPUT(newCategory: Category, options?: any): AxiosPromise<ResponseCategory> {
            return CategoryControllerApiFp(configuration).newCategoryUsingPUT(newCategory, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCategory
         * @param {Category} category category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategoryUsingPOST(category: Category, options?: any): AxiosPromise<Responseint> {
            return CategoryControllerApiFp(configuration).updateCategoryUsingPOST(category, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryControllerApi - object-oriented interface
 * @export
 * @class CategoryControllerApi
 * @extends {BaseAPI}
 */
export class CategoryControllerApi extends BaseAPI {
    /**
     * 
     * @summary deleteCategoryPropertyById
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public deleteCategoryPropertyByIdUsingDELETE(id: number, options?: any) {
        return CategoryControllerApiFp(this.configuration).deleteCategoryPropertyByIdUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteCategoryProperty
     * @param {number} categoryid categoryid
     * @param {string} propertycode propertycode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public deleteCategoryPropertyUsingDELETE(categoryid: number, propertycode: string, options?: any) {
        return CategoryControllerApiFp(this.configuration).deleteCategoryPropertyUsingDELETE(categoryid, propertycode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteCategory
     * @param {number} categoryid categoryid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public deleteCategoryUsingDELETE(categoryid: number, options?: any) {
        return CategoryControllerApiFp(this.configuration).deleteCategoryUsingDELETE(categoryid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCategories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public getCategoriesUsingGET(options?: any) {
        return CategoryControllerApiFp(this.configuration).getCategoriesUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCategoryById
     * @param {number} categoryId categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public getCategoryByIdUsingGET(categoryId: number, options?: any) {
        return CategoryControllerApiFp(this.configuration).getCategoryByIdUsingGET(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCategoryPropertyRefsById
     * @param {number} categoryid categoryid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public getCategoryPropertyRefsByIdUsingGET(categoryid: number, options?: any) {
        return CategoryControllerApiFp(this.configuration).getCategoryPropertyRefsByIdUsingGET(categoryid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getCategoryPropertyRefs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public getCategoryPropertyRefsUsingGET(options?: any) {
        return CategoryControllerApiFp(this.configuration).getCategoryPropertyRefsUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary newCategoryProperty
     * @param {CategoryPropertyRef} newCategoryPropertyRef newCategoryPropertyRef
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public newCategoryPropertyUsingPUT(newCategoryPropertyRef: CategoryPropertyRef, options?: any) {
        return CategoryControllerApiFp(this.configuration).newCategoryPropertyUsingPUT(newCategoryPropertyRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary newCategory
     * @param {Category} newCategory newCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public newCategoryUsingPUT(newCategory: Category, options?: any) {
        return CategoryControllerApiFp(this.configuration).newCategoryUsingPUT(newCategory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCategory
     * @param {Category} category category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public updateCategoryUsingPOST(category: Category, options?: any) {
        return CategoryControllerApiFp(this.configuration).updateCategoryUsingPOST(category, options).then((request) => request(this.axios, this.basePath));
    }

}

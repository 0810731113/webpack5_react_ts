// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DataCode } from '../model';
// @ts-ignore
import { ResponseListDataCode } from '../model';
// @ts-ignore
import { Responseint } from '../model';
// @ts-ignore
import { TypeTableTranslate } from '../model';
/**
 * EnumControllerApi - axios parameter creator
 * @export
 */
export const EnumControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createNewEnum
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewEnumUsingPUT: async (body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createNewEnumUsingPUT.');
            }
            const localVarPath = `/enum`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteEnum
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnumUsingDELETE: async (code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling deleteEnumUsingDELETE.');
            }
            const localVarPath = `/enum/bycode`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getClassificationCodeFuzzy
         * @param {string} cond cond
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassificationCodeFuzzyUsingGET1: async (cond: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cond' is not null or undefined
            if (cond === null || cond === undefined) {
                throw new RequiredError('cond','Required parameter cond was null or undefined when calling getClassificationCodeFuzzyUsingGET1.');
            }
            const localVarPath = `/enum/codes/fuzzy`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cond !== undefined) {
                localVarQueryParameter['cond'] = cond;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getEnumCodeByCode
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnumCodeByCodeUsingGET: async (code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling getEnumCodeByCodeUsingGET.');
            }
            const localVarPath = `/enum/bycode`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getEnumTreeByEnumType
         * @param {string} [codetype] codetype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnumTreeByEnumTypeUsingGET: async (codetype?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/enum/codes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codetype !== undefined) {
                localVarQueryParameter['codetype'] = codetype;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getEnumTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnumTypesUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/enum/types`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getEnumsByEnumType
         * @param {string} [codetype] codetype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnumsByEnumTypeUsingGET: async (codetype?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/enum/codes/flat`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (codetype !== undefined) {
                localVarQueryParameter['codetype'] = codetype;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateEnum
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnumUsingPOST: async (body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateEnumUsingPOST.');
            }
            const localVarPath = `/enum`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnumControllerApi - functional programming interface
 * @export
 */
export const EnumControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createNewEnum
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewEnumUsingPUT(body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await EnumControllerApiAxiosParamCreator(configuration).createNewEnumUsingPUT(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteEnum
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEnumUsingDELETE(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await EnumControllerApiAxiosParamCreator(configuration).deleteEnumUsingDELETE(code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getClassificationCodeFuzzy
         * @param {string} cond cond
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClassificationCodeFuzzyUsingGET1(cond: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataCode>> {
            const localVarAxiosArgs = await EnumControllerApiAxiosParamCreator(configuration).getClassificationCodeFuzzyUsingGET1(cond, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getEnumCodeByCode
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnumCodeByCodeUsingGET(code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataCode>> {
            const localVarAxiosArgs = await EnumControllerApiAxiosParamCreator(configuration).getEnumCodeByCodeUsingGET(code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getEnumTreeByEnumType
         * @param {string} [codetype] codetype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnumTreeByEnumTypeUsingGET(codetype?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataCode>>> {
            const localVarAxiosArgs = await EnumControllerApiAxiosParamCreator(configuration).getEnumTreeByEnumTypeUsingGET(codetype, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getEnumTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnumTypesUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TypeTableTranslate>>> {
            const localVarAxiosArgs = await EnumControllerApiAxiosParamCreator(configuration).getEnumTypesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getEnumsByEnumType
         * @param {string} [codetype] codetype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnumsByEnumTypeUsingGET(codetype?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataCode>>> {
            const localVarAxiosArgs = await EnumControllerApiAxiosParamCreator(configuration).getEnumsByEnumTypeUsingGET(codetype, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateEnum
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEnumUsingPOST(body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await EnumControllerApiAxiosParamCreator(configuration).updateEnumUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EnumControllerApi - factory interface
 * @export
 */
export const EnumControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary createNewEnum
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewEnumUsingPUT(body: object, options?: any): AxiosPromise<Responseint> {
            return EnumControllerApiFp(configuration).createNewEnumUsingPUT(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteEnum
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnumUsingDELETE(code: string, options?: any): AxiosPromise<Responseint> {
            return EnumControllerApiFp(configuration).deleteEnumUsingDELETE(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getClassificationCodeFuzzy
         * @param {string} cond cond
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClassificationCodeFuzzyUsingGET1(cond: string, options?: any): AxiosPromise<ResponseListDataCode> {
            return EnumControllerApiFp(configuration).getClassificationCodeFuzzyUsingGET1(cond, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getEnumCodeByCode
         * @param {string} code code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnumCodeByCodeUsingGET(code: string, options?: any): AxiosPromise<DataCode> {
            return EnumControllerApiFp(configuration).getEnumCodeByCodeUsingGET(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getEnumTreeByEnumType
         * @param {string} [codetype] codetype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnumTreeByEnumTypeUsingGET(codetype?: string, options?: any): AxiosPromise<Array<DataCode>> {
            return EnumControllerApiFp(configuration).getEnumTreeByEnumTypeUsingGET(codetype, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getEnumTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnumTypesUsingGET(options?: any): AxiosPromise<Array<TypeTableTranslate>> {
            return EnumControllerApiFp(configuration).getEnumTypesUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getEnumsByEnumType
         * @param {string} [codetype] codetype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnumsByEnumTypeUsingGET(codetype?: string, options?: any): AxiosPromise<Array<DataCode>> {
            return EnumControllerApiFp(configuration).getEnumsByEnumTypeUsingGET(codetype, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateEnum
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnumUsingPOST(body: object, options?: any): AxiosPromise<Responseint> {
            return EnumControllerApiFp(configuration).updateEnumUsingPOST(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnumControllerApi - object-oriented interface
 * @export
 * @class EnumControllerApi
 * @extends {BaseAPI}
 */
export class EnumControllerApi extends BaseAPI {
    /**
     * 
     * @summary createNewEnum
     * @param {object} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumControllerApi
     */
    public createNewEnumUsingPUT(body: object, options?: any) {
        return EnumControllerApiFp(this.configuration).createNewEnumUsingPUT(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteEnum
     * @param {string} code code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumControllerApi
     */
    public deleteEnumUsingDELETE(code: string, options?: any) {
        return EnumControllerApiFp(this.configuration).deleteEnumUsingDELETE(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getClassificationCodeFuzzy
     * @param {string} cond cond
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumControllerApi
     */
    public getClassificationCodeFuzzyUsingGET1(cond: string, options?: any) {
        return EnumControllerApiFp(this.configuration).getClassificationCodeFuzzyUsingGET1(cond, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getEnumCodeByCode
     * @param {string} code code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumControllerApi
     */
    public getEnumCodeByCodeUsingGET(code: string, options?: any) {
        return EnumControllerApiFp(this.configuration).getEnumCodeByCodeUsingGET(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getEnumTreeByEnumType
     * @param {string} [codetype] codetype
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumControllerApi
     */
    public getEnumTreeByEnumTypeUsingGET(codetype?: string, options?: any) {
        return EnumControllerApiFp(this.configuration).getEnumTreeByEnumTypeUsingGET(codetype, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getEnumTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumControllerApi
     */
    public getEnumTypesUsingGET(options?: any) {
        return EnumControllerApiFp(this.configuration).getEnumTypesUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getEnumsByEnumType
     * @param {string} [codetype] codetype
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumControllerApi
     */
    public getEnumsByEnumTypeUsingGET(codetype?: string, options?: any) {
        return EnumControllerApiFp(this.configuration).getEnumsByEnumTypeUsingGET(codetype, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateEnum
     * @param {object} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnumControllerApi
     */
    public updateEnumUsingPOST(body: object, options?: any) {
        return EnumControllerApiFp(this.configuration).updateEnumUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }

}

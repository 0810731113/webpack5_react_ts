// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResponseListIssueOverview } from '../model';
// @ts-ignore
import { ResponseListPublishedDatasetsOverview } from '../model';
// @ts-ignore
import { ResponseListTeamOverview } from '../model';
// @ts-ignore
import { ResponseOverviewStatVO } from '../model';
// @ts-ignore
import { ResponseProjectBasicInfoOverview } from '../model';
// @ts-ignore
import { ResponseProjectsOverview } from '../model';
// @ts-ignore
import { ResponseUserOverview } from '../model';
// @ts-ignore
import { ResponseVersionsOverview } from '../model';
/**
 * OverviewApi - axios parameter creator
 * @export
 */
export const OverviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 统计项目下问题的信息
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssuesOverviewUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getIssuesOverviewUsingGET.');
            }
            const localVarPath = `/overview/projects/{projectId}/issues`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 核心指标统计数据
         * @param {number} [from] from
         * @param {number} [to] to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOverviewTaskUsingGET: async (from?: number, to?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/overview`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 统计项目基本信息
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsBasicInfoUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getProjectsBasicInfoUsingGET.');
            }
            const localVarPath = `/overview/projects/{projectId}/basicInfo`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新建项目数统计
         * @param {'DAY' | 'WEEK' | 'MONTH'} dayType dayType
         * @param {string} endDate endDate
         * @param {string} startDate startDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsOverviewUsingGET: async (dayType: 'DAY' | 'WEEK' | 'MONTH', endDate: string, startDate: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dayType' is not null or undefined
            if (dayType === null || dayType === undefined) {
                throw new RequiredError('dayType','Required parameter dayType was null or undefined when calling getProjectsOverviewUsingGET.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling getProjectsOverviewUsingGET.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling getProjectsOverviewUsingGET.');
            }
            const localVarPath = `/overview/projects`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dayType !== undefined) {
                localVarQueryParameter['dayType'] = dayType;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 统计项目下工作单元提交的信息
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedDatasetsOverviewUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getPublishedDatasetsOverviewUsingGET.');
            }
            const localVarPath = `/overview/projects/{projectId}/datasets`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 统计项目下团队的信息
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamOverviewUsingGET: async (projectId: string, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getTeamOverviewUsingGET.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling getTeamOverviewUsingGET.');
            }
            const localVarPath = `/overview/projects/{projectId}/teams`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户画像统计
         * @param {'DAY' | 'WEEK' | 'MONTH'} dayType dayType
         * @param {string} endDate endDate
         * @param {string} startDate startDate
         * @param {'Active' | 'NEW_ACTIVE' | 'EFFECTIVE_ACTIVE' | 'DEPTH_ACTIVE' | 'DEPTH_USE'} userType userType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOLAPOverviewUsingGET: async (dayType: 'DAY' | 'WEEK' | 'MONTH', endDate: string, startDate: string, userType: 'Active' | 'NEW_ACTIVE' | 'EFFECTIVE_ACTIVE' | 'DEPTH_ACTIVE' | 'DEPTH_USE', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dayType' is not null or undefined
            if (dayType === null || dayType === undefined) {
                throw new RequiredError('dayType','Required parameter dayType was null or undefined when calling getUserOLAPOverviewUsingGET.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling getUserOLAPOverviewUsingGET.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling getUserOLAPOverviewUsingGET.');
            }
            // verify required parameter 'userType' is not null or undefined
            if (userType === null || userType === undefined) {
                throw new RequiredError('userType','Required parameter userType was null or undefined when calling getUserOLAPOverviewUsingGET.');
            }
            const localVarPath = `/overview/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dayType !== undefined) {
                localVarQueryParameter['dayType'] = dayType;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (userType !== undefined) {
                localVarQueryParameter['userType'] = userType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 保存提交统计
         * @param {'DAY' | 'WEEK' | 'MONTH'} dayType dayType
         * @param {string} endDate endDate
         * @param {string} startDate startDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersionsOverviewUsingGET: async (dayType: 'DAY' | 'WEEK' | 'MONTH', endDate: string, startDate: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dayType' is not null or undefined
            if (dayType === null || dayType === undefined) {
                throw new RequiredError('dayType','Required parameter dayType was null or undefined when calling getVersionsOverviewUsingGET.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling getVersionsOverviewUsingGET.');
            }
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling getVersionsOverviewUsingGET.');
            }
            const localVarPath = `/overview/versions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dayType !== undefined) {
                localVarQueryParameter['dayType'] = dayType;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OverviewApi - functional programming interface
 * @export
 */
export const OverviewApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 统计项目下问题的信息
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIssuesOverviewUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListIssueOverview>> {
            const localVarAxiosArgs = await OverviewApiAxiosParamCreator(configuration).getIssuesOverviewUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 核心指标统计数据
         * @param {number} [from] from
         * @param {number} [to] to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOverviewTaskUsingGET(from?: number, to?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseOverviewStatVO>> {
            const localVarAxiosArgs = await OverviewApiAxiosParamCreator(configuration).getOverviewTaskUsingGET(from, to, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 统计项目基本信息
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectsBasicInfoUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProjectBasicInfoOverview>> {
            const localVarAxiosArgs = await OverviewApiAxiosParamCreator(configuration).getProjectsBasicInfoUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 新建项目数统计
         * @param {'DAY' | 'WEEK' | 'MONTH'} dayType dayType
         * @param {string} endDate endDate
         * @param {string} startDate startDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectsOverviewUsingGET(dayType: 'DAY' | 'WEEK' | 'MONTH', endDate: string, startDate: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProjectsOverview>> {
            const localVarAxiosArgs = await OverviewApiAxiosParamCreator(configuration).getProjectsOverviewUsingGET(dayType, endDate, startDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 统计项目下工作单元提交的信息
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublishedDatasetsOverviewUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListPublishedDatasetsOverview>> {
            const localVarAxiosArgs = await OverviewApiAxiosParamCreator(configuration).getPublishedDatasetsOverviewUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 统计项目下团队的信息
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamOverviewUsingGET(projectId: string, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListTeamOverview>> {
            const localVarAxiosArgs = await OverviewApiAxiosParamCreator(configuration).getTeamOverviewUsingGET(projectId, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 用户画像统计
         * @param {'DAY' | 'WEEK' | 'MONTH'} dayType dayType
         * @param {string} endDate endDate
         * @param {string} startDate startDate
         * @param {'Active' | 'NEW_ACTIVE' | 'EFFECTIVE_ACTIVE' | 'DEPTH_ACTIVE' | 'DEPTH_USE'} userType userType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserOLAPOverviewUsingGET(dayType: 'DAY' | 'WEEK' | 'MONTH', endDate: string, startDate: string, userType: 'Active' | 'NEW_ACTIVE' | 'EFFECTIVE_ACTIVE' | 'DEPTH_ACTIVE' | 'DEPTH_USE', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUserOverview>> {
            const localVarAxiosArgs = await OverviewApiAxiosParamCreator(configuration).getUserOLAPOverviewUsingGET(dayType, endDate, startDate, userType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 保存提交统计
         * @param {'DAY' | 'WEEK' | 'MONTH'} dayType dayType
         * @param {string} endDate endDate
         * @param {string} startDate startDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVersionsOverviewUsingGET(dayType: 'DAY' | 'WEEK' | 'MONTH', endDate: string, startDate: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVersionsOverview>> {
            const localVarAxiosArgs = await OverviewApiAxiosParamCreator(configuration).getVersionsOverviewUsingGET(dayType, endDate, startDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OverviewApi - factory interface
 * @export
 */
export const OverviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 统计项目下问题的信息
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssuesOverviewUsingGET(projectId: string, options?: any): AxiosPromise<ResponseListIssueOverview> {
            return OverviewApiFp(configuration).getIssuesOverviewUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 核心指标统计数据
         * @param {number} [from] from
         * @param {number} [to] to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOverviewTaskUsingGET(from?: number, to?: number, options?: any): AxiosPromise<ResponseOverviewStatVO> {
            return OverviewApiFp(configuration).getOverviewTaskUsingGET(from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 统计项目基本信息
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsBasicInfoUsingGET(projectId: string, options?: any): AxiosPromise<ResponseProjectBasicInfoOverview> {
            return OverviewApiFp(configuration).getProjectsBasicInfoUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新建项目数统计
         * @param {'DAY' | 'WEEK' | 'MONTH'} dayType dayType
         * @param {string} endDate endDate
         * @param {string} startDate startDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsOverviewUsingGET(dayType: 'DAY' | 'WEEK' | 'MONTH', endDate: string, startDate: string, options?: any): AxiosPromise<ResponseProjectsOverview> {
            return OverviewApiFp(configuration).getProjectsOverviewUsingGET(dayType, endDate, startDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 统计项目下工作单元提交的信息
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedDatasetsOverviewUsingGET(projectId: string, options?: any): AxiosPromise<ResponseListPublishedDatasetsOverview> {
            return OverviewApiFp(configuration).getPublishedDatasetsOverviewUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 统计项目下团队的信息
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamOverviewUsingGET(projectId: string, xGdcUserid: string, options?: any): AxiosPromise<ResponseListTeamOverview> {
            return OverviewApiFp(configuration).getTeamOverviewUsingGET(projectId, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 用户画像统计
         * @param {'DAY' | 'WEEK' | 'MONTH'} dayType dayType
         * @param {string} endDate endDate
         * @param {string} startDate startDate
         * @param {'Active' | 'NEW_ACTIVE' | 'EFFECTIVE_ACTIVE' | 'DEPTH_ACTIVE' | 'DEPTH_USE'} userType userType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOLAPOverviewUsingGET(dayType: 'DAY' | 'WEEK' | 'MONTH', endDate: string, startDate: string, userType: 'Active' | 'NEW_ACTIVE' | 'EFFECTIVE_ACTIVE' | 'DEPTH_ACTIVE' | 'DEPTH_USE', options?: any): AxiosPromise<ResponseUserOverview> {
            return OverviewApiFp(configuration).getUserOLAPOverviewUsingGET(dayType, endDate, startDate, userType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 保存提交统计
         * @param {'DAY' | 'WEEK' | 'MONTH'} dayType dayType
         * @param {string} endDate endDate
         * @param {string} startDate startDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersionsOverviewUsingGET(dayType: 'DAY' | 'WEEK' | 'MONTH', endDate: string, startDate: string, options?: any): AxiosPromise<ResponseVersionsOverview> {
            return OverviewApiFp(configuration).getVersionsOverviewUsingGET(dayType, endDate, startDate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OverviewApi - object-oriented interface
 * @export
 * @class OverviewApi
 * @extends {BaseAPI}
 */
export class OverviewApi extends BaseAPI {
    /**
     * 
     * @summary 统计项目下问题的信息
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OverviewApi
     */
    public getIssuesOverviewUsingGET(projectId: string, options?: any) {
        return OverviewApiFp(this.configuration).getIssuesOverviewUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 核心指标统计数据
     * @param {number} [from] from
     * @param {number} [to] to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OverviewApi
     */
    public getOverviewTaskUsingGET(from?: number, to?: number, options?: any) {
        return OverviewApiFp(this.configuration).getOverviewTaskUsingGET(from, to, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 统计项目基本信息
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OverviewApi
     */
    public getProjectsBasicInfoUsingGET(projectId: string, options?: any) {
        return OverviewApiFp(this.configuration).getProjectsBasicInfoUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新建项目数统计
     * @param {'DAY' | 'WEEK' | 'MONTH'} dayType dayType
     * @param {string} endDate endDate
     * @param {string} startDate startDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OverviewApi
     */
    public getProjectsOverviewUsingGET(dayType: 'DAY' | 'WEEK' | 'MONTH', endDate: string, startDate: string, options?: any) {
        return OverviewApiFp(this.configuration).getProjectsOverviewUsingGET(dayType, endDate, startDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 统计项目下工作单元提交的信息
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OverviewApi
     */
    public getPublishedDatasetsOverviewUsingGET(projectId: string, options?: any) {
        return OverviewApiFp(this.configuration).getPublishedDatasetsOverviewUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 统计项目下团队的信息
     * @param {string} projectId projectId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OverviewApi
     */
    public getTeamOverviewUsingGET(projectId: string, xGdcUserid: string, options?: any) {
        return OverviewApiFp(this.configuration).getTeamOverviewUsingGET(projectId, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 用户画像统计
     * @param {'DAY' | 'WEEK' | 'MONTH'} dayType dayType
     * @param {string} endDate endDate
     * @param {string} startDate startDate
     * @param {'Active' | 'NEW_ACTIVE' | 'EFFECTIVE_ACTIVE' | 'DEPTH_ACTIVE' | 'DEPTH_USE'} userType userType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OverviewApi
     */
    public getUserOLAPOverviewUsingGET(dayType: 'DAY' | 'WEEK' | 'MONTH', endDate: string, startDate: string, userType: 'Active' | 'NEW_ACTIVE' | 'EFFECTIVE_ACTIVE' | 'DEPTH_ACTIVE' | 'DEPTH_USE', options?: any) {
        return OverviewApiFp(this.configuration).getUserOLAPOverviewUsingGET(dayType, endDate, startDate, userType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 保存提交统计
     * @param {'DAY' | 'WEEK' | 'MONTH'} dayType dayType
     * @param {string} endDate endDate
     * @param {string} startDate startDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OverviewApi
     */
    public getVersionsOverviewUsingGET(dayType: 'DAY' | 'WEEK' | 'MONTH', endDate: string, startDate: string, options?: any) {
        return OverviewApiFp(this.configuration).getVersionsOverviewUsingGET(dayType, endDate, startDate, options).then((request) => request(this.axios, this.basePath));
    }

}

// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from "url";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { ResponseAccountVO, UserLogin } from "../model";
/**
 * AdminAuthApi - axios parameter creator
 * @export
 */
export const AdminAuthApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary 后台管理自定义登陆API
     * @param {UserLogin} loginInfo loginInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminLoginUsingPOST: async (
      loginInfo: UserLogin,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'loginInfo' is not null or undefined
      if (loginInfo === null || loginInfo === undefined) {
        throw new RequiredError(
          "loginInfo",
          "Required parameter loginInfo was null or undefined when calling adminLoginUsingPOST.",
        );
      }
      const localVarPath = `/admin/login`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof loginInfo !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(loginInfo !== undefined ? loginInfo : {})
        : loginInfo || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 后台管理获取当前用户信息
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeUsingGET: async (
      xGdcUserid: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'xGdcUserid' is not null or undefined
      if (xGdcUserid === null || xGdcUserid === undefined) {
        throw new RequiredError(
          "xGdcUserid",
          "Required parameter xGdcUserid was null or undefined when calling getMeUsingGET.",
        );
      }
      const localVarPath = `/admin/me`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (xGdcUserid !== undefined && xGdcUserid !== null) {
        localVarHeaderParameter["x-gdc-userid"] = String(xGdcUserid);
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminAuthApi - functional programming interface
 * @export
 */
export const AdminAuthApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 后台管理自定义登陆API
     * @param {UserLogin} loginInfo loginInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminLoginUsingPOST(
      loginInfo: UserLogin,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseAccountVO>
    > {
      const localVarAxiosArgs = await AdminAuthApiAxiosParamCreator(
        configuration,
      ).adminLoginUsingPOST(loginInfo, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 后台管理获取当前用户信息
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMeUsingGET(
      xGdcUserid: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseAccountVO>
    > {
      const localVarAxiosArgs = await AdminAuthApiAxiosParamCreator(
        configuration,
      ).getMeUsingGET(xGdcUserid, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * AdminAuthApi - factory interface
 * @export
 */
export const AdminAuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @summary 后台管理自定义登陆API
     * @param {UserLogin} loginInfo loginInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminLoginUsingPOST(
      loginInfo: UserLogin,
      options?: any,
    ): AxiosPromise<ResponseAccountVO> {
      return AdminAuthApiFp(configuration)
        .adminLoginUsingPOST(loginInfo, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 后台管理获取当前用户信息
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeUsingGET(
      xGdcUserid: string,
      options?: any,
    ): AxiosPromise<ResponseAccountVO> {
      return AdminAuthApiFp(configuration)
        .getMeUsingGET(xGdcUserid, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminAuthApi - object-oriented interface
 * @export
 * @class AdminAuthApi
 * @extends {BaseAPI}
 */
export class AdminAuthApi extends BaseAPI {
  /**
   *
   * @summary 后台管理自定义登陆API
   * @param {UserLogin} loginInfo loginInfo
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminAuthApi
   */
  public adminLoginUsingPOST(loginInfo: UserLogin, options?: any) {
    return AdminAuthApiFp(this.configuration)
      .adminLoginUsingPOST(loginInfo, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 后台管理获取当前用户信息
   * @param {string} xGdcUserid x-gdc-userid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminAuthApi
   */
  public getMeUsingGET(xGdcUserid: string, options?: any) {
    return AdminAuthApiFp(this.configuration)
      .getMeUsingGET(xGdcUserid, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

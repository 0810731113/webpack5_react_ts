// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PersonalAccountCreation } from '../model';
// @ts-ignore
import { ResponseAccountVO } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
/**
 * PersonalAccountApi - axios parameter creator
 * @export
 */
export const PersonalAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 发送短信验证码
         * @param {string} mobile mobile
         * @param {'query'} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCodeUsingGET1: async (mobile: string, type: 'query', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mobile' is not null or undefined
            if (mobile === null || mobile === undefined) {
                throw new RequiredError('mobile','Required parameter mobile was null or undefined when calling getCodeUsingGET1.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling getCodeUsingGET1.');
            }
            const localVarPath = `/personal/code`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mobile !== undefined) {
                localVarQueryParameter.mobile = mobile;
            }

            if (type !== undefined) {
                localVarQueryParameter.type = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 个人账号申请试用
         * @param {PersonalAccountCreation} personalAccountCreation personalAccountCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewPersonalAccountUsingPOST: async (personalAccountCreation: PersonalAccountCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'personalAccountCreation' is not null or undefined
            if (personalAccountCreation === null || personalAccountCreation === undefined) {
                throw new RequiredError('personalAccountCreation','Required parameter personalAccountCreation was null or undefined when calling reviewPersonalAccountUsingPOST.');
            }
            const localVarPath = `/personal/review`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof personalAccountCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(personalAccountCreation !== undefined ? personalAccountCreation : {}) : (personalAccountCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonalAccountApi - functional programming interface
 * @export
 */
export const PersonalAccountApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 发送短信验证码
         * @param {string} mobile mobile
         * @param {'query'} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCodeUsingGET1(mobile: string, type: 'query', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await PersonalAccountApiAxiosParamCreator(configuration).getCodeUsingGET1(mobile, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 个人账号申请试用
         * @param {PersonalAccountCreation} personalAccountCreation personalAccountCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reviewPersonalAccountUsingPOST(personalAccountCreation: PersonalAccountCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAccountVO>> {
            const localVarAxiosArgs = await PersonalAccountApiAxiosParamCreator(configuration).reviewPersonalAccountUsingPOST(personalAccountCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PersonalAccountApi - factory interface
 * @export
 */
export const PersonalAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 发送短信验证码
         * @param {string} mobile mobile
         * @param {'query'} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCodeUsingGET1(mobile: string, type: 'query', options?: any): AxiosPromise<ResponseVoid> {
            return PersonalAccountApiFp(configuration).getCodeUsingGET1(mobile, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 个人账号申请试用
         * @param {PersonalAccountCreation} personalAccountCreation personalAccountCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewPersonalAccountUsingPOST(personalAccountCreation: PersonalAccountCreation, options?: any): AxiosPromise<ResponseAccountVO> {
            return PersonalAccountApiFp(configuration).reviewPersonalAccountUsingPOST(personalAccountCreation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PersonalAccountApi - object-oriented interface
 * @export
 * @class PersonalAccountApi
 * @extends {BaseAPI}
 */
export class PersonalAccountApi extends BaseAPI {
    /**
     * 
     * @summary 发送短信验证码
     * @param {string} mobile mobile
     * @param {'query'} type type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccountApi
     */
    public getCodeUsingGET1(mobile: string, type: 'query', options?: any) {
        return PersonalAccountApiFp(this.configuration).getCodeUsingGET1(mobile, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 个人账号申请试用
     * @param {PersonalAccountCreation} personalAccountCreation personalAccountCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccountApi
     */
    public reviewPersonalAccountUsingPOST(personalAccountCreation: PersonalAccountCreation, options?: any) {
        return PersonalAccountApiFp(this.configuration).reviewPersonalAccountUsingPOST(personalAccountCreation, options).then((request) => request(this.axios, this.basePath));
    }

}

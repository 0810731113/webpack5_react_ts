// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResponseUserInfoWithToken } from '../model';
// @ts-ignore
import { UserLogin } from '../model';
/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 跳转企业用户信息页
         * @param {string} authorization Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountInfoPageUsingGET: async (authorization: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling accountInfoPageUsingGET.');
            }
            const localVarPath = `/web/enterprise`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter.Authorization = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 跳转用户信息页
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserInfoUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/web/userinfo`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 校验ticket
         * @param {string} returnUrl returnUrl
         * @param {string} ticket ticket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCASTicketUsingGET: async (returnUrl: string, ticket: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'returnUrl' is not null or undefined
            if (returnUrl === null || returnUrl === undefined) {
                throw new RequiredError('returnUrl','Required parameter returnUrl was null or undefined when calling checkCASTicketUsingGET.');
            }
            // verify required parameter 'ticket' is not null or undefined
            if (ticket === null || ticket === undefined) {
                throw new RequiredError('ticket','Required parameter ticket was null or undefined when calling checkCASTicketUsingGET.');
            }
            const localVarPath = `/check-ticket`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (returnUrl !== undefined) {
                localVarQueryParameter.returnUrl = returnUrl;
            }

            if (ticket !== undefined) {
                localVarQueryParameter.ticket = ticket;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 登录API
         * @param {string} returnUrl returnUrl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingGET: async (returnUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'returnUrl' is not null or undefined
            if (returnUrl === null || returnUrl === undefined) {
                throw new RequiredError('returnUrl','Required parameter returnUrl was null or undefined when calling loginUsingGET.');
            }
            const localVarPath = `/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (returnUrl !== undefined) {
                localVarQueryParameter.returnUrl = returnUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户名密码登陆API
         * @param {string} authorization Authorization
         * @param {UserLogin} userInfo userInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingPOST: async (authorization: string, userInfo: UserLogin, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling loginUsingPOST.');
            }
            // verify required parameter 'userInfo' is not null or undefined
            if (userInfo === null || userInfo === undefined) {
                throw new RequiredError('userInfo','Required parameter userInfo was null or undefined when calling loginUsingPOST.');
            }
            const localVarPath = `/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter.Authorization = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userInfo !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userInfo !== undefined ? userInfo : {}) : (userInfo || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 退出登录API
         * @param {string} returnTo returnTo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUsingGET: async (returnTo: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'returnTo' is not null or undefined
            if (returnTo === null || returnTo === undefined) {
                throw new RequiredError('returnTo','Required parameter returnTo was null or undefined when calling logoutUsingGET.');
            }
            const localVarPath = `/logout`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (returnTo !== undefined) {
                localVarQueryParameter.returnTo = returnTo;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 网页端自定义登陆API
         * @param {UserLogin} loginInfo loginInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLoginUsingPOST: async (loginInfo: UserLogin, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginInfo' is not null or undefined
            if (loginInfo === null || loginInfo === undefined) {
                throw new RequiredError('loginInfo','Required parameter loginInfo was null or undefined when calling webLoginUsingPOST.');
            }
            const localVarPath = `/web/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof loginInfo !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginInfo !== undefined ? loginInfo : {}) : (loginInfo || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 跳转企业用户信息页
         * @param {string} authorization Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountInfoPageUsingGET(authorization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).accountInfoPageUsingGET(authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 跳转用户信息页
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountUserInfoUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).accountUserInfoUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 校验ticket
         * @param {string} returnUrl returnUrl
         * @param {string} ticket ticket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkCASTicketUsingGET(returnUrl: string, ticket: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).checkCASTicketUsingGET(returnUrl, ticket, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 登录API
         * @param {string} returnUrl returnUrl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUsingGET(returnUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).loginUsingGET(returnUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 用户名密码登陆API
         * @param {string} authorization Authorization
         * @param {UserLogin} userInfo userInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUsingPOST(authorization: string, userInfo: UserLogin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUserInfoWithToken>> {
            const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).loginUsingPOST(authorization, userInfo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 退出登录API
         * @param {string} returnTo returnTo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutUsingGET(returnTo: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).logoutUsingGET(returnTo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 网页端自定义登陆API
         * @param {UserLogin} loginInfo loginInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webLoginUsingPOST(loginInfo: UserLogin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUserInfoWithToken>> {
            const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).webLoginUsingPOST(loginInfo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 跳转企业用户信息页
         * @param {string} authorization Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountInfoPageUsingGET(authorization: string, options?: any): AxiosPromise<void> {
            return LoginApiFp(configuration).accountInfoPageUsingGET(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 跳转用户信息页
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserInfoUsingGET(options?: any): AxiosPromise<void> {
            return LoginApiFp(configuration).accountUserInfoUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 校验ticket
         * @param {string} returnUrl returnUrl
         * @param {string} ticket ticket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCASTicketUsingGET(returnUrl: string, ticket: string, options?: any): AxiosPromise<void> {
            return LoginApiFp(configuration).checkCASTicketUsingGET(returnUrl, ticket, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 登录API
         * @param {string} returnUrl returnUrl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingGET(returnUrl: string, options?: any): AxiosPromise<void> {
            return LoginApiFp(configuration).loginUsingGET(returnUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 用户名密码登陆API
         * @param {string} authorization Authorization
         * @param {UserLogin} userInfo userInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingPOST(authorization: string, userInfo: UserLogin, options?: any): AxiosPromise<ResponseUserInfoWithToken> {
            return LoginApiFp(configuration).loginUsingPOST(authorization, userInfo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 退出登录API
         * @param {string} returnTo returnTo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUsingGET(returnTo: string, options?: any): AxiosPromise<void> {
            return LoginApiFp(configuration).logoutUsingGET(returnTo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 网页端自定义登陆API
         * @param {UserLogin} loginInfo loginInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLoginUsingPOST(loginInfo: UserLogin, options?: any): AxiosPromise<ResponseUserInfoWithToken> {
            return LoginApiFp(configuration).webLoginUsingPOST(loginInfo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * 
     * @summary 跳转企业用户信息页
     * @param {string} authorization Authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public accountInfoPageUsingGET(authorization: string, options?: any) {
        return LoginApiFp(this.configuration).accountInfoPageUsingGET(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 跳转用户信息页
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public accountUserInfoUsingGET(options?: any) {
        return LoginApiFp(this.configuration).accountUserInfoUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 校验ticket
     * @param {string} returnUrl returnUrl
     * @param {string} ticket ticket
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public checkCASTicketUsingGET(returnUrl: string, ticket: string, options?: any) {
        return LoginApiFp(this.configuration).checkCASTicketUsingGET(returnUrl, ticket, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 登录API
     * @param {string} returnUrl returnUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public loginUsingGET(returnUrl: string, options?: any) {
        return LoginApiFp(this.configuration).loginUsingGET(returnUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 用户名密码登陆API
     * @param {string} authorization Authorization
     * @param {UserLogin} userInfo userInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public loginUsingPOST(authorization: string, userInfo: UserLogin, options?: any) {
        return LoginApiFp(this.configuration).loginUsingPOST(authorization, userInfo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 退出登录API
     * @param {string} returnTo returnTo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public logoutUsingGET(returnTo: string, options?: any) {
        return LoginApiFp(this.configuration).logoutUsingGET(returnTo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 网页端自定义登陆API
     * @param {UserLogin} loginInfo loginInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public webLoginUsingPOST(loginInfo: UserLogin, options?: any) {
        return LoginApiFp(this.configuration).webLoginUsingPOST(loginInfo, options).then((request) => request(this.axios, this.basePath));
    }

}

// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EnterpriseAccountCreation } from '../model';
// @ts-ignore
import { EnterpriseAccountCreationV2 } from '../model';
// @ts-ignore
import { EnterpriseAccountQuery } from '../model';
// @ts-ignore
import { ResponseAccountVO } from '../model';
// @ts-ignore
import { ResponseEnterpriseAccount } from '../model';
// @ts-ignore
import { ResponseEnterpriseInfo } from '../model';
// @ts-ignore
import { ResponseListDepartment } from '../model';
// @ts-ignore
import { ResponseListMobileBindAccount } from '../model';
// @ts-ignore
import { ResponsePaginationEnterpriseMember } from '../model';
// @ts-ignore
import { ResponseUserInfo } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
// @ts-ignore
import { Responseboolean } from '../model';
// @ts-ignore
import { UserLogin } from '../model';
/**
 * EnterpriseApi - axios parameter creator
 * @export
 */
export const EnterpriseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 注册企业账号
         * @param {EnterpriseAccountCreation} enterpriseAccountCreation enterpriseAccountCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnterpriseAccountUsingPOST: async (enterpriseAccountCreation: EnterpriseAccountCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'enterpriseAccountCreation' is not null or undefined
            if (enterpriseAccountCreation === null || enterpriseAccountCreation === undefined) {
                throw new RequiredError('enterpriseAccountCreation','Required parameter enterpriseAccountCreation was null or undefined when calling createEnterpriseAccountUsingPOST.');
            }
            const localVarPath = `/enterprise`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof enterpriseAccountCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(enterpriseAccountCreation !== undefined ? enterpriseAccountCreation : {}) : (enterpriseAccountCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 注册企业账号
         * @param {EnterpriseAccountCreationV2} enterpriseAccountCreationV2 enterpriseAccountCreationV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnterpriseAccountV2UsingPOST: async (enterpriseAccountCreationV2: EnterpriseAccountCreationV2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'enterpriseAccountCreationV2' is not null or undefined
            if (enterpriseAccountCreationV2 === null || enterpriseAccountCreationV2 === undefined) {
                throw new RequiredError('enterpriseAccountCreationV2','Required parameter enterpriseAccountCreationV2 was null or undefined when calling createEnterpriseAccountV2UsingPOST.');
            }
            const localVarPath = `/v2/enterprise`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof enterpriseAccountCreationV2 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(enterpriseAccountCreationV2 !== undefined ? enterpriseAccountCreationV2 : {}) : (enterpriseAccountCreationV2 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据验证码查询手机号绑定的企业主账号列表
         * @param {string} mobile mobile
         * @param {string} verifyCode verifyCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountListUsingGET: async (mobile: string, verifyCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mobile' is not null or undefined
            if (mobile === null || mobile === undefined) {
                throw new RequiredError('mobile','Required parameter mobile was null or undefined when calling getAccountListUsingGET.');
            }
            // verify required parameter 'verifyCode' is not null or undefined
            if (verifyCode === null || verifyCode === undefined) {
                throw new RequiredError('verifyCode','Required parameter verifyCode was null or undefined when calling getAccountListUsingGET.');
            }
            const localVarPath = `/mobile/userinfo/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mobile !== undefined) {
                localVarQueryParameter.mobile = mobile;
            }

            if (verifyCode !== undefined) {
                localVarQueryParameter.verifyCode = verifyCode;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 发送短信验证码
         * @param {string} mobile mobile
         * @param {'query'} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCodeUsingGET: async (mobile: string, type: 'query', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mobile' is not null or undefined
            if (mobile === null || mobile === undefined) {
                throw new RequiredError('mobile','Required parameter mobile was null or undefined when calling getCodeUsingGET.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling getCodeUsingGET.');
            }
            const localVarPath = `/code`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mobile !== undefined) {
                localVarQueryParameter.mobile = mobile;
            }

            if (type !== undefined) {
                localVarQueryParameter.type = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询企业账号下的所有部门
         * @param {string} authorization Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseDepartmentUsingPOST: async (authorization: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getEnterpriseDepartmentUsingPOST.');
            }
            const localVarPath = `/enterprise/departments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter.Authorization = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据登陆用户查询自己的企业主账号信息
         * @param {string} authorization Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseInfoUsingGET: async (authorization: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getEnterpriseInfoUsingGET.');
            }
            const localVarPath = `/enterprise`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter.Authorization = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询企业账号下的子账号(带主账号)
         * @param {string} authorization Authorization
         * @param {EnterpriseAccountQuery} enterpriseAccountQuery enterpriseAccountQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseMemberAndEnterpriseUsingPOST: async (authorization: string, enterpriseAccountQuery: EnterpriseAccountQuery, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getEnterpriseMemberAndEnterpriseUsingPOST.');
            }
            // verify required parameter 'enterpriseAccountQuery' is not null or undefined
            if (enterpriseAccountQuery === null || enterpriseAccountQuery === undefined) {
                throw new RequiredError('enterpriseAccountQuery','Required parameter enterpriseAccountQuery was null or undefined when calling getEnterpriseMemberAndEnterpriseUsingPOST.');
            }
            const localVarPath = `/enterprise/member/withEnterprise`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter.Authorization = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof enterpriseAccountQuery !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(enterpriseAccountQuery !== undefined ? enterpriseAccountQuery : {}) : (enterpriseAccountQuery || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询企业账号下的子账号
         * @param {string} authorization Authorization
         * @param {EnterpriseAccountQuery} enterpriseAccountQuery enterpriseAccountQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseMemberUsingPOST: async (authorization: string, enterpriseAccountQuery: EnterpriseAccountQuery, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getEnterpriseMemberUsingPOST.');
            }
            // verify required parameter 'enterpriseAccountQuery' is not null or undefined
            if (enterpriseAccountQuery === null || enterpriseAccountQuery === undefined) {
                throw new RequiredError('enterpriseAccountQuery','Required parameter enterpriseAccountQuery was null or undefined when calling getEnterpriseMemberUsingPOST.');
            }
            const localVarPath = `/enterprise/member`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter.Authorization = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof enterpriseAccountQuery !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(enterpriseAccountQuery !== undefined ? enterpriseAccountQuery : {}) : (enterpriseAccountQuery || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询企业账号下的子账号(带密保手机)
         * @param {string} authorization Authorization
         * @param {EnterpriseAccountQuery} enterpriseAccountQuery enterpriseAccountQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseMemberWithMobileUsingPOST: async (authorization: string, enterpriseAccountQuery: EnterpriseAccountQuery, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getEnterpriseMemberWithMobileUsingPOST.');
            }
            // verify required parameter 'enterpriseAccountQuery' is not null or undefined
            if (enterpriseAccountQuery === null || enterpriseAccountQuery === undefined) {
                throw new RequiredError('enterpriseAccountQuery','Required parameter enterpriseAccountQuery was null or undefined when calling getEnterpriseMemberWithMobileUsingPOST.');
            }
            const localVarPath = `/enterprise/members/withmobile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter.Authorization = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof enterpriseAccountQuery !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(enterpriseAccountQuery !== undefined ? enterpriseAccountQuery : {}) : (enterpriseAccountQuery || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据账号密码查询账号信息
         * @param {UserLogin} userLogin userLogin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoUsingPOST: async (userLogin: UserLogin, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userLogin' is not null or undefined
            if (userLogin === null || userLogin === undefined) {
                throw new RequiredError('userLogin','Required parameter userLogin was null or undefined when calling getUserInfoUsingPOST.');
            }
            const localVarPath = `/enterprise/query`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userLogin !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userLogin !== undefined ? userLogin : {}) : (userLogin || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询账号是否重复
         * @param {string} userName userName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUserNameConflictUsingPOST: async (userName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userName' is not null or undefined
            if (userName === null || userName === undefined) {
                throw new RequiredError('userName','Required parameter userName was null or undefined when calling isUserNameConflictUsingPOST.');
            }
            const localVarPath = `/enterprise/checkAccount`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userName !== undefined) {
                localVarQueryParameter.userName = userName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 企业账号申请试用
         * @param {EnterpriseAccountCreation} enterpriseAccountCreation enterpriseAccountCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewEnterpriseAccountUsingPOST: async (enterpriseAccountCreation: EnterpriseAccountCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'enterpriseAccountCreation' is not null or undefined
            if (enterpriseAccountCreation === null || enterpriseAccountCreation === undefined) {
                throw new RequiredError('enterpriseAccountCreation','Required parameter enterpriseAccountCreation was null or undefined when calling reviewEnterpriseAccountUsingPOST.');
            }
            const localVarPath = `/enterprise/review`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof enterpriseAccountCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(enterpriseAccountCreation !== undefined ? enterpriseAccountCreation : {}) : (enterpriseAccountCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnterpriseApi - functional programming interface
 * @export
 */
export const EnterpriseApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 注册企业账号
         * @param {EnterpriseAccountCreation} enterpriseAccountCreation enterpriseAccountCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEnterpriseAccountUsingPOST(enterpriseAccountCreation: EnterpriseAccountCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseEnterpriseAccount>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).createEnterpriseAccountUsingPOST(enterpriseAccountCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 注册企业账号
         * @param {EnterpriseAccountCreationV2} enterpriseAccountCreationV2 enterpriseAccountCreationV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEnterpriseAccountV2UsingPOST(enterpriseAccountCreationV2: EnterpriseAccountCreationV2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseEnterpriseAccount>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).createEnterpriseAccountV2UsingPOST(enterpriseAccountCreationV2, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据验证码查询手机号绑定的企业主账号列表
         * @param {string} mobile mobile
         * @param {string} verifyCode verifyCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountListUsingGET(mobile: string, verifyCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListMobileBindAccount>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).getAccountListUsingGET(mobile, verifyCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 发送短信验证码
         * @param {string} mobile mobile
         * @param {'query'} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCodeUsingGET(mobile: string, type: 'query', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).getCodeUsingGET(mobile, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询企业账号下的所有部门
         * @param {string} authorization Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnterpriseDepartmentUsingPOST(authorization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDepartment>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).getEnterpriseDepartmentUsingPOST(authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据登陆用户查询自己的企业主账号信息
         * @param {string} authorization Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnterpriseInfoUsingGET(authorization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseEnterpriseInfo>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).getEnterpriseInfoUsingGET(authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询企业账号下的子账号(带主账号)
         * @param {string} authorization Authorization
         * @param {EnterpriseAccountQuery} enterpriseAccountQuery enterpriseAccountQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnterpriseMemberAndEnterpriseUsingPOST(authorization: string, enterpriseAccountQuery: EnterpriseAccountQuery, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsePaginationEnterpriseMember>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).getEnterpriseMemberAndEnterpriseUsingPOST(authorization, enterpriseAccountQuery, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询企业账号下的子账号
         * @param {string} authorization Authorization
         * @param {EnterpriseAccountQuery} enterpriseAccountQuery enterpriseAccountQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnterpriseMemberUsingPOST(authorization: string, enterpriseAccountQuery: EnterpriseAccountQuery, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsePaginationEnterpriseMember>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).getEnterpriseMemberUsingPOST(authorization, enterpriseAccountQuery, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询企业账号下的子账号(带密保手机)
         * @param {string} authorization Authorization
         * @param {EnterpriseAccountQuery} enterpriseAccountQuery enterpriseAccountQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnterpriseMemberWithMobileUsingPOST(authorization: string, enterpriseAccountQuery: EnterpriseAccountQuery, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsePaginationEnterpriseMember>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).getEnterpriseMemberWithMobileUsingPOST(authorization, enterpriseAccountQuery, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据账号密码查询账号信息
         * @param {UserLogin} userLogin userLogin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfoUsingPOST(userLogin: UserLogin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUserInfo>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).getUserInfoUsingPOST(userLogin, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询账号是否重复
         * @param {string} userName userName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isUserNameConflictUsingPOST(userName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseboolean>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).isUserNameConflictUsingPOST(userName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 企业账号申请试用
         * @param {EnterpriseAccountCreation} enterpriseAccountCreation enterpriseAccountCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reviewEnterpriseAccountUsingPOST(enterpriseAccountCreation: EnterpriseAccountCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAccountVO>> {
            const localVarAxiosArgs = await EnterpriseApiAxiosParamCreator(configuration).reviewEnterpriseAccountUsingPOST(enterpriseAccountCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EnterpriseApi - factory interface
 * @export
 */
export const EnterpriseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 注册企业账号
         * @param {EnterpriseAccountCreation} enterpriseAccountCreation enterpriseAccountCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnterpriseAccountUsingPOST(enterpriseAccountCreation: EnterpriseAccountCreation, options?: any): AxiosPromise<ResponseEnterpriseAccount> {
            return EnterpriseApiFp(configuration).createEnterpriseAccountUsingPOST(enterpriseAccountCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 注册企业账号
         * @param {EnterpriseAccountCreationV2} enterpriseAccountCreationV2 enterpriseAccountCreationV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnterpriseAccountV2UsingPOST(enterpriseAccountCreationV2: EnterpriseAccountCreationV2, options?: any): AxiosPromise<ResponseEnterpriseAccount> {
            return EnterpriseApiFp(configuration).createEnterpriseAccountV2UsingPOST(enterpriseAccountCreationV2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据验证码查询手机号绑定的企业主账号列表
         * @param {string} mobile mobile
         * @param {string} verifyCode verifyCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountListUsingGET(mobile: string, verifyCode: string, options?: any): AxiosPromise<ResponseListMobileBindAccount> {
            return EnterpriseApiFp(configuration).getAccountListUsingGET(mobile, verifyCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 发送短信验证码
         * @param {string} mobile mobile
         * @param {'query'} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCodeUsingGET(mobile: string, type: 'query', options?: any): AxiosPromise<ResponseVoid> {
            return EnterpriseApiFp(configuration).getCodeUsingGET(mobile, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询企业账号下的所有部门
         * @param {string} authorization Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseDepartmentUsingPOST(authorization: string, options?: any): AxiosPromise<ResponseListDepartment> {
            return EnterpriseApiFp(configuration).getEnterpriseDepartmentUsingPOST(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据登陆用户查询自己的企业主账号信息
         * @param {string} authorization Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseInfoUsingGET(authorization: string, options?: any): AxiosPromise<ResponseEnterpriseInfo> {
            return EnterpriseApiFp(configuration).getEnterpriseInfoUsingGET(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询企业账号下的子账号(带主账号)
         * @param {string} authorization Authorization
         * @param {EnterpriseAccountQuery} enterpriseAccountQuery enterpriseAccountQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseMemberAndEnterpriseUsingPOST(authorization: string, enterpriseAccountQuery: EnterpriseAccountQuery, options?: any): AxiosPromise<ResponsePaginationEnterpriseMember> {
            return EnterpriseApiFp(configuration).getEnterpriseMemberAndEnterpriseUsingPOST(authorization, enterpriseAccountQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询企业账号下的子账号
         * @param {string} authorization Authorization
         * @param {EnterpriseAccountQuery} enterpriseAccountQuery enterpriseAccountQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseMemberUsingPOST(authorization: string, enterpriseAccountQuery: EnterpriseAccountQuery, options?: any): AxiosPromise<ResponsePaginationEnterpriseMember> {
            return EnterpriseApiFp(configuration).getEnterpriseMemberUsingPOST(authorization, enterpriseAccountQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询企业账号下的子账号(带密保手机)
         * @param {string} authorization Authorization
         * @param {EnterpriseAccountQuery} enterpriseAccountQuery enterpriseAccountQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnterpriseMemberWithMobileUsingPOST(authorization: string, enterpriseAccountQuery: EnterpriseAccountQuery, options?: any): AxiosPromise<ResponsePaginationEnterpriseMember> {
            return EnterpriseApiFp(configuration).getEnterpriseMemberWithMobileUsingPOST(authorization, enterpriseAccountQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据账号密码查询账号信息
         * @param {UserLogin} userLogin userLogin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoUsingPOST(userLogin: UserLogin, options?: any): AxiosPromise<ResponseUserInfo> {
            return EnterpriseApiFp(configuration).getUserInfoUsingPOST(userLogin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询账号是否重复
         * @param {string} userName userName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUserNameConflictUsingPOST(userName: string, options?: any): AxiosPromise<Responseboolean> {
            return EnterpriseApiFp(configuration).isUserNameConflictUsingPOST(userName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 企业账号申请试用
         * @param {EnterpriseAccountCreation} enterpriseAccountCreation enterpriseAccountCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewEnterpriseAccountUsingPOST(enterpriseAccountCreation: EnterpriseAccountCreation, options?: any): AxiosPromise<ResponseAccountVO> {
            return EnterpriseApiFp(configuration).reviewEnterpriseAccountUsingPOST(enterpriseAccountCreation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnterpriseApi - object-oriented interface
 * @export
 * @class EnterpriseApi
 * @extends {BaseAPI}
 */
export class EnterpriseApi extends BaseAPI {
    /**
     * 
     * @summary 注册企业账号
     * @param {EnterpriseAccountCreation} enterpriseAccountCreation enterpriseAccountCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public createEnterpriseAccountUsingPOST(enterpriseAccountCreation: EnterpriseAccountCreation, options?: any) {
        return EnterpriseApiFp(this.configuration).createEnterpriseAccountUsingPOST(enterpriseAccountCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 注册企业账号
     * @param {EnterpriseAccountCreationV2} enterpriseAccountCreationV2 enterpriseAccountCreationV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public createEnterpriseAccountV2UsingPOST(enterpriseAccountCreationV2: EnterpriseAccountCreationV2, options?: any) {
        return EnterpriseApiFp(this.configuration).createEnterpriseAccountV2UsingPOST(enterpriseAccountCreationV2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据验证码查询手机号绑定的企业主账号列表
     * @param {string} mobile mobile
     * @param {string} verifyCode verifyCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getAccountListUsingGET(mobile: string, verifyCode: string, options?: any) {
        return EnterpriseApiFp(this.configuration).getAccountListUsingGET(mobile, verifyCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 发送短信验证码
     * @param {string} mobile mobile
     * @param {'query'} type type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getCodeUsingGET(mobile: string, type: 'query', options?: any) {
        return EnterpriseApiFp(this.configuration).getCodeUsingGET(mobile, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询企业账号下的所有部门
     * @param {string} authorization Authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getEnterpriseDepartmentUsingPOST(authorization: string, options?: any) {
        return EnterpriseApiFp(this.configuration).getEnterpriseDepartmentUsingPOST(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据登陆用户查询自己的企业主账号信息
     * @param {string} authorization Authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getEnterpriseInfoUsingGET(authorization: string, options?: any) {
        return EnterpriseApiFp(this.configuration).getEnterpriseInfoUsingGET(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询企业账号下的子账号(带主账号)
     * @param {string} authorization Authorization
     * @param {EnterpriseAccountQuery} enterpriseAccountQuery enterpriseAccountQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getEnterpriseMemberAndEnterpriseUsingPOST(authorization: string, enterpriseAccountQuery: EnterpriseAccountQuery, options?: any) {
        return EnterpriseApiFp(this.configuration).getEnterpriseMemberAndEnterpriseUsingPOST(authorization, enterpriseAccountQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询企业账号下的子账号
     * @param {string} authorization Authorization
     * @param {EnterpriseAccountQuery} enterpriseAccountQuery enterpriseAccountQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getEnterpriseMemberUsingPOST(authorization: string, enterpriseAccountQuery: EnterpriseAccountQuery, options?: any) {
        return EnterpriseApiFp(this.configuration).getEnterpriseMemberUsingPOST(authorization, enterpriseAccountQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询企业账号下的子账号(带密保手机)
     * @param {string} authorization Authorization
     * @param {EnterpriseAccountQuery} enterpriseAccountQuery enterpriseAccountQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getEnterpriseMemberWithMobileUsingPOST(authorization: string, enterpriseAccountQuery: EnterpriseAccountQuery, options?: any) {
        return EnterpriseApiFp(this.configuration).getEnterpriseMemberWithMobileUsingPOST(authorization, enterpriseAccountQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据账号密码查询账号信息
     * @param {UserLogin} userLogin userLogin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getUserInfoUsingPOST(userLogin: UserLogin, options?: any) {
        return EnterpriseApiFp(this.configuration).getUserInfoUsingPOST(userLogin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询账号是否重复
     * @param {string} userName userName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public isUserNameConflictUsingPOST(userName: string, options?: any) {
        return EnterpriseApiFp(this.configuration).isUserNameConflictUsingPOST(userName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 企业账号申请试用
     * @param {EnterpriseAccountCreation} enterpriseAccountCreation enterpriseAccountCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public reviewEnterpriseAccountUsingPOST(enterpriseAccountCreation: EnterpriseAccountCreation, options?: any) {
        return EnterpriseApiFp(this.configuration).reviewEnterpriseAccountUsingPOST(enterpriseAccountCreation, options).then((request) => request(this.axios, this.basePath));
    }

}

// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Condition } from '../model';
// @ts-ignore
import { Responsestring } from '../model';
/**
 * BimfaceControllerApi - axios parameter creator
 * @export
 */
export const BimfaceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getElementId
         * @param {string} fileId fileId
         * @param {Condition} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementIdUsingPOST: async (fileId: string, condition: Condition, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling getElementIdUsingPOST.');
            }
            // verify required parameter 'condition' is not null or undefined
            if (condition === null || condition === undefined) {
                throw new RequiredError('condition','Required parameter condition was null or undefined when calling getElementIdUsingPOST.');
            }
            const localVarPath = `/{fileId}/elementIds`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof condition !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(condition !== undefined ? condition : {}) : (condition || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getElementIds
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementIdsUsingGET: async (fileId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling getElementIdsUsingGET.');
            }
            const localVarPath = `/{fileId}/elementIds`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getFileDownloadUrl
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileDownloadUrlUsingGET: async (fileId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling getFileDownloadUrlUsingGET.');
            }
            const localVarPath = `/{fileId}/url`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getModelTree
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelTreeUsingGET: async (fileId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling getModelTreeUsingGET.');
            }
            const localVarPath = `/modelTree/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getViewToken
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewTokenUsingGET: async (fileId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling getViewTokenUsingGET.');
            }
            const localVarPath = `/view/token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileId !== undefined) {
                localVarQueryParameter.fileId = fileId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BimfaceControllerApi - functional programming interface
 * @export
 */
export const BimfaceControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getElementId
         * @param {string} fileId fileId
         * @param {Condition} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElementIdUsingPOST(fileId: string, condition: Condition, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await BimfaceControllerApiAxiosParamCreator(configuration).getElementIdUsingPOST(fileId, condition, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getElementIds
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElementIdsUsingGET(fileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await BimfaceControllerApiAxiosParamCreator(configuration).getElementIdsUsingGET(fileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getFileDownloadUrl
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileDownloadUrlUsingGET(fileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await BimfaceControllerApiAxiosParamCreator(configuration).getFileDownloadUrlUsingGET(fileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getModelTree
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModelTreeUsingGET(fileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await BimfaceControllerApiAxiosParamCreator(configuration).getModelTreeUsingGET(fileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getViewToken
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getViewTokenUsingGET(fileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responsestring>> {
            const localVarAxiosArgs = await BimfaceControllerApiAxiosParamCreator(configuration).getViewTokenUsingGET(fileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BimfaceControllerApi - factory interface
 * @export
 */
export const BimfaceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getElementId
         * @param {string} fileId fileId
         * @param {Condition} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementIdUsingPOST(fileId: string, condition: Condition, options?: any): AxiosPromise<Array<string>> {
            return BimfaceControllerApiFp(configuration).getElementIdUsingPOST(fileId, condition, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getElementIds
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementIdsUsingGET(fileId: string, options?: any): AxiosPromise<Array<string>> {
            return BimfaceControllerApiFp(configuration).getElementIdsUsingGET(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getFileDownloadUrl
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileDownloadUrlUsingGET(fileId: string, options?: any): AxiosPromise<string> {
            return BimfaceControllerApiFp(configuration).getFileDownloadUrlUsingGET(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getModelTree
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelTreeUsingGET(fileId: string, options?: any): AxiosPromise<object> {
            return BimfaceControllerApiFp(configuration).getModelTreeUsingGET(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getViewToken
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewTokenUsingGET(fileId: string, options?: any): AxiosPromise<Responsestring> {
            return BimfaceControllerApiFp(configuration).getViewTokenUsingGET(fileId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BimfaceControllerApi - object-oriented interface
 * @export
 * @class BimfaceControllerApi
 * @extends {BaseAPI}
 */
export class BimfaceControllerApi extends BaseAPI {
    /**
     * 
     * @summary getElementId
     * @param {string} fileId fileId
     * @param {Condition} condition condition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BimfaceControllerApi
     */
    public getElementIdUsingPOST(fileId: string, condition: Condition, options?: any) {
        return BimfaceControllerApiFp(this.configuration).getElementIdUsingPOST(fileId, condition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getElementIds
     * @param {string} fileId fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BimfaceControllerApi
     */
    public getElementIdsUsingGET(fileId: string, options?: any) {
        return BimfaceControllerApiFp(this.configuration).getElementIdsUsingGET(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getFileDownloadUrl
     * @param {string} fileId fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BimfaceControllerApi
     */
    public getFileDownloadUrlUsingGET(fileId: string, options?: any) {
        return BimfaceControllerApiFp(this.configuration).getFileDownloadUrlUsingGET(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getModelTree
     * @param {string} fileId fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BimfaceControllerApi
     */
    public getModelTreeUsingGET(fileId: string, options?: any) {
        return BimfaceControllerApiFp(this.configuration).getModelTreeUsingGET(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getViewToken
     * @param {string} fileId fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BimfaceControllerApi
     */
    public getViewTokenUsingGET(fileId: string, options?: any) {
        return BimfaceControllerApiFp(this.configuration).getViewTokenUsingGET(fileId, options).then((request) => request(this.axios, this.basePath));
    }

}

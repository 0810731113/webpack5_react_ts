// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BimfaceUploadBody } from '../model';
// @ts-ignore
import { BimfaceUploadResult } from '../model';
/**
 * TranslateControllerApi - axios parameter creator
 * @export
 */
export const TranslateControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addJobByDataSetId
         * @param {BimfaceUploadBody} payload payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addJobByDataSetIdUsingPOST: async (payload: BimfaceUploadBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload','Required parameter payload was null or undefined when calling addJobByDataSetIdUsingPOST.');
            }
            const localVarPath = `/v1/bimface/upload/bydatasetid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof payload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(payload !== undefined ? payload : {}) : (payload || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary addJob
         * @param {BimfaceUploadBody} payload payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addJobUsingPOST: async (payload: BimfaceUploadBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload','Required parameter payload was null or undefined when calling addJobUsingPOST.');
            }
            const localVarPath = `/v1/upload`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof payload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(payload !== undefined ? payload : {}) : (payload || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary queryJob
         * @param {number} uploadId uploadId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryJobUsingGET: async (uploadId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadId' is not null or undefined
            if (uploadId === null || uploadId === undefined) {
                throw new RequiredError('uploadId','Required parameter uploadId was null or undefined when calling queryJobUsingGET.');
            }
            const localVarPath = `/v1/upload/{uploadId}`
                .replace(`{${"uploadId"}}`, encodeURIComponent(String(uploadId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter.Authorization = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TranslateControllerApi - functional programming interface
 * @export
 */
export const TranslateControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addJobByDataSetId
         * @param {BimfaceUploadBody} payload payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addJobByDataSetIdUsingPOST(payload: BimfaceUploadBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BimfaceUploadResult>> {
            const localVarAxiosArgs = await TranslateControllerApiAxiosParamCreator(configuration).addJobByDataSetIdUsingPOST(payload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary addJob
         * @param {BimfaceUploadBody} payload payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addJobUsingPOST(payload: BimfaceUploadBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BimfaceUploadResult>> {
            const localVarAxiosArgs = await TranslateControllerApiAxiosParamCreator(configuration).addJobUsingPOST(payload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary queryJob
         * @param {number} uploadId uploadId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryJobUsingGET(uploadId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BimfaceUploadResult>> {
            const localVarAxiosArgs = await TranslateControllerApiAxiosParamCreator(configuration).queryJobUsingGET(uploadId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TranslateControllerApi - factory interface
 * @export
 */
export const TranslateControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addJobByDataSetId
         * @param {BimfaceUploadBody} payload payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addJobByDataSetIdUsingPOST(payload: BimfaceUploadBody, options?: any): AxiosPromise<BimfaceUploadResult> {
            return TranslateControllerApiFp(configuration).addJobByDataSetIdUsingPOST(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary addJob
         * @param {BimfaceUploadBody} payload payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addJobUsingPOST(payload: BimfaceUploadBody, options?: any): AxiosPromise<BimfaceUploadResult> {
            return TranslateControllerApiFp(configuration).addJobUsingPOST(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary queryJob
         * @param {number} uploadId uploadId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryJobUsingGET(uploadId: number, options?: any): AxiosPromise<BimfaceUploadResult> {
            return TranslateControllerApiFp(configuration).queryJobUsingGET(uploadId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TranslateControllerApi - object-oriented interface
 * @export
 * @class TranslateControllerApi
 * @extends {BaseAPI}
 */
export class TranslateControllerApi extends BaseAPI {
    /**
     * 
     * @summary addJobByDataSetId
     * @param {BimfaceUploadBody} payload payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslateControllerApi
     */
    public addJobByDataSetIdUsingPOST(payload: BimfaceUploadBody, options?: any) {
        return TranslateControllerApiFp(this.configuration).addJobByDataSetIdUsingPOST(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary addJob
     * @param {BimfaceUploadBody} payload payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslateControllerApi
     */
    public addJobUsingPOST(payload: BimfaceUploadBody, options?: any) {
        return TranslateControllerApiFp(this.configuration).addJobUsingPOST(payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary queryJob
     * @param {number} uploadId uploadId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslateControllerApi
     */
    public queryJobUsingGET(uploadId: number, options?: any) {
        return TranslateControllerApiFp(this.configuration).queryJobUsingGET(uploadId, options).then((request) => request(this.axios, this.basePath));
    }

}

// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DataSetIntegrateRequest } from '../model';
/**
 * IntegrateControllerApi - axios parameter creator
 * @export
 */
export const IntegrateControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary integrate
         * @param {DataSetIntegrateRequest} dataSetIntegrateRequest dataSetIntegrateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrateUsingPOST: async (dataSetIntegrateRequest: DataSetIntegrateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetIntegrateRequest' is not null or undefined
            if (dataSetIntegrateRequest === null || dataSetIntegrateRequest === undefined) {
                throw new RequiredError('dataSetIntegrateRequest','Required parameter dataSetIntegrateRequest was null or undefined when calling integrateUsingPOST.');
            }
            const localVarPath = `/integrate`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dataSetIntegrateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dataSetIntegrateRequest !== undefined ? dataSetIntegrateRequest : {}) : (dataSetIntegrateRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IntegrateControllerApi - functional programming interface
 * @export
 */
export const IntegrateControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary integrate
         * @param {DataSetIntegrateRequest} dataSetIntegrateRequest dataSetIntegrateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async integrateUsingPOST(dataSetIntegrateRequest: DataSetIntegrateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await IntegrateControllerApiAxiosParamCreator(configuration).integrateUsingPOST(dataSetIntegrateRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IntegrateControllerApi - factory interface
 * @export
 */
export const IntegrateControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary integrate
         * @param {DataSetIntegrateRequest} dataSetIntegrateRequest dataSetIntegrateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrateUsingPOST(dataSetIntegrateRequest: DataSetIntegrateRequest, options?: any): AxiosPromise<number> {
            return IntegrateControllerApiFp(configuration).integrateUsingPOST(dataSetIntegrateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IntegrateControllerApi - object-oriented interface
 * @export
 * @class IntegrateControllerApi
 * @extends {BaseAPI}
 */
export class IntegrateControllerApi extends BaseAPI {
    /**
     * 
     * @summary integrate
     * @param {DataSetIntegrateRequest} dataSetIntegrateRequest dataSetIntegrateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrateControllerApi
     */
    public integrateUsingPOST(dataSetIntegrateRequest: DataSetIntegrateRequest, options?: any) {
        return IntegrateControllerApiFp(this.configuration).integrateUsingPOST(dataSetIntegrateRequest, options).then((request) => request(this.axios, this.basePath));
    }

}

// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * CallbackControllerApi - axios parameter creator
 * @export
 */
export const CallbackControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary integrateCallback
         * @param {number} integrateId integrateId
         * @param {string} nonce nonce
         * @param {string} reason reason
         * @param {string} signature signature
         * @param {string} status status
         * @param {number} versionId versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrateCallbackUsingGET: async (integrateId: number, nonce: string, reason: string, signature: string, status: string, versionId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrateId' is not null or undefined
            if (integrateId === null || integrateId === undefined) {
                throw new RequiredError('integrateId','Required parameter integrateId was null or undefined when calling integrateCallbackUsingGET.');
            }
            // verify required parameter 'nonce' is not null or undefined
            if (nonce === null || nonce === undefined) {
                throw new RequiredError('nonce','Required parameter nonce was null or undefined when calling integrateCallbackUsingGET.');
            }
            // verify required parameter 'reason' is not null or undefined
            if (reason === null || reason === undefined) {
                throw new RequiredError('reason','Required parameter reason was null or undefined when calling integrateCallbackUsingGET.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling integrateCallbackUsingGET.');
            }
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new RequiredError('status','Required parameter status was null or undefined when calling integrateCallbackUsingGET.');
            }
            // verify required parameter 'versionId' is not null or undefined
            if (versionId === null || versionId === undefined) {
                throw new RequiredError('versionId','Required parameter versionId was null or undefined when calling integrateCallbackUsingGET.');
            }
            const localVarPath = `/callback/{versionId}/integrate`
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (integrateId !== undefined) {
                localVarQueryParameter.integrateId = integrateId;
            }

            if (nonce !== undefined) {
                localVarQueryParameter.nonce = nonce;
            }

            if (reason !== undefined) {
                localVarQueryParameter.reason = reason;
            }

            if (signature !== undefined) {
                localVarQueryParameter.signature = signature;
            }

            if (status !== undefined) {
                localVarQueryParameter.status = status;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary packageCallback
         * @param {number} fileId fileId
         * @param {number} integrateVersionId integrateVersionId
         * @param {string} nonce nonce
         * @param {string} reason reason
         * @param {string} signature signature
         * @param {string} status status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageCallbackUsingGET: async (fileId: number, integrateVersionId: number, nonce: string, reason: string, signature: string, status: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling packageCallbackUsingGET.');
            }
            // verify required parameter 'integrateVersionId' is not null or undefined
            if (integrateVersionId === null || integrateVersionId === undefined) {
                throw new RequiredError('integrateVersionId','Required parameter integrateVersionId was null or undefined when calling packageCallbackUsingGET.');
            }
            // verify required parameter 'nonce' is not null or undefined
            if (nonce === null || nonce === undefined) {
                throw new RequiredError('nonce','Required parameter nonce was null or undefined when calling packageCallbackUsingGET.');
            }
            // verify required parameter 'reason' is not null or undefined
            if (reason === null || reason === undefined) {
                throw new RequiredError('reason','Required parameter reason was null or undefined when calling packageCallbackUsingGET.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling packageCallbackUsingGET.');
            }
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new RequiredError('status','Required parameter status was null or undefined when calling packageCallbackUsingGET.');
            }
            const localVarPath = `/callback/{integrateVersionId}/package`
                .replace(`{${"integrateVersionId"}}`, encodeURIComponent(String(integrateVersionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileId !== undefined) {
                localVarQueryParameter.fileId = fileId;
            }

            if (nonce !== undefined) {
                localVarQueryParameter.nonce = nonce;
            }

            if (reason !== undefined) {
                localVarQueryParameter.reason = reason;
            }

            if (signature !== undefined) {
                localVarQueryParameter.signature = signature;
            }

            if (status !== undefined) {
                localVarQueryParameter.status = status;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary translateCallback
         * @param {number} fileId fileId
         * @param {string} nonce nonce
         * @param {string} reason reason
         * @param {string} signature signature
         * @param {string} status status
         * @param {number} versionId versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translateCallbackUsingGET: async (fileId: number, nonce: string, reason: string, signature: string, status: string, versionId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling translateCallbackUsingGET.');
            }
            // verify required parameter 'nonce' is not null or undefined
            if (nonce === null || nonce === undefined) {
                throw new RequiredError('nonce','Required parameter nonce was null or undefined when calling translateCallbackUsingGET.');
            }
            // verify required parameter 'reason' is not null or undefined
            if (reason === null || reason === undefined) {
                throw new RequiredError('reason','Required parameter reason was null or undefined when calling translateCallbackUsingGET.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling translateCallbackUsingGET.');
            }
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new RequiredError('status','Required parameter status was null or undefined when calling translateCallbackUsingGET.');
            }
            // verify required parameter 'versionId' is not null or undefined
            if (versionId === null || versionId === undefined) {
                throw new RequiredError('versionId','Required parameter versionId was null or undefined when calling translateCallbackUsingGET.');
            }
            const localVarPath = `/callback/{versionId}/translate`
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileId !== undefined) {
                localVarQueryParameter.fileId = fileId;
            }

            if (nonce !== undefined) {
                localVarQueryParameter.nonce = nonce;
            }

            if (reason !== undefined) {
                localVarQueryParameter.reason = reason;
            }

            if (signature !== undefined) {
                localVarQueryParameter.signature = signature;
            }

            if (status !== undefined) {
                localVarQueryParameter.status = status;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CallbackControllerApi - functional programming interface
 * @export
 */
export const CallbackControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary integrateCallback
         * @param {number} integrateId integrateId
         * @param {string} nonce nonce
         * @param {string} reason reason
         * @param {string} signature signature
         * @param {string} status status
         * @param {number} versionId versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async integrateCallbackUsingGET(integrateId: number, nonce: string, reason: string, signature: string, status: string, versionId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CallbackControllerApiAxiosParamCreator(configuration).integrateCallbackUsingGET(integrateId, nonce, reason, signature, status, versionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary packageCallback
         * @param {number} fileId fileId
         * @param {number} integrateVersionId integrateVersionId
         * @param {string} nonce nonce
         * @param {string} reason reason
         * @param {string} signature signature
         * @param {string} status status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packageCallbackUsingGET(fileId: number, integrateVersionId: number, nonce: string, reason: string, signature: string, status: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CallbackControllerApiAxiosParamCreator(configuration).packageCallbackUsingGET(fileId, integrateVersionId, nonce, reason, signature, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary translateCallback
         * @param {number} fileId fileId
         * @param {string} nonce nonce
         * @param {string} reason reason
         * @param {string} signature signature
         * @param {string} status status
         * @param {number} versionId versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async translateCallbackUsingGET(fileId: number, nonce: string, reason: string, signature: string, status: string, versionId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await CallbackControllerApiAxiosParamCreator(configuration).translateCallbackUsingGET(fileId, nonce, reason, signature, status, versionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CallbackControllerApi - factory interface
 * @export
 */
export const CallbackControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary integrateCallback
         * @param {number} integrateId integrateId
         * @param {string} nonce nonce
         * @param {string} reason reason
         * @param {string} signature signature
         * @param {string} status status
         * @param {number} versionId versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrateCallbackUsingGET(integrateId: number, nonce: string, reason: string, signature: string, status: string, versionId: number, options?: any): AxiosPromise<void> {
            return CallbackControllerApiFp(configuration).integrateCallbackUsingGET(integrateId, nonce, reason, signature, status, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary packageCallback
         * @param {number} fileId fileId
         * @param {number} integrateVersionId integrateVersionId
         * @param {string} nonce nonce
         * @param {string} reason reason
         * @param {string} signature signature
         * @param {string} status status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageCallbackUsingGET(fileId: number, integrateVersionId: number, nonce: string, reason: string, signature: string, status: string, options?: any): AxiosPromise<void> {
            return CallbackControllerApiFp(configuration).packageCallbackUsingGET(fileId, integrateVersionId, nonce, reason, signature, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary translateCallback
         * @param {number} fileId fileId
         * @param {string} nonce nonce
         * @param {string} reason reason
         * @param {string} signature signature
         * @param {string} status status
         * @param {number} versionId versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translateCallbackUsingGET(fileId: number, nonce: string, reason: string, signature: string, status: string, versionId: number, options?: any): AxiosPromise<void> {
            return CallbackControllerApiFp(configuration).translateCallbackUsingGET(fileId, nonce, reason, signature, status, versionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CallbackControllerApi - object-oriented interface
 * @export
 * @class CallbackControllerApi
 * @extends {BaseAPI}
 */
export class CallbackControllerApi extends BaseAPI {
    /**
     * 
     * @summary integrateCallback
     * @param {number} integrateId integrateId
     * @param {string} nonce nonce
     * @param {string} reason reason
     * @param {string} signature signature
     * @param {string} status status
     * @param {number} versionId versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallbackControllerApi
     */
    public integrateCallbackUsingGET(integrateId: number, nonce: string, reason: string, signature: string, status: string, versionId: number, options?: any) {
        return CallbackControllerApiFp(this.configuration).integrateCallbackUsingGET(integrateId, nonce, reason, signature, status, versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary packageCallback
     * @param {number} fileId fileId
     * @param {number} integrateVersionId integrateVersionId
     * @param {string} nonce nonce
     * @param {string} reason reason
     * @param {string} signature signature
     * @param {string} status status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallbackControllerApi
     */
    public packageCallbackUsingGET(fileId: number, integrateVersionId: number, nonce: string, reason: string, signature: string, status: string, options?: any) {
        return CallbackControllerApiFp(this.configuration).packageCallbackUsingGET(fileId, integrateVersionId, nonce, reason, signature, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary translateCallback
     * @param {number} fileId fileId
     * @param {string} nonce nonce
     * @param {string} reason reason
     * @param {string} signature signature
     * @param {string} status status
     * @param {number} versionId versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallbackControllerApi
     */
    public translateCallbackUsingGET(fileId: number, nonce: string, reason: string, signature: string, status: string, versionId: number, options?: any) {
        return CallbackControllerApiFp(this.configuration).translateCallbackUsingGET(fileId, nonce, reason, signature, status, versionId, options).then((request) => request(this.axios, this.basePath));
    }

}

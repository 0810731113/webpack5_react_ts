// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResponseListResourcePermission } from '../model';
// @ts-ignore
import { ResponseListUserRoles } from '../model';
// @ts-ignore
import { ResponseListstring } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
// @ts-ignore
import { UserRoleCreation } from '../model';
/**
 * AuthorizationApi - axios parameter creator
 * @export
 */
export const AuthorizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 赋予角色
         * @param {string} projectId projectId
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignUserRoleUsingPOST: async (projectId: string, roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling assignUserRoleUsingPOST.');
            }
            // verify required parameter 'roleType' is not null or undefined
            if (roleType === null || roleType === undefined) {
                throw new RequiredError('roleType','Required parameter roleType was null or undefined when calling assignUserRoleUsingPOST.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling assignUserRoleUsingPOST.');
            }
            const localVarPath = `/project/{projectId}/user/{userId}/role`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleType !== undefined) {
                localVarQueryParameter['roleType'] = roleType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量赋予项目下成员某一角色
         * @param {string} projectId projectId
         * @param {UserRoleCreation} userRoleCreation userRoleCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignUserRolesInProjectUsingPOST: async (projectId: string, userRoleCreation: UserRoleCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling assignUserRolesInProjectUsingPOST.');
            }
            // verify required parameter 'userRoleCreation' is not null or undefined
            if (userRoleCreation === null || userRoleCreation === undefined) {
                throw new RequiredError('userRoleCreation','Required parameter userRoleCreation was null or undefined when calling assignUserRolesInProjectUsingPOST.');
            }
            const localVarPath = `/projects/{projectId}/users/role`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userRoleCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userRoleCreation !== undefined ? userRoleCreation : {}) : (userRoleCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量赋予角色
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {Array<string>} roleTypes roleTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignUserRolesUsingPOST: async (projectId: string, userId: string, roleTypes: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling assignUserRolesUsingPOST.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling assignUserRolesUsingPOST.');
            }
            // verify required parameter 'roleTypes' is not null or undefined
            if (roleTypes === null || roleTypes === undefined) {
                throw new RequiredError('roleTypes','Required parameter roleTypes was null or undefined when calling assignUserRolesUsingPOST.');
            }
            const localVarPath = `/project/{projectId}/user/{userId}/roles`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof roleTypes !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(roleTypes !== undefined ? roleTypes : {}) : (roleTypes || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 赋予系统角色
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignUserSystemRoleUsingPOST: async (roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleType' is not null or undefined
            if (roleType === null || roleType === undefined) {
                throw new RequiredError('roleType','Required parameter roleType was null or undefined when calling assignUserSystemRoleUsingPOST.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling assignUserSystemRoleUsingPOST.');
            }
            const localVarPath = `/user/{userId}/systemRole`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleType !== undefined) {
                localVarQueryParameter['roleType'] = roleType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量赋予系统角色
         * @param {string} userId userId
         * @param {Array<string>} roleTypes roleTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignUserSystemRolesUsingPOST: async (userId: string, roleTypes: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling assignUserSystemRolesUsingPOST.');
            }
            // verify required parameter 'roleTypes' is not null or undefined
            if (roleTypes === null || roleTypes === undefined) {
                throw new RequiredError('roleTypes','Required parameter roleTypes was null or undefined when calling assignUserSystemRolesUsingPOST.');
            }
            const localVarPath = `/user/{userId}/systemRoles`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof roleTypes !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(roleTypes !== undefined ? roleTypes : {}) : (roleTypes || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建资源与权限的关系表
         * @param {'Read' | 'Write' | 'SoftWrite'} permissionType permissionType
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceType resourceType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPermissionResourceUsingPOST: async (permissionType: 'Read' | 'Write' | 'SoftWrite', resourceType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'permissionType' is not null or undefined
            if (permissionType === null || permissionType === undefined) {
                throw new RequiredError('permissionType','Required parameter permissionType was null or undefined when calling createPermissionResourceUsingPOST.');
            }
            // verify required parameter 'resourceType' is not null or undefined
            if (resourceType === null || resourceType === undefined) {
                throw new RequiredError('resourceType','Required parameter resourceType was null or undefined when calling createPermissionResourceUsingPOST.');
            }
            const localVarPath = `/resource/{resourceType}/permission/{permissionType}`
                .replace(`{${"permissionType"}}`, encodeURIComponent(String(permissionType)))
                .replace(`{${"resourceType"}}`, encodeURIComponent(String(resourceType)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建资源类型
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceSubType resourceSubType
         * @param {'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK'} resourceType resourceType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceUsingPOST: async (resourceSubType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', resourceType: 'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceSubType' is not null or undefined
            if (resourceSubType === null || resourceSubType === undefined) {
                throw new RequiredError('resourceSubType','Required parameter resourceSubType was null or undefined when calling createResourceUsingPOST.');
            }
            // verify required parameter 'resourceType' is not null or undefined
            if (resourceType === null || resourceType === undefined) {
                throw new RequiredError('resourceType','Required parameter resourceType was null or undefined when calling createResourceUsingPOST.');
            }
            const localVarPath = `/resource`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (resourceSubType !== undefined) {
                localVarQueryParameter['resourceSubType'] = resourceSubType;
            }

            if (resourceType !== undefined) {
                localVarQueryParameter['resourceType'] = resourceType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建角色与资源权限的关系表
         * @param {'Read' | 'Write' | 'SoftWrite'} permissionType permissionType
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceType resourceType
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRolePermissionResourceUsingPOST: async (permissionType: 'Read' | 'Write' | 'SoftWrite', resourceType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'permissionType' is not null or undefined
            if (permissionType === null || permissionType === undefined) {
                throw new RequiredError('permissionType','Required parameter permissionType was null or undefined when calling createRolePermissionResourceUsingPOST.');
            }
            // verify required parameter 'resourceType' is not null or undefined
            if (resourceType === null || resourceType === undefined) {
                throw new RequiredError('resourceType','Required parameter resourceType was null or undefined when calling createRolePermissionResourceUsingPOST.');
            }
            // verify required parameter 'roleType' is not null or undefined
            if (roleType === null || roleType === undefined) {
                throw new RequiredError('roleType','Required parameter roleType was null or undefined when calling createRolePermissionResourceUsingPOST.');
            }
            const localVarPath = `/role/{roleType}/permission/{permissionType}/resource/{resourceType}`
                .replace(`{${"permissionType"}}`, encodeURIComponent(String(permissionType)))
                .replace(`{${"resourceType"}}`, encodeURIComponent(String(resourceType)))
                .replace(`{${"roleType"}}`, encodeURIComponent(String(roleType)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建角色
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoleUsingPOST: async (roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleType' is not null or undefined
            if (roleType === null || roleType === undefined) {
                throw new RequiredError('roleType','Required parameter roleType was null or undefined when calling createRoleUsingPOST.');
            }
            const localVarPath = `/role`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleType !== undefined) {
                localVarQueryParameter['roleType'] = roleType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除角色与资源权限的关系表
         * @param {'Read' | 'Write' | 'SoftWrite'} permissionType permissionType
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceType resourceType
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRolePermissionResourceUsingDELETE: async (permissionType: 'Read' | 'Write' | 'SoftWrite', resourceType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'permissionType' is not null or undefined
            if (permissionType === null || permissionType === undefined) {
                throw new RequiredError('permissionType','Required parameter permissionType was null or undefined when calling deleteRolePermissionResourceUsingDELETE.');
            }
            // verify required parameter 'resourceType' is not null or undefined
            if (resourceType === null || resourceType === undefined) {
                throw new RequiredError('resourceType','Required parameter resourceType was null or undefined when calling deleteRolePermissionResourceUsingDELETE.');
            }
            // verify required parameter 'roleType' is not null or undefined
            if (roleType === null || roleType === undefined) {
                throw new RequiredError('roleType','Required parameter roleType was null or undefined when calling deleteRolePermissionResourceUsingDELETE.');
            }
            const localVarPath = `/role/{roleType}/permission/{permissionType}/resource/{resourceType}`
                .replace(`{${"permissionType"}}`, encodeURIComponent(String(permissionType)))
                .replace(`{${"resourceType"}}`, encodeURIComponent(String(resourceType)))
                .replace(`{${"roleType"}}`, encodeURIComponent(String(roleType)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 移除角色
         * @param {string} projectId projectId
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRoleUsingDELETE: async (projectId: string, roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling deleteUserRoleUsingDELETE.');
            }
            // verify required parameter 'roleType' is not null or undefined
            if (roleType === null || roleType === undefined) {
                throw new RequiredError('roleType','Required parameter roleType was null or undefined when calling deleteUserRoleUsingDELETE.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteUserRoleUsingDELETE.');
            }
            const localVarPath = `/project/{projectId}/user/{userId}/role`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleType !== undefined) {
                localVarQueryParameter['roleType'] = roleType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 移除用户在某个项目下的所有角色
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRolesInProjectUsingDELETE: async (projectId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling deleteUserRolesInProjectUsingDELETE.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteUserRolesInProjectUsingDELETE.');
            }
            const localVarPath = `/projects/{projectId}/users/{userId}/roles`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查项目下所有的角色的成员
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoleUsersInProjectUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getAllRoleUsersInProjectUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/users/roles`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查项目下指定角色的所有成员
         * @param {string} projectId projectId
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserIdsByRoleInProjectUsingGET: async (projectId: string, roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getAllUserIdsByRoleInProjectUsingGET.');
            }
            // verify required parameter 'roleType' is not null or undefined
            if (roleType === null || roleType === undefined) {
                throw new RequiredError('roleType','Required parameter roleType was null or undefined when calling getAllUserIdsByRoleInProjectUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/role/{roleType}/users`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"roleType"}}`, encodeURIComponent(String(roleType)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 通过角色类型查询权限
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceSubType resourceSubType
         * @param {'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK'} resourceType resourceType
         * @param {Array<string>} roleTypes roleTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionTypeByRoleUsingPOST: async (resourceSubType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', resourceType: 'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK', roleTypes: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceSubType' is not null or undefined
            if (resourceSubType === null || resourceSubType === undefined) {
                throw new RequiredError('resourceSubType','Required parameter resourceSubType was null or undefined when calling getPermissionTypeByRoleUsingPOST.');
            }
            // verify required parameter 'resourceType' is not null or undefined
            if (resourceType === null || resourceType === undefined) {
                throw new RequiredError('resourceType','Required parameter resourceType was null or undefined when calling getPermissionTypeByRoleUsingPOST.');
            }
            // verify required parameter 'roleTypes' is not null or undefined
            if (roleTypes === null || roleTypes === undefined) {
                throw new RequiredError('roleTypes','Required parameter roleTypes was null or undefined when calling getPermissionTypeByRoleUsingPOST.');
            }
            const localVarPath = `/grant/byrole`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (resourceSubType !== undefined) {
                localVarQueryParameter['resourceSubType'] = resourceSubType;
            }

            if (resourceType !== undefined) {
                localVarQueryParameter['resourceType'] = resourceType;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof roleTypes !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(roleTypes !== undefined ? roleTypes : {}) : (roleTypes || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 通过用户和项目信息查询权限
         * @param {string} projectId projectId
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceSubType resourceSubType
         * @param {'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK'} resourceType resourceType
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionTypeUsingGET: async (projectId: string, resourceSubType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', resourceType: 'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK', userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getPermissionTypeUsingGET.');
            }
            // verify required parameter 'resourceSubType' is not null or undefined
            if (resourceSubType === null || resourceSubType === undefined) {
                throw new RequiredError('resourceSubType','Required parameter resourceSubType was null or undefined when calling getPermissionTypeUsingGET.');
            }
            // verify required parameter 'resourceType' is not null or undefined
            if (resourceType === null || resourceType === undefined) {
                throw new RequiredError('resourceType','Required parameter resourceType was null or undefined when calling getPermissionTypeUsingGET.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getPermissionTypeUsingGET.');
            }
            const localVarPath = `/grant`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (resourceSubType !== undefined) {
                localVarQueryParameter['resourceSubType'] = resourceSubType;
            }

            if (resourceType !== undefined) {
                localVarQueryParameter['resourceType'] = resourceType;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询角色与资源的权限关系
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourcePermissionByRoleUsingGET: async (roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleType' is not null or undefined
            if (roleType === null || roleType === undefined) {
                throw new RequiredError('roleType','Required parameter roleType was null or undefined when calling getResourcePermissionByRoleUsingGET.');
            }
            const localVarPath = `/role/{roleType}/resources/permission`
                .replace(`{${"roleType"}}`, encodeURIComponent(String(roleType)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询用户在某个项目下与资源的权限关系
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourcePermissionInProjectUsingGET: async (projectId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getResourcePermissionInProjectUsingGET.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getResourcePermissionInProjectUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/users/{userId}/permission`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询用户的系统资源权限
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemResourcePermissionUsingGET: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getSystemResourcePermissionUsingGET.');
            }
            const localVarPath = `/users/{userId}/systemPermission`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询用户在项目中的所有角色(包括隐藏角色)
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAllRolesInProjectUsingGET: async (projectId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getUserAllRolesInProjectUsingGET.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserAllRolesInProjectUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/users/{userId}/roles/all`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询用户在项目中的角色
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRolesInProjectUsingGET: async (projectId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getUserRolesInProjectUsingGET.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserRolesInProjectUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/users/{userId}/roles`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询指定用户的所有角色
         * @param {string} xGdcUserId x-gdc-userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRolesUsingGET: async (xGdcUserId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserId' is not null or undefined
            if (xGdcUserId === null || xGdcUserId === undefined) {
                throw new RequiredError('xGdcUserId','Required parameter xGdcUserId was null or undefined when calling getUserRolesUsingGET.');
            }
            const localVarPath = `/users/roles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserId !== undefined && xGdcUserId !== null) {
                localVarHeaderParameter['x-gdc-userId'] = String(xGdcUserId);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询系统角色
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSystemRolesUsingGET: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserSystemRolesUsingGET.');
            }
            const localVarPath = `/user/{userId}/systemRoles`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorizationApi - functional programming interface
 * @export
 */
export const AuthorizationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 赋予角色
         * @param {string} projectId projectId
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignUserRoleUsingPOST(projectId: string, roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).assignUserRoleUsingPOST(projectId, roleType, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量赋予项目下成员某一角色
         * @param {string} projectId projectId
         * @param {UserRoleCreation} userRoleCreation userRoleCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignUserRolesInProjectUsingPOST(projectId: string, userRoleCreation: UserRoleCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListUserRoles>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).assignUserRolesInProjectUsingPOST(projectId, userRoleCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量赋予角色
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {Array<string>} roleTypes roleTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignUserRolesUsingPOST(projectId: string, userId: string, roleTypes: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).assignUserRolesUsingPOST(projectId, userId, roleTypes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 赋予系统角色
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignUserSystemRoleUsingPOST(roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).assignUserSystemRoleUsingPOST(roleType, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量赋予系统角色
         * @param {string} userId userId
         * @param {Array<string>} roleTypes roleTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignUserSystemRolesUsingPOST(userId: string, roleTypes: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).assignUserSystemRolesUsingPOST(userId, roleTypes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建资源与权限的关系表
         * @param {'Read' | 'Write' | 'SoftWrite'} permissionType permissionType
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceType resourceType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPermissionResourceUsingPOST(permissionType: 'Read' | 'Write' | 'SoftWrite', resourceType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).createPermissionResourceUsingPOST(permissionType, resourceType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建资源类型
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceSubType resourceSubType
         * @param {'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK'} resourceType resourceType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createResourceUsingPOST(resourceSubType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', resourceType: 'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).createResourceUsingPOST(resourceSubType, resourceType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建角色与资源权限的关系表
         * @param {'Read' | 'Write' | 'SoftWrite'} permissionType permissionType
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceType resourceType
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRolePermissionResourceUsingPOST(permissionType: 'Read' | 'Write' | 'SoftWrite', resourceType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).createRolePermissionResourceUsingPOST(permissionType, resourceType, roleType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建角色
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoleUsingPOST(roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).createRoleUsingPOST(roleType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除角色与资源权限的关系表
         * @param {'Read' | 'Write' | 'SoftWrite'} permissionType permissionType
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceType resourceType
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRolePermissionResourceUsingDELETE(permissionType: 'Read' | 'Write' | 'SoftWrite', resourceType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).deleteRolePermissionResourceUsingDELETE(permissionType, resourceType, roleType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 移除角色
         * @param {string} projectId projectId
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserRoleUsingDELETE(projectId: string, roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).deleteUserRoleUsingDELETE(projectId, roleType, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 移除用户在某个项目下的所有角色
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserRolesInProjectUsingDELETE(projectId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).deleteUserRolesInProjectUsingDELETE(projectId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查项目下所有的角色的成员
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRoleUsersInProjectUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListUserRoles>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).getAllRoleUsersInProjectUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查项目下指定角色的所有成员
         * @param {string} projectId projectId
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserIdsByRoleInProjectUsingGET(projectId: string, roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListstring>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).getAllUserIdsByRoleInProjectUsingGET(projectId, roleType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 通过角色类型查询权限
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceSubType resourceSubType
         * @param {'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK'} resourceType resourceType
         * @param {Array<string>} roleTypes roleTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissionTypeByRoleUsingPOST(resourceSubType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', resourceType: 'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK', roleTypes: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListstring>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).getPermissionTypeByRoleUsingPOST(resourceSubType, resourceType, roleTypes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 通过用户和项目信息查询权限
         * @param {string} projectId projectId
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceSubType resourceSubType
         * @param {'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK'} resourceType resourceType
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissionTypeUsingGET(projectId: string, resourceSubType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', resourceType: 'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK', userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListstring>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).getPermissionTypeUsingGET(projectId, resourceSubType, resourceType, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询角色与资源的权限关系
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourcePermissionByRoleUsingGET(roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListResourcePermission>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).getResourcePermissionByRoleUsingGET(roleType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询用户在某个项目下与资源的权限关系
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourcePermissionInProjectUsingGET(projectId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListResourcePermission>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).getResourcePermissionInProjectUsingGET(projectId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询用户的系统资源权限
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemResourcePermissionUsingGET(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListResourcePermission>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).getSystemResourcePermissionUsingGET(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询用户在项目中的所有角色(包括隐藏角色)
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAllRolesInProjectUsingGET(projectId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListstring>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).getUserAllRolesInProjectUsingGET(projectId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询用户在项目中的角色
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserRolesInProjectUsingGET(projectId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListstring>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).getUserRolesInProjectUsingGET(projectId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询指定用户的所有角色
         * @param {string} xGdcUserId x-gdc-userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserRolesUsingGET(xGdcUserId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListUserRoles>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).getUserRolesUsingGET(xGdcUserId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询系统角色
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserSystemRolesUsingGET(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListstring>> {
            const localVarAxiosArgs = await AuthorizationApiAxiosParamCreator(configuration).getUserSystemRolesUsingGET(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthorizationApi - factory interface
 * @export
 */
export const AuthorizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 赋予角色
         * @param {string} projectId projectId
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignUserRoleUsingPOST(projectId: string, roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', userId: string, options?: any): AxiosPromise<ResponseVoid> {
            return AuthorizationApiFp(configuration).assignUserRoleUsingPOST(projectId, roleType, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量赋予项目下成员某一角色
         * @param {string} projectId projectId
         * @param {UserRoleCreation} userRoleCreation userRoleCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignUserRolesInProjectUsingPOST(projectId: string, userRoleCreation: UserRoleCreation, options?: any): AxiosPromise<ResponseListUserRoles> {
            return AuthorizationApiFp(configuration).assignUserRolesInProjectUsingPOST(projectId, userRoleCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量赋予角色
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {Array<string>} roleTypes roleTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignUserRolesUsingPOST(projectId: string, userId: string, roleTypes: Array<string>, options?: any): AxiosPromise<ResponseVoid> {
            return AuthorizationApiFp(configuration).assignUserRolesUsingPOST(projectId, userId, roleTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 赋予系统角色
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignUserSystemRoleUsingPOST(roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', userId: string, options?: any): AxiosPromise<ResponseVoid> {
            return AuthorizationApiFp(configuration).assignUserSystemRoleUsingPOST(roleType, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量赋予系统角色
         * @param {string} userId userId
         * @param {Array<string>} roleTypes roleTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignUserSystemRolesUsingPOST(userId: string, roleTypes: Array<string>, options?: any): AxiosPromise<ResponseVoid> {
            return AuthorizationApiFp(configuration).assignUserSystemRolesUsingPOST(userId, roleTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建资源与权限的关系表
         * @param {'Read' | 'Write' | 'SoftWrite'} permissionType permissionType
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceType resourceType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPermissionResourceUsingPOST(permissionType: 'Read' | 'Write' | 'SoftWrite', resourceType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', options?: any): AxiosPromise<ResponseVoid> {
            return AuthorizationApiFp(configuration).createPermissionResourceUsingPOST(permissionType, resourceType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建资源类型
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceSubType resourceSubType
         * @param {'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK'} resourceType resourceType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceUsingPOST(resourceSubType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', resourceType: 'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK', options?: any): AxiosPromise<ResponseVoid> {
            return AuthorizationApiFp(configuration).createResourceUsingPOST(resourceSubType, resourceType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建角色与资源权限的关系表
         * @param {'Read' | 'Write' | 'SoftWrite'} permissionType permissionType
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceType resourceType
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRolePermissionResourceUsingPOST(permissionType: 'Read' | 'Write' | 'SoftWrite', resourceType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options?: any): AxiosPromise<ResponseVoid> {
            return AuthorizationApiFp(configuration).createRolePermissionResourceUsingPOST(permissionType, resourceType, roleType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建角色
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoleUsingPOST(roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options?: any): AxiosPromise<ResponseVoid> {
            return AuthorizationApiFp(configuration).createRoleUsingPOST(roleType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除角色与资源权限的关系表
         * @param {'Read' | 'Write' | 'SoftWrite'} permissionType permissionType
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceType resourceType
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRolePermissionResourceUsingDELETE(permissionType: 'Read' | 'Write' | 'SoftWrite', resourceType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options?: any): AxiosPromise<ResponseVoid> {
            return AuthorizationApiFp(configuration).deleteRolePermissionResourceUsingDELETE(permissionType, resourceType, roleType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 移除角色
         * @param {string} projectId projectId
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRoleUsingDELETE(projectId: string, roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', userId: string, options?: any): AxiosPromise<ResponseVoid> {
            return AuthorizationApiFp(configuration).deleteUserRoleUsingDELETE(projectId, roleType, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 移除用户在某个项目下的所有角色
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRolesInProjectUsingDELETE(projectId: string, userId: string, options?: any): AxiosPromise<ResponseVoid> {
            return AuthorizationApiFp(configuration).deleteUserRolesInProjectUsingDELETE(projectId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查项目下所有的角色的成员
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRoleUsersInProjectUsingGET(projectId: string, options?: any): AxiosPromise<ResponseListUserRoles> {
            return AuthorizationApiFp(configuration).getAllRoleUsersInProjectUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查项目下指定角色的所有成员
         * @param {string} projectId projectId
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserIdsByRoleInProjectUsingGET(projectId: string, roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options?: any): AxiosPromise<ResponseListstring> {
            return AuthorizationApiFp(configuration).getAllUserIdsByRoleInProjectUsingGET(projectId, roleType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 通过角色类型查询权限
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceSubType resourceSubType
         * @param {'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK'} resourceType resourceType
         * @param {Array<string>} roleTypes roleTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionTypeByRoleUsingPOST(resourceSubType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', resourceType: 'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK', roleTypes: Array<string>, options?: any): AxiosPromise<ResponseListstring> {
            return AuthorizationApiFp(configuration).getPermissionTypeByRoleUsingPOST(resourceSubType, resourceType, roleTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 通过用户和项目信息查询权限
         * @param {string} projectId projectId
         * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceSubType resourceSubType
         * @param {'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK'} resourceType resourceType
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionTypeUsingGET(projectId: string, resourceSubType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', resourceType: 'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK', userId: string, options?: any): AxiosPromise<ResponseListstring> {
            return AuthorizationApiFp(configuration).getPermissionTypeUsingGET(projectId, resourceSubType, resourceType, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询角色与资源的权限关系
         * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourcePermissionByRoleUsingGET(roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options?: any): AxiosPromise<ResponseListResourcePermission> {
            return AuthorizationApiFp(configuration).getResourcePermissionByRoleUsingGET(roleType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询用户在某个项目下与资源的权限关系
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourcePermissionInProjectUsingGET(projectId: string, userId: string, options?: any): AxiosPromise<ResponseListResourcePermission> {
            return AuthorizationApiFp(configuration).getResourcePermissionInProjectUsingGET(projectId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询用户的系统资源权限
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemResourcePermissionUsingGET(userId: string, options?: any): AxiosPromise<ResponseListResourcePermission> {
            return AuthorizationApiFp(configuration).getSystemResourcePermissionUsingGET(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询用户在项目中的所有角色(包括隐藏角色)
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAllRolesInProjectUsingGET(projectId: string, userId: string, options?: any): AxiosPromise<ResponseListstring> {
            return AuthorizationApiFp(configuration).getUserAllRolesInProjectUsingGET(projectId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询用户在项目中的角色
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRolesInProjectUsingGET(projectId: string, userId: string, options?: any): AxiosPromise<ResponseListstring> {
            return AuthorizationApiFp(configuration).getUserRolesInProjectUsingGET(projectId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询指定用户的所有角色
         * @param {string} xGdcUserId x-gdc-userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRolesUsingGET(xGdcUserId: string, options?: any): AxiosPromise<ResponseListUserRoles> {
            return AuthorizationApiFp(configuration).getUserRolesUsingGET(xGdcUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询系统角色
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSystemRolesUsingGET(userId: string, options?: any): AxiosPromise<ResponseListstring> {
            return AuthorizationApiFp(configuration).getUserSystemRolesUsingGET(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorizationApi - object-oriented interface
 * @export
 * @class AuthorizationApi
 * @extends {BaseAPI}
 */
export class AuthorizationApi extends BaseAPI {
    /**
     * 
     * @summary 赋予角色
     * @param {string} projectId projectId
     * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public assignUserRoleUsingPOST(projectId: string, roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', userId: string, options?: any) {
        return AuthorizationApiFp(this.configuration).assignUserRoleUsingPOST(projectId, roleType, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量赋予项目下成员某一角色
     * @param {string} projectId projectId
     * @param {UserRoleCreation} userRoleCreation userRoleCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public assignUserRolesInProjectUsingPOST(projectId: string, userRoleCreation: UserRoleCreation, options?: any) {
        return AuthorizationApiFp(this.configuration).assignUserRolesInProjectUsingPOST(projectId, userRoleCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量赋予角色
     * @param {string} projectId projectId
     * @param {string} userId userId
     * @param {Array<string>} roleTypes roleTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public assignUserRolesUsingPOST(projectId: string, userId: string, roleTypes: Array<string>, options?: any) {
        return AuthorizationApiFp(this.configuration).assignUserRolesUsingPOST(projectId, userId, roleTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 赋予系统角色
     * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public assignUserSystemRoleUsingPOST(roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', userId: string, options?: any) {
        return AuthorizationApiFp(this.configuration).assignUserSystemRoleUsingPOST(roleType, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量赋予系统角色
     * @param {string} userId userId
     * @param {Array<string>} roleTypes roleTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public assignUserSystemRolesUsingPOST(userId: string, roleTypes: Array<string>, options?: any) {
        return AuthorizationApiFp(this.configuration).assignUserSystemRolesUsingPOST(userId, roleTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建资源与权限的关系表
     * @param {'Read' | 'Write' | 'SoftWrite'} permissionType permissionType
     * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceType resourceType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public createPermissionResourceUsingPOST(permissionType: 'Read' | 'Write' | 'SoftWrite', resourceType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', options?: any) {
        return AuthorizationApiFp(this.configuration).createPermissionResourceUsingPOST(permissionType, resourceType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建资源类型
     * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceSubType resourceSubType
     * @param {'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK'} resourceType resourceType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public createResourceUsingPOST(resourceSubType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', resourceType: 'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK', options?: any) {
        return AuthorizationApiFp(this.configuration).createResourceUsingPOST(resourceSubType, resourceType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建角色与资源权限的关系表
     * @param {'Read' | 'Write' | 'SoftWrite'} permissionType permissionType
     * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceType resourceType
     * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public createRolePermissionResourceUsingPOST(permissionType: 'Read' | 'Write' | 'SoftWrite', resourceType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options?: any) {
        return AuthorizationApiFp(this.configuration).createRolePermissionResourceUsingPOST(permissionType, resourceType, roleType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建角色
     * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public createRoleUsingPOST(roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options?: any) {
        return AuthorizationApiFp(this.configuration).createRoleUsingPOST(roleType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除角色与资源权限的关系表
     * @param {'Read' | 'Write' | 'SoftWrite'} permissionType permissionType
     * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceType resourceType
     * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public deleteRolePermissionResourceUsingDELETE(permissionType: 'Read' | 'Write' | 'SoftWrite', resourceType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options?: any) {
        return AuthorizationApiFp(this.configuration).deleteRolePermissionResourceUsingDELETE(permissionType, resourceType, roleType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 移除角色
     * @param {string} projectId projectId
     * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public deleteUserRoleUsingDELETE(projectId: string, roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', userId: string, options?: any) {
        return AuthorizationApiFp(this.configuration).deleteUserRoleUsingDELETE(projectId, roleType, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 移除用户在某个项目下的所有角色
     * @param {string} projectId projectId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public deleteUserRolesInProjectUsingDELETE(projectId: string, userId: string, options?: any) {
        return AuthorizationApiFp(this.configuration).deleteUserRolesInProjectUsingDELETE(projectId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查项目下所有的角色的成员
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getAllRoleUsersInProjectUsingGET(projectId: string, options?: any) {
        return AuthorizationApiFp(this.configuration).getAllRoleUsersInProjectUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查项目下指定角色的所有成员
     * @param {string} projectId projectId
     * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getAllUserIdsByRoleInProjectUsingGET(projectId: string, roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options?: any) {
        return AuthorizationApiFp(this.configuration).getAllUserIdsByRoleInProjectUsingGET(projectId, roleType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 通过角色类型查询权限
     * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceSubType resourceSubType
     * @param {'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK'} resourceType resourceType
     * @param {Array<string>} roleTypes roleTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getPermissionTypeByRoleUsingPOST(resourceSubType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', resourceType: 'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK', roleTypes: Array<string>, options?: any) {
        return AuthorizationApiFp(this.configuration).getPermissionTypeByRoleUsingPOST(resourceSubType, resourceType, roleTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 通过用户和项目信息查询权限
     * @param {string} projectId projectId
     * @param {'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave'} resourceSubType resourceSubType
     * @param {'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK'} resourceType resourceType
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getPermissionTypeUsingGET(projectId: string, resourceSubType: 'PersonalDataset' | 'SharePackage' | 'AcceptPackage' | 'Issue' | 'TeamDataset' | 'OtherFile' | 'PermissionTeam' | 'ArchivePackage' | 'ResourcePool' | 'CollisionDetection' | 'ProjectSummary' | 'CollaborationSetting' | 'ProjectSetting' | 'GJK' | 'MEPSetting' | 'GeneralConfiguration' | 'GeneralConfigurationStyleLib' | 'GeneralConfigurationSoftSetting' | 'PendingCustomer' | 'GeneralCustomer' | 'VipCustomer' | 'RejectedCustomer' | 'PendingPersonalCustomer' | 'GeneralPersonalCustomer' | 'VipPersonalCustomer' | 'RejectedPersonalCustomer' | 'InternalBusiness' | 'InternalTest' | 'SystemAccount' | 'ResourceLimit' | 'Maintain' | 'EmailTemplate' | 'JobManager' | 'AutoSave', resourceType: 'DataResource' | 'FunctionResource' | 'GDCBops' | 'GDCSDK', userId: string, options?: any) {
        return AuthorizationApiFp(this.configuration).getPermissionTypeUsingGET(projectId, resourceSubType, resourceType, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询角色与资源的权限关系
     * @param {'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie'} roleType roleType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getResourcePermissionByRoleUsingGET(roleType: 'ProjectAdmin' | 'ProjectUser' | 'ProjectExternalUser' | 'GlobalVisitor' | 'EnterpriseVisitor' | 'ProjectVisitor' | 'BetaUser' | 'BopsAdmin' | 'BopsMarket' | 'BopsProduct' | 'BopsUser' | 'BopsDeveloper' | 'BimmakeArchvie', options?: any) {
        return AuthorizationApiFp(this.configuration).getResourcePermissionByRoleUsingGET(roleType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询用户在某个项目下与资源的权限关系
     * @param {string} projectId projectId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getResourcePermissionInProjectUsingGET(projectId: string, userId: string, options?: any) {
        return AuthorizationApiFp(this.configuration).getResourcePermissionInProjectUsingGET(projectId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询用户的系统资源权限
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getSystemResourcePermissionUsingGET(userId: string, options?: any) {
        return AuthorizationApiFp(this.configuration).getSystemResourcePermissionUsingGET(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询用户在项目中的所有角色(包括隐藏角色)
     * @param {string} projectId projectId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getUserAllRolesInProjectUsingGET(projectId: string, userId: string, options?: any) {
        return AuthorizationApiFp(this.configuration).getUserAllRolesInProjectUsingGET(projectId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询用户在项目中的角色
     * @param {string} projectId projectId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getUserRolesInProjectUsingGET(projectId: string, userId: string, options?: any) {
        return AuthorizationApiFp(this.configuration).getUserRolesInProjectUsingGET(projectId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询指定用户的所有角色
     * @param {string} xGdcUserId x-gdc-userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getUserRolesUsingGET(xGdcUserId: string, options?: any) {
        return AuthorizationApiFp(this.configuration).getUserRolesUsingGET(xGdcUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询系统角色
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getUserSystemRolesUsingGET(userId: string, options?: any) {
        return AuthorizationApiFp(this.configuration).getUserSystemRolesUsingGET(userId, options).then((request) => request(this.axios, this.basePath));
    }

}

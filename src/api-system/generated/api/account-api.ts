// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResponseAccountVO } from '../model';
// @ts-ignore
import { ResponseAccountValidationVO } from '../model';
// @ts-ignore
import { ResponsePageResponseAccountVO } from '../model';
// @ts-ignore
import { ReviewUserRequest } from '../model';
// @ts-ignore
import { SwitchUserTypeRequest } from '../model';
// @ts-ignore
import { UserRequest } from '../model';
/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 后台添加账号信息
         * @param {UserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccountUsingPOST: async (request: UserRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling addAccountUsingPOST.');
            }
            const localVarPath = `/account/system`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 编辑账号信息
         * @param {string} accountId accountId
         * @param {UserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editAccountUsingPUT: async (accountId: string, request: UserRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling editAccountUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling editAccountUsingPUT.');
            }
            const localVarPath = `/account/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 启用/禁用账号
         * @param {string} accountId accountId
         * @param {boolean} enable enable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableAccountUsingPUT: async (accountId: string, enable: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling enableAccountUsingPUT.');
            }
            // verify required parameter 'enable' is not null or undefined
            if (enable === null || enable === undefined) {
                throw new RequiredError('enable','Required parameter enable was null or undefined when calling enableAccountUsingPUT.');
            }
            const localVarPath = `/account/{accountId}/enable`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (enable !== undefined) {
                localVarQueryParameter['enable'] = enable;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据（账号分类/类型/状态/来源）查询账号，分页展示
         * @param {'Customer' | 'Internal' | 'System'} [category] 账号分类
         * @param {number} [pageNo] pageNo
         * @param {number} [pageSize] pageSize
         * @param {'Register' | 'Addition'} [source] 账号来源
         * @param {'Pending' | 'Approved' | 'Reject'} [status] 账号状态
         * @param {'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System'} [type] 账号类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountPageUsingGET: async (category?: 'Customer' | 'Internal' | 'System', pageNo?: number, pageSize?: number, source?: 'Register' | 'Addition', status?: 'Pending' | 'Approved' | 'Reject', type?: 'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/account`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取单个账号信息
         * @param {string} accountId accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountUsingGET: async (accountId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getAccountUsingGET.');
            }
            const localVarPath = `/account/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary web申请添加账号信息
         * @param {UserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAccountUsingPOST: async (request: UserRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling registerAccountUsingPOST.');
            }
            const localVarPath = `/account/web`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 审核账号
         * @param {string} accountId accountId
         * @param {ReviewUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewAccountUsingPUT: async (accountId: string, request: ReviewUserRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling reviewAccountUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling reviewAccountUsingPUT.');
            }
            const localVarPath = `/account/{accountId}/audit`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 切换账号类型
         * @param {string} accountId accountId
         * @param {SwitchUserTypeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        switchAccountTypeUsingPUT: async (accountId: string, request: SwitchUserTypeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling switchAccountTypeUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling switchAccountTypeUsingPUT.');
            }
            const localVarPath = `/account/{accountId}/switchType`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 验证账号信息
         * @param {'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System'} type type
         * @param {string} userName userName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateAccountUsingGET: async (type: 'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System', userName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling validateAccountUsingGET.');
            }
            // verify required parameter 'userName' is not null or undefined
            if (userName === null || userName === undefined) {
                throw new RequiredError('userName','Required parameter userName was null or undefined when calling validateAccountUsingGET.');
            }
            const localVarPath = `/account/validation`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (userName !== undefined) {
                localVarQueryParameter['userName'] = userName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 后台添加账号信息
         * @param {UserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAccountUsingPOST(request: UserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAccountVO>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).addAccountUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 编辑账号信息
         * @param {string} accountId accountId
         * @param {UserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editAccountUsingPUT(accountId: string, request: UserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAccountVO>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).editAccountUsingPUT(accountId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 启用/禁用账号
         * @param {string} accountId accountId
         * @param {boolean} enable enable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enableAccountUsingPUT(accountId: string, enable: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAccountVO>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).enableAccountUsingPUT(accountId, enable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据（账号分类/类型/状态/来源）查询账号，分页展示
         * @param {'Customer' | 'Internal' | 'System'} [category] 账号分类
         * @param {number} [pageNo] pageNo
         * @param {number} [pageSize] pageSize
         * @param {'Register' | 'Addition'} [source] 账号来源
         * @param {'Pending' | 'Approved' | 'Reject'} [status] 账号状态
         * @param {'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System'} [type] 账号类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountPageUsingGET(category?: 'Customer' | 'Internal' | 'System', pageNo?: number, pageSize?: number, source?: 'Register' | 'Addition', status?: 'Pending' | 'Approved' | 'Reject', type?: 'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsePageResponseAccountVO>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).getAccountPageUsingGET(category, pageNo, pageSize, source, status, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取单个账号信息
         * @param {string} accountId accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountUsingGET(accountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAccountVO>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).getAccountUsingGET(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary web申请添加账号信息
         * @param {UserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerAccountUsingPOST(request: UserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAccountVO>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).registerAccountUsingPOST(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 审核账号
         * @param {string} accountId accountId
         * @param {ReviewUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reviewAccountUsingPUT(accountId: string, request: ReviewUserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAccountVO>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).reviewAccountUsingPUT(accountId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 切换账号类型
         * @param {string} accountId accountId
         * @param {SwitchUserTypeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async switchAccountTypeUsingPUT(accountId: string, request: SwitchUserTypeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAccountVO>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).switchAccountTypeUsingPUT(accountId, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 验证账号信息
         * @param {'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System'} type type
         * @param {string} userName userName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateAccountUsingGET(type: 'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System', userName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseAccountValidationVO>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).validateAccountUsingGET(type, userName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 后台添加账号信息
         * @param {UserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccountUsingPOST(request: UserRequest, options?: any): AxiosPromise<ResponseAccountVO> {
            return AccountApiFp(configuration).addAccountUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 编辑账号信息
         * @param {string} accountId accountId
         * @param {UserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editAccountUsingPUT(accountId: string, request: UserRequest, options?: any): AxiosPromise<ResponseAccountVO> {
            return AccountApiFp(configuration).editAccountUsingPUT(accountId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 启用/禁用账号
         * @param {string} accountId accountId
         * @param {boolean} enable enable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableAccountUsingPUT(accountId: string, enable: boolean, options?: any): AxiosPromise<ResponseAccountVO> {
            return AccountApiFp(configuration).enableAccountUsingPUT(accountId, enable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据（账号分类/类型/状态/来源）查询账号，分页展示
         * @param {'Customer' | 'Internal' | 'System'} [category] 账号分类
         * @param {number} [pageNo] pageNo
         * @param {number} [pageSize] pageSize
         * @param {'Register' | 'Addition'} [source] 账号来源
         * @param {'Pending' | 'Approved' | 'Reject'} [status] 账号状态
         * @param {'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System'} [type] 账号类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountPageUsingGET(category?: 'Customer' | 'Internal' | 'System', pageNo?: number, pageSize?: number, source?: 'Register' | 'Addition', status?: 'Pending' | 'Approved' | 'Reject', type?: 'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System', options?: any): AxiosPromise<ResponsePageResponseAccountVO> {
            return AccountApiFp(configuration).getAccountPageUsingGET(category, pageNo, pageSize, source, status, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取单个账号信息
         * @param {string} accountId accountId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountUsingGET(accountId: string, options?: any): AxiosPromise<ResponseAccountVO> {
            return AccountApiFp(configuration).getAccountUsingGET(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary web申请添加账号信息
         * @param {UserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAccountUsingPOST(request: UserRequest, options?: any): AxiosPromise<ResponseAccountVO> {
            return AccountApiFp(configuration).registerAccountUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 审核账号
         * @param {string} accountId accountId
         * @param {ReviewUserRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewAccountUsingPUT(accountId: string, request: ReviewUserRequest, options?: any): AxiosPromise<ResponseAccountVO> {
            return AccountApiFp(configuration).reviewAccountUsingPUT(accountId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 切换账号类型
         * @param {string} accountId accountId
         * @param {SwitchUserTypeRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        switchAccountTypeUsingPUT(accountId: string, request: SwitchUserTypeRequest, options?: any): AxiosPromise<ResponseAccountVO> {
            return AccountApiFp(configuration).switchAccountTypeUsingPUT(accountId, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 验证账号信息
         * @param {'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System'} type type
         * @param {string} userName userName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateAccountUsingGET(type: 'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System', userName: string, options?: any): AxiosPromise<ResponseAccountValidationVO> {
            return AccountApiFp(configuration).validateAccountUsingGET(type, userName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @summary 后台添加账号信息
     * @param {UserRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public addAccountUsingPOST(request: UserRequest, options?: any) {
        return AccountApiFp(this.configuration).addAccountUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 编辑账号信息
     * @param {string} accountId accountId
     * @param {UserRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public editAccountUsingPUT(accountId: string, request: UserRequest, options?: any) {
        return AccountApiFp(this.configuration).editAccountUsingPUT(accountId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 启用/禁用账号
     * @param {string} accountId accountId
     * @param {boolean} enable enable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public enableAccountUsingPUT(accountId: string, enable: boolean, options?: any) {
        return AccountApiFp(this.configuration).enableAccountUsingPUT(accountId, enable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据（账号分类/类型/状态/来源）查询账号，分页展示
     * @param {'Customer' | 'Internal' | 'System'} [category] 账号分类
     * @param {number} [pageNo] pageNo
     * @param {number} [pageSize] pageSize
     * @param {'Register' | 'Addition'} [source] 账号来源
     * @param {'Pending' | 'Approved' | 'Reject'} [status] 账号状态
     * @param {'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System'} [type] 账号类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getAccountPageUsingGET(category?: 'Customer' | 'Internal' | 'System', pageNo?: number, pageSize?: number, source?: 'Register' | 'Addition', status?: 'Pending' | 'Approved' | 'Reject', type?: 'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System', options?: any) {
        return AccountApiFp(this.configuration).getAccountPageUsingGET(category, pageNo, pageSize, source, status, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取单个账号信息
     * @param {string} accountId accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getAccountUsingGET(accountId: string, options?: any) {
        return AccountApiFp(this.configuration).getAccountUsingGET(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary web申请添加账号信息
     * @param {UserRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public registerAccountUsingPOST(request: UserRequest, options?: any) {
        return AccountApiFp(this.configuration).registerAccountUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 审核账号
     * @param {string} accountId accountId
     * @param {ReviewUserRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public reviewAccountUsingPUT(accountId: string, request: ReviewUserRequest, options?: any) {
        return AccountApiFp(this.configuration).reviewAccountUsingPUT(accountId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 切换账号类型
     * @param {string} accountId accountId
     * @param {SwitchUserTypeRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public switchAccountTypeUsingPUT(accountId: string, request: SwitchUserTypeRequest, options?: any) {
        return AccountApiFp(this.configuration).switchAccountTypeUsingPUT(accountId, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 验证账号信息
     * @param {'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System'} type type
     * @param {string} userName userName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public validateAccountUsingGET(type: 'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System', userName: string, options?: any) {
        return AccountApiFp(this.configuration).validateAccountUsingGET(type, userName, options).then((request) => request(this.axios, this.basePath));
    }

}

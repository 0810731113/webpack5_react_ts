// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResourceLimitRequest } from '../model';
// @ts-ignore
import { ResponseListResourceLimitVO } from '../model';
// @ts-ignore
import { ResponseResourceLimitVO } from '../model';
/**
 * LimitApi - axios parameter creator
 * @export
 */
export const LimitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 编辑用户类型资源限制
         * @param {'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System'} type type
         * @param {ResourceLimitRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editResourceLimitByUsingPUT: async (type: 'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System', request: ResourceLimitRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling editResourceLimitByUsingPUT.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling editResourceLimitByUsingPUT.');
            }
            const localVarPath = `/resource/userType/edit`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户类型资源限制
         * @param {'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System'} [type] 账号类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceLimitByUsingGET: async (type?: 'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/resource/userType`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取所有类型资源限制
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceLimitListUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/resource/all`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LimitApi - functional programming interface
 * @export
 */
export const LimitApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 编辑用户类型资源限制
         * @param {'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System'} type type
         * @param {ResourceLimitRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editResourceLimitByUsingPUT(type: 'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System', request: ResourceLimitRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResourceLimitVO>> {
            const localVarAxiosArgs = await LimitApiAxiosParamCreator(configuration).editResourceLimitByUsingPUT(type, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取用户类型资源限制
         * @param {'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System'} [type] 账号类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceLimitByUsingGET(type?: 'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResourceLimitVO>> {
            const localVarAxiosArgs = await LimitApiAxiosParamCreator(configuration).getResourceLimitByUsingGET(type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取所有类型资源限制
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceLimitListUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListResourceLimitVO>> {
            const localVarAxiosArgs = await LimitApiAxiosParamCreator(configuration).getResourceLimitListUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LimitApi - factory interface
 * @export
 */
export const LimitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 编辑用户类型资源限制
         * @param {'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System'} type type
         * @param {ResourceLimitRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editResourceLimitByUsingPUT(type: 'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System', request: ResourceLimitRequest, options?: any): AxiosPromise<ResponseResourceLimitVO> {
            return LimitApiFp(configuration).editResourceLimitByUsingPUT(type, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取用户类型资源限制
         * @param {'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System'} [type] 账号类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceLimitByUsingGET(type?: 'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System', options?: any): AxiosPromise<ResponseResourceLimitVO> {
            return LimitApiFp(configuration).getResourceLimitByUsingGET(type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取所有类型资源限制
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceLimitListUsingGET(options?: any): AxiosPromise<ResponseListResourceLimitVO> {
            return LimitApiFp(configuration).getResourceLimitListUsingGET(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LimitApi - object-oriented interface
 * @export
 * @class LimitApi
 * @extends {BaseAPI}
 */
export class LimitApi extends BaseAPI {
    /**
     * 
     * @summary 编辑用户类型资源限制
     * @param {'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System'} type type
     * @param {ResourceLimitRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitApi
     */
    public editResourceLimitByUsingPUT(type: 'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System', request: ResourceLimitRequest, options?: any) {
        return LimitApiFp(this.configuration).editResourceLimitByUsingPUT(type, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取用户类型资源限制
     * @param {'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System'} [type] 账号类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitApi
     */
    public getResourceLimitByUsingGET(type?: 'EnterpriseGeneral' | 'EnterpriseVIP' | 'EnterprisePersonal' | 'InternalBusiness' | 'InternalTest' | 'System', options?: any) {
        return LimitApiFp(this.configuration).getResourceLimitByUsingGET(type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取所有类型资源限制
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitApi
     */
    public getResourceLimitListUsingGET(options?: any) {
        return LimitApiFp(this.configuration).getResourceLimitListUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

}

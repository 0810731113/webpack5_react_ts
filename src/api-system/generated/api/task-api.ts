// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResponseListTaskExtraVO } from '../model';
// @ts-ignore
import { ResponsePageResponseTaskVO } from '../model';
// @ts-ignore
import { ResponseTaskMetricStatsVO } from '../model';
// @ts-ignore
import { ResponseTaskStatsVO } from '../model';
/**
 * TaskApi - axios parameter creator
 * @export
 */
export const TaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取任务下的详细信息
         * @param {number} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskExtraInfoUsingGET: async (taskId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling getTaskExtraInfoUsingGET.');
            }
            const localVarPath = `/task/{taskId}/extra`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取任务度量统计信息
         * @param {number} [from] from
         * @param {'Waiting' | 'Success' | 'Error' | 'Processing' | 'Timeout'} [status] 任务状态
         * @param {number} [to] to
         * @param {'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN'} [type] 任务类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskMetricStatsUsingGET: async (from?: number, status?: 'Waiting' | 'Success' | 'Error' | 'Processing' | 'Timeout', to?: number, type?: 'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/taskStats/metric`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取任务总览统计信息
         * @param {number} [from] from
         * @param {number} [to] to
         * @param {'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN'} [type] 任务类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskOverviewStatsUsingGET: async (from?: number, to?: number, type?: 'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/taskStats/overview`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询任务
         * @param {number} [pageNo] pageNo
         * @param {number} [pageSize] pageSize
         * @param {'Waiting' | 'Success' | 'Error' | 'Processing' | 'Timeout'} [status] 任务状态
         * @param {'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN'} [type] 任务类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskPageUsingGET: async (pageNo?: number, pageSize?: number, status?: 'Waiting' | 'Success' | 'Error' | 'Processing' | 'Timeout', type?: 'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/task`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取任务下的详细信息
         * @param {number} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskExtraInfoUsingGET(taskId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListTaskExtraVO>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).getTaskExtraInfoUsingGET(taskId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取任务度量统计信息
         * @param {number} [from] from
         * @param {'Waiting' | 'Success' | 'Error' | 'Processing' | 'Timeout'} [status] 任务状态
         * @param {number} [to] to
         * @param {'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN'} [type] 任务类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskMetricStatsUsingGET(from?: number, status?: 'Waiting' | 'Success' | 'Error' | 'Processing' | 'Timeout', to?: number, type?: 'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTaskMetricStatsVO>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).getTaskMetricStatsUsingGET(from, status, to, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取任务总览统计信息
         * @param {number} [from] from
         * @param {number} [to] to
         * @param {'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN'} [type] 任务类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskOverviewStatsUsingGET(from?: number, to?: number, type?: 'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTaskStatsVO>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).getTaskOverviewStatsUsingGET(from, to, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 分页查询任务
         * @param {number} [pageNo] pageNo
         * @param {number} [pageSize] pageSize
         * @param {'Waiting' | 'Success' | 'Error' | 'Processing' | 'Timeout'} [status] 任务状态
         * @param {'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN'} [type] 任务类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskPageUsingGET(pageNo?: number, pageSize?: number, status?: 'Waiting' | 'Success' | 'Error' | 'Processing' | 'Timeout', type?: 'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsePageResponseTaskVO>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).getTaskPageUsingGET(pageNo, pageSize, status, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取任务下的详细信息
         * @param {number} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskExtraInfoUsingGET(taskId: number, options?: any): AxiosPromise<ResponseListTaskExtraVO> {
            return TaskApiFp(configuration).getTaskExtraInfoUsingGET(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取任务度量统计信息
         * @param {number} [from] from
         * @param {'Waiting' | 'Success' | 'Error' | 'Processing' | 'Timeout'} [status] 任务状态
         * @param {number} [to] to
         * @param {'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN'} [type] 任务类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskMetricStatsUsingGET(from?: number, status?: 'Waiting' | 'Success' | 'Error' | 'Processing' | 'Timeout', to?: number, type?: 'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN', options?: any): AxiosPromise<ResponseTaskMetricStatsVO> {
            return TaskApiFp(configuration).getTaskMetricStatsUsingGET(from, status, to, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取任务总览统计信息
         * @param {number} [from] from
         * @param {number} [to] to
         * @param {'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN'} [type] 任务类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskOverviewStatsUsingGET(from?: number, to?: number, type?: 'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN', options?: any): AxiosPromise<ResponseTaskStatsVO> {
            return TaskApiFp(configuration).getTaskOverviewStatsUsingGET(from, to, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页查询任务
         * @param {number} [pageNo] pageNo
         * @param {number} [pageSize] pageSize
         * @param {'Waiting' | 'Success' | 'Error' | 'Processing' | 'Timeout'} [status] 任务状态
         * @param {'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN'} [type] 任务类型
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskPageUsingGET(pageNo?: number, pageSize?: number, status?: 'Waiting' | 'Success' | 'Error' | 'Processing' | 'Timeout', type?: 'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN', options?: any): AxiosPromise<ResponsePageResponseTaskVO> {
            return TaskApiFp(configuration).getTaskPageUsingGET(pageNo, pageSize, status, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export class TaskApi extends BaseAPI {
    /**
     * 
     * @summary 获取任务下的详细信息
     * @param {number} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public getTaskExtraInfoUsingGET(taskId: number, options?: any) {
        return TaskApiFp(this.configuration).getTaskExtraInfoUsingGET(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取任务度量统计信息
     * @param {number} [from] from
     * @param {'Waiting' | 'Success' | 'Error' | 'Processing' | 'Timeout'} [status] 任务状态
     * @param {number} [to] to
     * @param {'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN'} [type] 任务类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public getTaskMetricStatsUsingGET(from?: number, status?: 'Waiting' | 'Success' | 'Error' | 'Processing' | 'Timeout', to?: number, type?: 'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN', options?: any) {
        return TaskApiFp(this.configuration).getTaskMetricStatsUsingGET(from, status, to, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取任务总览统计信息
     * @param {number} [from] from
     * @param {number} [to] to
     * @param {'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN'} [type] 任务类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public getTaskOverviewStatsUsingGET(from?: number, to?: number, type?: 'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN', options?: any) {
        return TaskApiFp(this.configuration).getTaskOverviewStatsUsingGET(from, to, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 分页查询任务
     * @param {number} [pageNo] pageNo
     * @param {number} [pageSize] pageSize
     * @param {'Waiting' | 'Success' | 'Error' | 'Processing' | 'Timeout'} [status] 任务状态
     * @param {'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN'} [type] 任务类型
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public getTaskPageUsingGET(pageNo?: number, pageSize?: number, status?: 'Waiting' | 'Success' | 'Error' | 'Processing' | 'Timeout', type?: 'COST' | 'GFC' | 'IFC' | 'BIMQ' | 'QUANTITY' | 'BMVPACKAGE' | 'DATASET_LOAD' | 'DATASET_WRITE' | 'UNKNOWN', options?: any) {
        return TaskApiFp(this.configuration).getTaskPageUsingGET(pageNo, pageSize, status, type, options).then((request) => request(this.axios, this.basePath));
    }

}

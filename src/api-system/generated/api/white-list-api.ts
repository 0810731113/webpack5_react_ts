// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResponseListWhiteListUser } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
// @ts-ignore
import { Responseboolean } from '../model';
// @ts-ignore
import { UserInfo } from '../model';
// @ts-ignore
import { WhiteListUser } from '../model';
/**
 * WhiteListApi - axios parameter creator
 * @export
 */
export const WhiteListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 将用户添加到白名单中
         * @param {string} xGdcUserid x-gdc-userid
         * @param {WhiteListUser} whiteListUser whiteListUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserIntoWhiteListUsingPOST: async (xGdcUserid: string, whiteListUser: WhiteListUser, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling addUserIntoWhiteListUsingPOST.');
            }
            // verify required parameter 'whiteListUser' is not null or undefined
            if (whiteListUser === null || whiteListUser === undefined) {
                throw new RequiredError('whiteListUser','Required parameter whiteListUser was null or undefined when calling addUserIntoWhiteListUsingPOST.');
            }
            const localVarPath = `/whitelist/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof whiteListUser !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(whiteListUser !== undefined ? whiteListUser : {}) : (whiteListUser || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量添加到白名单中
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<UserInfo>} userInfoList userInfoList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsersIntoWhiteListUsingPOST: async (xGdcUserid: string, userInfoList: Array<UserInfo>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling addUsersIntoWhiteListUsingPOST.');
            }
            // verify required parameter 'userInfoList' is not null or undefined
            if (userInfoList === null || userInfoList === undefined) {
                throw new RequiredError('userInfoList','Required parameter userInfoList was null or undefined when calling addUsersIntoWhiteListUsingPOST.');
            }
            const localVarPath = `/whitelist/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userInfoList !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userInfoList !== undefined ? userInfoList : {}) : (userInfoList || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 将用户从白名单删除
         * @param {string} userId userId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserFromWhiteListUsingDELETE: async (userId: string, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteUserFromWhiteListUsingDELETE.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling deleteUserFromWhiteListUsingDELETE.');
            }
            const localVarPath = `/whitelist/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取所有白名单用户
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhiteListUsingGET: async (xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling getWhiteListUsingGET.');
            }
            const localVarPath = `/whitelist`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询某个用户是否在白名单中
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isWhiteListUserUsingGET: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling isWhiteListUserUsingGET.');
            }
            const localVarPath = `/whitelist/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改某个白名单用户
         * @param {string} xGdcUserid x-gdc-userid
         * @param {WhiteListUser} whiteListUser whiteListUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWhiteListUserByIdUsingPUT: async (xGdcUserid: string, whiteListUser: WhiteListUser, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling updateWhiteListUserByIdUsingPUT.');
            }
            // verify required parameter 'whiteListUser' is not null or undefined
            if (whiteListUser === null || whiteListUser === undefined) {
                throw new RequiredError('whiteListUser','Required parameter whiteListUser was null or undefined when calling updateWhiteListUserByIdUsingPUT.');
            }
            const localVarPath = `/whitelist/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof whiteListUser !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(whiteListUser !== undefined ? whiteListUser : {}) : (whiteListUser || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WhiteListApi - functional programming interface
 * @export
 */
export const WhiteListApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 将用户添加到白名单中
         * @param {string} xGdcUserid x-gdc-userid
         * @param {WhiteListUser} whiteListUser whiteListUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserIntoWhiteListUsingPOST(xGdcUserid: string, whiteListUser: WhiteListUser, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await WhiteListApiAxiosParamCreator(configuration).addUserIntoWhiteListUsingPOST(xGdcUserid, whiteListUser, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量添加到白名单中
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<UserInfo>} userInfoList userInfoList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUsersIntoWhiteListUsingPOST(xGdcUserid: string, userInfoList: Array<UserInfo>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await WhiteListApiAxiosParamCreator(configuration).addUsersIntoWhiteListUsingPOST(xGdcUserid, userInfoList, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 将用户从白名单删除
         * @param {string} userId userId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserFromWhiteListUsingDELETE(userId: string, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await WhiteListApiAxiosParamCreator(configuration).deleteUserFromWhiteListUsingDELETE(userId, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取所有白名单用户
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWhiteListUsingGET(xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListWhiteListUser>> {
            const localVarAxiosArgs = await WhiteListApiAxiosParamCreator(configuration).getWhiteListUsingGET(xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询某个用户是否在白名单中
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isWhiteListUserUsingGET(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseboolean>> {
            const localVarAxiosArgs = await WhiteListApiAxiosParamCreator(configuration).isWhiteListUserUsingGET(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改某个白名单用户
         * @param {string} xGdcUserid x-gdc-userid
         * @param {WhiteListUser} whiteListUser whiteListUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWhiteListUserByIdUsingPUT(xGdcUserid: string, whiteListUser: WhiteListUser, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await WhiteListApiAxiosParamCreator(configuration).updateWhiteListUserByIdUsingPUT(xGdcUserid, whiteListUser, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WhiteListApi - factory interface
 * @export
 */
export const WhiteListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 将用户添加到白名单中
         * @param {string} xGdcUserid x-gdc-userid
         * @param {WhiteListUser} whiteListUser whiteListUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserIntoWhiteListUsingPOST(xGdcUserid: string, whiteListUser: WhiteListUser, options?: any): AxiosPromise<ResponseVoid> {
            return WhiteListApiFp(configuration).addUserIntoWhiteListUsingPOST(xGdcUserid, whiteListUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量添加到白名单中
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<UserInfo>} userInfoList userInfoList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsersIntoWhiteListUsingPOST(xGdcUserid: string, userInfoList: Array<UserInfo>, options?: any): AxiosPromise<ResponseVoid> {
            return WhiteListApiFp(configuration).addUsersIntoWhiteListUsingPOST(xGdcUserid, userInfoList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 将用户从白名单删除
         * @param {string} userId userId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserFromWhiteListUsingDELETE(userId: string, xGdcUserid: string, options?: any): AxiosPromise<ResponseVoid> {
            return WhiteListApiFp(configuration).deleteUserFromWhiteListUsingDELETE(userId, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取所有白名单用户
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhiteListUsingGET(xGdcUserid: string, options?: any): AxiosPromise<ResponseListWhiteListUser> {
            return WhiteListApiFp(configuration).getWhiteListUsingGET(xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询某个用户是否在白名单中
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isWhiteListUserUsingGET(userId: string, options?: any): AxiosPromise<Responseboolean> {
            return WhiteListApiFp(configuration).isWhiteListUserUsingGET(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改某个白名单用户
         * @param {string} xGdcUserid x-gdc-userid
         * @param {WhiteListUser} whiteListUser whiteListUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWhiteListUserByIdUsingPUT(xGdcUserid: string, whiteListUser: WhiteListUser, options?: any): AxiosPromise<ResponseVoid> {
            return WhiteListApiFp(configuration).updateWhiteListUserByIdUsingPUT(xGdcUserid, whiteListUser, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WhiteListApi - object-oriented interface
 * @export
 * @class WhiteListApi
 * @extends {BaseAPI}
 */
export class WhiteListApi extends BaseAPI {
    /**
     * 
     * @summary 将用户添加到白名单中
     * @param {string} xGdcUserid x-gdc-userid
     * @param {WhiteListUser} whiteListUser whiteListUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhiteListApi
     */
    public addUserIntoWhiteListUsingPOST(xGdcUserid: string, whiteListUser: WhiteListUser, options?: any) {
        return WhiteListApiFp(this.configuration).addUserIntoWhiteListUsingPOST(xGdcUserid, whiteListUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量添加到白名单中
     * @param {string} xGdcUserid x-gdc-userid
     * @param {Array<UserInfo>} userInfoList userInfoList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhiteListApi
     */
    public addUsersIntoWhiteListUsingPOST(xGdcUserid: string, userInfoList: Array<UserInfo>, options?: any) {
        return WhiteListApiFp(this.configuration).addUsersIntoWhiteListUsingPOST(xGdcUserid, userInfoList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 将用户从白名单删除
     * @param {string} userId userId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhiteListApi
     */
    public deleteUserFromWhiteListUsingDELETE(userId: string, xGdcUserid: string, options?: any) {
        return WhiteListApiFp(this.configuration).deleteUserFromWhiteListUsingDELETE(userId, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取所有白名单用户
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhiteListApi
     */
    public getWhiteListUsingGET(xGdcUserid: string, options?: any) {
        return WhiteListApiFp(this.configuration).getWhiteListUsingGET(xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询某个用户是否在白名单中
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhiteListApi
     */
    public isWhiteListUserUsingGET(userId: string, options?: any) {
        return WhiteListApiFp(this.configuration).isWhiteListUserUsingGET(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改某个白名单用户
     * @param {string} xGdcUserid x-gdc-userid
     * @param {WhiteListUser} whiteListUser whiteListUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WhiteListApi
     */
    public updateWhiteListUserByIdUsingPUT(xGdcUserid: string, whiteListUser: WhiteListUser, options?: any) {
        return WhiteListApiFp(this.configuration).updateWhiteListUserByIdUsingPUT(xGdcUserid, whiteListUser, options).then((request) => request(this.axios, this.basePath));
    }

}

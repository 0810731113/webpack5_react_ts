// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from "url";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { RdsBackupRequest } from "../model";
// @ts-ignore
import { ResponseRecoverResult } from "../model";
// @ts-ignore
import { Responseboolean } from "../model";
// @ts-ignore
import { Responsestring } from "../model";
/**
 * BackupRecoverControllerApi - axios parameter creator
 * @export
 */
export const BackupRecoverControllerApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary 备份所有hbase表格
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    backupUsingPOST: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/hbase/backup/all`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 备份MYSQL
     * @param {RdsBackupRequest} req req
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    backupUsingPOST1: async (
      req: RdsBackupRequest,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'req' is not null or undefined
      if (req === null || req === undefined) {
        throw new RequiredError(
          "req",
          "Required parameter req was null or undefined when calling backupUsingPOST1.",
        );
      }
      const localVarPath = `/mysql/backup`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof req !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(req !== undefined ? req : {})
        : req || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 拷贝指定snapshot到新表
     * @param {string} snapshotName snapshotName
     * @param {string} tablename tablename
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cloneSnapshotUsingPOST: async (
      snapshotName: string,
      tablename: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'snapshotName' is not null or undefined
      if (snapshotName === null || snapshotName === undefined) {
        throw new RequiredError(
          "snapshotName",
          "Required parameter snapshotName was null or undefined when calling cloneSnapshotUsingPOST.",
        );
      }
      // verify required parameter 'tablename' is not null or undefined
      if (tablename === null || tablename === undefined) {
        throw new RequiredError(
          "tablename",
          "Required parameter tablename was null or undefined when calling cloneSnapshotUsingPOST.",
        );
      }
      const localVarPath = `/hbase/snapshot/{snapshotName}/cloneto/{tablename}`
        .replace(
          `{${"snapshotName"}}`,
          encodeURIComponent(String(snapshotName)),
        )
        .replace(`{${"tablename"}}`, encodeURIComponent(String(tablename)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 恢复指定snapshot
     * @param {string} snapshotId snapshotId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recoverSnapshotAllUsingPOST: async (
      snapshotId: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'snapshotId' is not null or undefined
      if (snapshotId === null || snapshotId === undefined) {
        throw new RequiredError(
          "snapshotId",
          "Required parameter snapshotId was null or undefined when calling recoverSnapshotAllUsingPOST.",
        );
      }
      const localVarPath = `/hbase/snapshot/{snapshotId}/recoverall`.replace(
        `{${"snapshotId"}}`,
        encodeURIComponent(String(snapshotId)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 恢复指定snapshot
     * @param {string} snapshotId snapshotId
     * @param {Array<string>} tablenames tablenames
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recoverSnapshotUsingPOST: async (
      snapshotId: string,
      tablenames: Array<string>,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'snapshotId' is not null or undefined
      if (snapshotId === null || snapshotId === undefined) {
        throw new RequiredError(
          "snapshotId",
          "Required parameter snapshotId was null or undefined when calling recoverSnapshotUsingPOST.",
        );
      }
      // verify required parameter 'tablenames' is not null or undefined
      if (tablenames === null || tablenames === undefined) {
        throw new RequiredError(
          "tablenames",
          "Required parameter tablenames was null or undefined when calling recoverSnapshotUsingPOST.",
        );
      }
      const localVarPath = `/hbase/snapshot/{snapshotId}/recover`.replace(
        `{${"snapshotId"}}`,
        encodeURIComponent(String(snapshotId)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof tablenames !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(tablenames !== undefined ? tablenames : {})
        : tablenames || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BackupRecoverControllerApi - functional programming interface
 * @export
 */
export const BackupRecoverControllerApiFp = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary 备份所有hbase表格
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async backupUsingPOST(
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responsestring>
    > {
      const localVarAxiosArgs = await BackupRecoverControllerApiAxiosParamCreator(
        configuration,
      ).backupUsingPOST(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 备份MYSQL
     * @param {RdsBackupRequest} req req
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async backupUsingPOST1(
      req: RdsBackupRequest,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Responseboolean>
    > {
      const localVarAxiosArgs = await BackupRecoverControllerApiAxiosParamCreator(
        configuration,
      ).backupUsingPOST1(req, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 拷贝指定snapshot到新表
     * @param {string} snapshotName snapshotName
     * @param {string} tablename tablename
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cloneSnapshotUsingPOST(
      snapshotName: string,
      tablename: string,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responsestring>
    > {
      const localVarAxiosArgs = await BackupRecoverControllerApiAxiosParamCreator(
        configuration,
      ).cloneSnapshotUsingPOST(snapshotName, tablename, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 恢复指定snapshot
     * @param {string} snapshotId snapshotId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async recoverSnapshotAllUsingPOST(
      snapshotId: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseRecoverResult>
    > {
      const localVarAxiosArgs = await BackupRecoverControllerApiAxiosParamCreator(
        configuration,
      ).recoverSnapshotAllUsingPOST(snapshotId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 恢复指定snapshot
     * @param {string} snapshotId snapshotId
     * @param {Array<string>} tablenames tablenames
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async recoverSnapshotUsingPOST(
      snapshotId: string,
      tablenames: Array<string>,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseRecoverResult>
    > {
      const localVarAxiosArgs = await BackupRecoverControllerApiAxiosParamCreator(
        configuration,
      ).recoverSnapshotUsingPOST(snapshotId, tablenames, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * BackupRecoverControllerApi - factory interface
 * @export
 */
export const BackupRecoverControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @summary 备份所有hbase表格
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    backupUsingPOST(options?: any): AxiosPromise<Responsestring> {
      return BackupRecoverControllerApiFp(configuration)
        .backupUsingPOST(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 备份MYSQL
     * @param {RdsBackupRequest} req req
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    backupUsingPOST1(
      req: RdsBackupRequest,
      options?: any,
    ): AxiosPromise<Responseboolean> {
      return BackupRecoverControllerApiFp(configuration)
        .backupUsingPOST1(req, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 拷贝指定snapshot到新表
     * @param {string} snapshotName snapshotName
     * @param {string} tablename tablename
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cloneSnapshotUsingPOST(
      snapshotName: string,
      tablename: string,
      options?: any,
    ): AxiosPromise<Responsestring> {
      return BackupRecoverControllerApiFp(configuration)
        .cloneSnapshotUsingPOST(snapshotName, tablename, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 恢复指定snapshot
     * @param {string} snapshotId snapshotId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recoverSnapshotAllUsingPOST(
      snapshotId: string,
      options?: any,
    ): AxiosPromise<ResponseRecoverResult> {
      return BackupRecoverControllerApiFp(configuration)
        .recoverSnapshotAllUsingPOST(snapshotId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 恢复指定snapshot
     * @param {string} snapshotId snapshotId
     * @param {Array<string>} tablenames tablenames
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recoverSnapshotUsingPOST(
      snapshotId: string,
      tablenames: Array<string>,
      options?: any,
    ): AxiosPromise<ResponseRecoverResult> {
      return BackupRecoverControllerApiFp(configuration)
        .recoverSnapshotUsingPOST(snapshotId, tablenames, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * BackupRecoverControllerApi - object-oriented interface
 * @export
 * @class BackupRecoverControllerApi
 * @extends {BaseAPI}
 */
export class BackupRecoverControllerApi extends BaseAPI {
  /**
   *
   * @summary 备份所有hbase表格
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BackupRecoverControllerApi
   */
  public backupUsingPOST(options?: any) {
    return BackupRecoverControllerApiFp(this.configuration)
      .backupUsingPOST(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 备份MYSQL
   * @param {RdsBackupRequest} req req
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BackupRecoverControllerApi
   */
  public backupUsingPOST1(req: RdsBackupRequest, options?: any) {
    return BackupRecoverControllerApiFp(this.configuration)
      .backupUsingPOST1(req, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 拷贝指定snapshot到新表
   * @param {string} snapshotName snapshotName
   * @param {string} tablename tablename
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BackupRecoverControllerApi
   */
  public cloneSnapshotUsingPOST(
    snapshotName: string,
    tablename: string,
    options?: any,
  ) {
    return BackupRecoverControllerApiFp(this.configuration)
      .cloneSnapshotUsingPOST(snapshotName, tablename, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 恢复指定snapshot
   * @param {string} snapshotId snapshotId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BackupRecoverControllerApi
   */
  public recoverSnapshotAllUsingPOST(snapshotId: string, options?: any) {
    return BackupRecoverControllerApiFp(this.configuration)
      .recoverSnapshotAllUsingPOST(snapshotId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 恢复指定snapshot
   * @param {string} snapshotId snapshotId
   * @param {Array<string>} tablenames tablenames
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BackupRecoverControllerApi
   */
  public recoverSnapshotUsingPOST(
    snapshotId: string,
    tablenames: Array<string>,
    options?: any,
  ) {
    return BackupRecoverControllerApiFp(this.configuration)
      .recoverSnapshotUsingPOST(snapshotId, tablenames, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

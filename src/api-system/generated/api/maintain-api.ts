// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from "url";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { MaintainInfo } from "../model";
// @ts-ignore
import { MaintainNotice } from "../model";
// @ts-ignore
import { ResponseAppVersionStatus } from "../model";
// @ts-ignore
import { ResponseCurrentSystemStatus } from "../model";
// @ts-ignore
import { ResponseListMaintainNotice } from "../model";
// @ts-ignore
import { ResponseListstring } from "../model";
// @ts-ignore
import { ResponseMaintainConfig } from "../model";
// @ts-ignore
import { ResponseSystemStatus } from "../model";
// @ts-ignore
import { ResponseVoid } from "../model";
// @ts-ignore
import { Responsestring } from "../model";
/**
 * MaintainApi - axios parameter creator
 * @export
 */
export const MaintainApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary 添加一个可用版本号
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAppVersionUsingPOST: async (
      version: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      if (version === null || version === undefined) {
        throw new RequiredError(
          "version",
          "Required parameter version was null or undefined when calling addAppVersionUsingPOST.",
        );
      }
      const localVarPath = `/appVersions/{version}`.replace(
        `{${"version"}}`,
        encodeURIComponent(String(version)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 创建维护文案
     * @param {MaintainNotice} maintainNotice maintainNotice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMaintainMessageUsingPOST: async (
      maintainNotice: MaintainNotice,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'maintainNotice' is not null or undefined
      if (maintainNotice === null || maintainNotice === undefined) {
        throw new RequiredError(
          "maintainNotice",
          "Required parameter maintainNotice was null or undefined when calling createMaintainMessageUsingPOST.",
        );
      }
      const localVarPath = `/maintainMessage`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof maintainNotice !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(maintainNotice !== undefined ? maintainNotice : {})
        : maintainNotice || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 恢复正常运行状态
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endMaintenanceUsingPOST: async (
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/maintain/end`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查询所有可用版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppVersionsUsingGET: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/appVersions`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查询maintain相关配置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMaintainConfigUsingGET: async (
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/maintainConfig`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查询文案
     * @param {'APP' | 'WEB' | 'PANEL' | 'COMMON'} maintainClient maintainClient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMaintainMessageUsingGET: async (
      maintainClient: "APP" | "WEB" | "PANEL" | "COMMON",
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'maintainClient' is not null or undefined
      if (maintainClient === null || maintainClient === undefined) {
        throw new RequiredError(
          "maintainClient",
          "Required parameter maintainClient was null or undefined when calling getMaintainMessageUsingGET.",
        );
      }
      const localVarPath = `/maintainMessage`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (maintainClient !== undefined) {
        localVarQueryParameter.maintainClient = maintainClient;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查询所有文案
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMaintainMessagesUsingGET: async (
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/maintainMessages`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查询后台状态
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemStatusUsingGET: async (
      xGdcUserid?: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/system/status`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (xGdcUserid !== undefined && xGdcUserid !== null) {
        localVarHeaderParameter["x-gdc-userid"] = String(xGdcUserid);
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查询后台状态
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemStatusV2UsingGET: async (
      xGdcUserid?: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/v2/system/status`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (xGdcUserid !== undefined && xGdcUserid !== null) {
        localVarHeaderParameter["x-gdc-userid"] = String(xGdcUserid);
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 检查是否被block
     * @param {string} xGdcAppversion x-gdc-appversion
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isAppUsableUsingGET: async (
      xGdcAppversion: string,
      xGdcUserid?: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'xGdcAppversion' is not null or undefined
      if (xGdcAppversion === null || xGdcAppversion === undefined) {
        throw new RequiredError(
          "xGdcAppversion",
          "Required parameter xGdcAppversion was null or undefined when calling isAppUsableUsingGET.",
        );
      }
      const localVarPath = `/usable`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (xGdcAppversion !== undefined && xGdcAppversion !== null) {
        localVarHeaderParameter["x-gdc-appversion"] = String(xGdcAppversion);
      }

      if (xGdcUserid !== undefined && xGdcUserid !== null) {
        localVarHeaderParameter["x-gdc-userid"] = String(xGdcUserid);
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 结束后台维护状态
     * @param {number} [endTime] endTime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMaintenanceUsingPOST: async (
      endTime?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/maintain/post`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (endTime !== undefined) {
        localVarQueryParameter.endTime = endTime;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 即将进入维护状态
     * @param {MaintainInfo} maintainInfo maintainInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    preMaintainUsingPOST: async (
      maintainInfo: MaintainInfo,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'maintainInfo' is not null or undefined
      if (maintainInfo === null || maintainInfo === undefined) {
        throw new RequiredError(
          "maintainInfo",
          "Required parameter maintainInfo was null or undefined when calling preMaintainUsingPOST.",
        );
      }
      const localVarPath = `/maintain/pre`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof maintainInfo !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(maintainInfo !== undefined ? maintainInfo : {})
        : maintainInfo || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 进入后台维护状态
     * @param {MaintainInfo} maintainInfo maintainInfo
     * @param {boolean} [backupDB] backupDB
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    underMaintenanceUsingPOST: async (
      maintainInfo: MaintainInfo,
      backupDB?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'maintainInfo' is not null or undefined
      if (maintainInfo === null || maintainInfo === undefined) {
        throw new RequiredError(
          "maintainInfo",
          "Required parameter maintainInfo was null or undefined when calling underMaintenanceUsingPOST.",
        );
      }
      const localVarPath = `/maintain`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (backupDB !== undefined) {
        localVarQueryParameter.backupDB = backupDB;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof maintainInfo !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(maintainInfo !== undefined ? maintainInfo : {})
        : maintainInfo || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查询当前版本是否可用
     * @param {string} appVersion appVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyAppVersionUsingGET: async (
      appVersion: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'appVersion' is not null or undefined
      if (appVersion === null || appVersion === undefined) {
        throw new RequiredError(
          "appVersion",
          "Required parameter appVersion was null or undefined when calling verifyAppVersionUsingGET.",
        );
      }
      const localVarPath = `/appVersions/{appVersion}/usable`.replace(
        `{${"appVersion"}}`,
        encodeURIComponent(String(appVersion)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MaintainApi - functional programming interface
 * @export
 */
export const MaintainApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 添加一个可用版本号
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addAppVersionUsingPOST(
      version: string,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>
    > {
      const localVarAxiosArgs = await MaintainApiAxiosParamCreator(
        configuration,
      ).addAppVersionUsingPOST(version, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 创建维护文案
     * @param {MaintainNotice} maintainNotice maintainNotice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMaintainMessageUsingPOST(
      maintainNotice: MaintainNotice,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>
    > {
      const localVarAxiosArgs = await MaintainApiAxiosParamCreator(
        configuration,
      ).createMaintainMessageUsingPOST(maintainNotice, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 恢复正常运行状态
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async endMaintenanceUsingPOST(
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responsestring>
    > {
      const localVarAxiosArgs = await MaintainApiAxiosParamCreator(
        configuration,
      ).endMaintenanceUsingPOST(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 查询所有可用版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAppVersionsUsingGET(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseListstring>
    > {
      const localVarAxiosArgs = await MaintainApiAxiosParamCreator(
        configuration,
      ).getAppVersionsUsingGET(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 查询maintain相关配置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMaintainConfigUsingGET(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseMaintainConfig>
    > {
      const localVarAxiosArgs = await MaintainApiAxiosParamCreator(
        configuration,
      ).getMaintainConfigUsingGET(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 查询文案
     * @param {'APP' | 'WEB' | 'PANEL' | 'COMMON'} maintainClient maintainClient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMaintainMessageUsingGET(
      maintainClient: "APP" | "WEB" | "PANEL" | "COMMON",
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responsestring>
    > {
      const localVarAxiosArgs = await MaintainApiAxiosParamCreator(
        configuration,
      ).getMaintainMessageUsingGET(maintainClient, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 查询所有文案
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMaintainMessagesUsingGET(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseListMaintainNotice>
    > {
      const localVarAxiosArgs = await MaintainApiAxiosParamCreator(
        configuration,
      ).getMaintainMessagesUsingGET(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 查询后台状态
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSystemStatusUsingGET(
      xGdcUserid?: string,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responsestring>
    > {
      const localVarAxiosArgs = await MaintainApiAxiosParamCreator(
        configuration,
      ).getSystemStatusUsingGET(xGdcUserid, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 查询后台状态
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSystemStatusV2UsingGET(
      xGdcUserid?: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseCurrentSystemStatus>
    > {
      const localVarAxiosArgs = await MaintainApiAxiosParamCreator(
        configuration,
      ).getSystemStatusV2UsingGET(xGdcUserid, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 检查是否被block
     * @param {string} xGdcAppversion x-gdc-appversion
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async isAppUsableUsingGET(
      xGdcAppversion: string,
      xGdcUserid?: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseSystemStatus>
    > {
      const localVarAxiosArgs = await MaintainApiAxiosParamCreator(
        configuration,
      ).isAppUsableUsingGET(xGdcAppversion, xGdcUserid, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 结束后台维护状态
     * @param {number} [endTime] endTime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postMaintenanceUsingPOST(
      endTime?: number,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responsestring>
    > {
      const localVarAxiosArgs = await MaintainApiAxiosParamCreator(
        configuration,
      ).postMaintenanceUsingPOST(endTime, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 即将进入维护状态
     * @param {MaintainInfo} maintainInfo maintainInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async preMaintainUsingPOST(
      maintainInfo: MaintainInfo,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responsestring>
    > {
      const localVarAxiosArgs = await MaintainApiAxiosParamCreator(
        configuration,
      ).preMaintainUsingPOST(maintainInfo, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 进入后台维护状态
     * @param {MaintainInfo} maintainInfo maintainInfo
     * @param {boolean} [backupDB] backupDB
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async underMaintenanceUsingPOST(
      maintainInfo: MaintainInfo,
      backupDB?: boolean,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responsestring>
    > {
      const localVarAxiosArgs = await MaintainApiAxiosParamCreator(
        configuration,
      ).underMaintenanceUsingPOST(maintainInfo, backupDB, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 查询当前版本是否可用
     * @param {string} appVersion appVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async verifyAppVersionUsingGET(
      appVersion: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseAppVersionStatus>
    > {
      const localVarAxiosArgs = await MaintainApiAxiosParamCreator(
        configuration,
      ).verifyAppVersionUsingGET(appVersion, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * MaintainApi - factory interface
 * @export
 */
export const MaintainApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @summary 添加一个可用版本号
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAppVersionUsingPOST(
      version: string,
      options?: any,
    ): AxiosPromise<ResponseVoid> {
      return MaintainApiFp(configuration)
        .addAppVersionUsingPOST(version, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 创建维护文案
     * @param {MaintainNotice} maintainNotice maintainNotice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMaintainMessageUsingPOST(
      maintainNotice: MaintainNotice,
      options?: any,
    ): AxiosPromise<ResponseVoid> {
      return MaintainApiFp(configuration)
        .createMaintainMessageUsingPOST(maintainNotice, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 恢复正常运行状态
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endMaintenanceUsingPOST(options?: any): AxiosPromise<Responsestring> {
      return MaintainApiFp(configuration)
        .endMaintenanceUsingPOST(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查询所有可用版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppVersionsUsingGET(options?: any): AxiosPromise<ResponseListstring> {
      return MaintainApiFp(configuration)
        .getAppVersionsUsingGET(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查询maintain相关配置
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMaintainConfigUsingGET(
      options?: any,
    ): AxiosPromise<ResponseMaintainConfig> {
      return MaintainApiFp(configuration)
        .getMaintainConfigUsingGET(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查询文案
     * @param {'APP' | 'WEB' | 'PANEL' | 'COMMON'} maintainClient maintainClient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMaintainMessageUsingGET(
      maintainClient: "APP" | "WEB" | "PANEL" | "COMMON",
      options?: any,
    ): AxiosPromise<Responsestring> {
      return MaintainApiFp(configuration)
        .getMaintainMessageUsingGET(maintainClient, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查询所有文案
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMaintainMessagesUsingGET(
      options?: any,
    ): AxiosPromise<ResponseListMaintainNotice> {
      return MaintainApiFp(configuration)
        .getMaintainMessagesUsingGET(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查询后台状态
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemStatusUsingGET(
      xGdcUserid?: string,
      options?: any,
    ): AxiosPromise<Responsestring> {
      return MaintainApiFp(configuration)
        .getSystemStatusUsingGET(xGdcUserid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查询后台状态
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSystemStatusV2UsingGET(
      xGdcUserid?: string,
      options?: any,
    ): AxiosPromise<ResponseCurrentSystemStatus> {
      return MaintainApiFp(configuration)
        .getSystemStatusV2UsingGET(xGdcUserid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 检查是否被block
     * @param {string} xGdcAppversion x-gdc-appversion
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isAppUsableUsingGET(
      xGdcAppversion: string,
      xGdcUserid?: string,
      options?: any,
    ): AxiosPromise<ResponseSystemStatus> {
      return MaintainApiFp(configuration)
        .isAppUsableUsingGET(xGdcAppversion, xGdcUserid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 结束后台维护状态
     * @param {number} [endTime] endTime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMaintenanceUsingPOST(
      endTime?: number,
      options?: any,
    ): AxiosPromise<Responsestring> {
      return MaintainApiFp(configuration)
        .postMaintenanceUsingPOST(endTime, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 即将进入维护状态
     * @param {MaintainInfo} maintainInfo maintainInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    preMaintainUsingPOST(
      maintainInfo: MaintainInfo,
      options?: any,
    ): AxiosPromise<Responsestring> {
      return MaintainApiFp(configuration)
        .preMaintainUsingPOST(maintainInfo, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 进入后台维护状态
     * @param {MaintainInfo} maintainInfo maintainInfo
     * @param {boolean} [backupDB] backupDB
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    underMaintenanceUsingPOST(
      maintainInfo: MaintainInfo,
      backupDB?: boolean,
      options?: any,
    ): AxiosPromise<Responsestring> {
      return MaintainApiFp(configuration)
        .underMaintenanceUsingPOST(maintainInfo, backupDB, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查询当前版本是否可用
     * @param {string} appVersion appVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyAppVersionUsingGET(
      appVersion: string,
      options?: any,
    ): AxiosPromise<ResponseAppVersionStatus> {
      return MaintainApiFp(configuration)
        .verifyAppVersionUsingGET(appVersion, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MaintainApi - object-oriented interface
 * @export
 * @class MaintainApi
 * @extends {BaseAPI}
 */
export class MaintainApi extends BaseAPI {
  /**
   *
   * @summary 添加一个可用版本号
   * @param {string} version version
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintainApi
   */
  public addAppVersionUsingPOST(version: string, options?: any) {
    return MaintainApiFp(this.configuration)
      .addAppVersionUsingPOST(version, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 创建维护文案
   * @param {MaintainNotice} maintainNotice maintainNotice
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintainApi
   */
  public createMaintainMessageUsingPOST(
    maintainNotice: MaintainNotice,
    options?: any,
  ) {
    return MaintainApiFp(this.configuration)
      .createMaintainMessageUsingPOST(maintainNotice, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 恢复正常运行状态
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintainApi
   */
  public endMaintenanceUsingPOST(options?: any) {
    return MaintainApiFp(this.configuration)
      .endMaintenanceUsingPOST(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查询所有可用版本
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintainApi
   */
  public getAppVersionsUsingGET(options?: any) {
    return MaintainApiFp(this.configuration)
      .getAppVersionsUsingGET(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查询maintain相关配置
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintainApi
   */
  public getMaintainConfigUsingGET(options?: any) {
    return MaintainApiFp(this.configuration)
      .getMaintainConfigUsingGET(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查询文案
   * @param {'APP' | 'WEB' | 'PANEL' | 'COMMON'} maintainClient maintainClient
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintainApi
   */
  public getMaintainMessageUsingGET(
    maintainClient: "APP" | "WEB" | "PANEL" | "COMMON",
    options?: any,
  ) {
    return MaintainApiFp(this.configuration)
      .getMaintainMessageUsingGET(maintainClient, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查询所有文案
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintainApi
   */
  public getMaintainMessagesUsingGET(options?: any) {
    return MaintainApiFp(this.configuration)
      .getMaintainMessagesUsingGET(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查询后台状态
   * @param {string} [xGdcUserid] x-gdc-userid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintainApi
   */
  public getSystemStatusUsingGET(xGdcUserid?: string, options?: any) {
    return MaintainApiFp(this.configuration)
      .getSystemStatusUsingGET(xGdcUserid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查询后台状态
   * @param {string} [xGdcUserid] x-gdc-userid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintainApi
   */
  public getSystemStatusV2UsingGET(xGdcUserid?: string, options?: any) {
    return MaintainApiFp(this.configuration)
      .getSystemStatusV2UsingGET(xGdcUserid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 检查是否被block
   * @param {string} xGdcAppversion x-gdc-appversion
   * @param {string} [xGdcUserid] x-gdc-userid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintainApi
   */
  public isAppUsableUsingGET(
    xGdcAppversion: string,
    xGdcUserid?: string,
    options?: any,
  ) {
    return MaintainApiFp(this.configuration)
      .isAppUsableUsingGET(xGdcAppversion, xGdcUserid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 结束后台维护状态
   * @param {number} [endTime] endTime
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintainApi
   */
  public postMaintenanceUsingPOST(endTime?: number, options?: any) {
    return MaintainApiFp(this.configuration)
      .postMaintenanceUsingPOST(endTime, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 即将进入维护状态
   * @param {MaintainInfo} maintainInfo maintainInfo
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintainApi
   */
  public preMaintainUsingPOST(maintainInfo: MaintainInfo, options?: any) {
    return MaintainApiFp(this.configuration)
      .preMaintainUsingPOST(maintainInfo, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 进入后台维护状态
   * @param {MaintainInfo} maintainInfo maintainInfo
   * @param {boolean} [backupDB] backupDB
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintainApi
   */
  public underMaintenanceUsingPOST(
    maintainInfo: MaintainInfo,
    backupDB?: boolean,
    options?: any,
  ) {
    return MaintainApiFp(this.configuration)
      .underMaintenanceUsingPOST(maintainInfo, backupDB, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查询当前版本是否可用
   * @param {string} appVersion appVersion
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MaintainApi
   */
  public verifyAppVersionUsingGET(appVersion: string, options?: any) {
    return MaintainApiFp(this.configuration)
      .verifyAppVersionUsingGET(appVersion, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

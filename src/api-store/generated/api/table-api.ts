// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddRowDataDto } from '../model';
// @ts-ignore
import { BatchUpdateDataCondition } from '../model';
// @ts-ignore
import { DeleteRowDataDto } from '../model';
// @ts-ignore
import { LoadDataComplexCondition } from '../model';
// @ts-ignore
import { LoadDataCondition } from '../model';
// @ts-ignore
import { PartitionCondition } from '../model';
// @ts-ignore
import { ResponseListRowData } from '../model';
// @ts-ignore
import { ResponseListUpdateResult } from '../model';
// @ts-ignore
import { ResponseRowsBean } from '../model';
// @ts-ignore
import { ResponseUpdateResult } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
// @ts-ignore
import { RowKeysCondition } from '../model';
// @ts-ignore
import { UpdateDataCondition } from '../model';
/**
 * TableApi - axios parameter creator
 * @export
 */
export const TableApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 批量添加行数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {AddRowDataDto} dataDto dataDto
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRows4BatchUsingPOST: async (name: string, namespace: string, dataDto: AddRowDataDto, xGdcAppKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling addRows4BatchUsingPOST.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling addRows4BatchUsingPOST.');
            }
            // verify required parameter 'dataDto' is not null or undefined
            if (dataDto === null || dataDto === undefined) {
                throw new RequiredError('dataDto','Required parameter dataDto was null or undefined when calling addRows4BatchUsingPOST.');
            }
            const localVarPath = `/thirdtable/table/{namespace}/{name}/row/batch`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcAppKey !== undefined && xGdcAppKey !== null) {
                localVarHeaderParameter['x_gdc_app_key'] = String(xGdcAppKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dataDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dataDto !== undefined ? dataDto : {}) : (dataDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 添加行数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {AddRowDataDto} dataDto dataDto
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRowsUsingPOST: async (name: string, namespace: string, dataDto: AddRowDataDto, xGdcAppKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling addRowsUsingPOST.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling addRowsUsingPOST.');
            }
            // verify required parameter 'dataDto' is not null or undefined
            if (dataDto === null || dataDto === undefined) {
                throw new RequiredError('dataDto','Required parameter dataDto was null or undefined when calling addRowsUsingPOST.');
            }
            const localVarPath = `/thirdtable/table/{namespace}/{name}/row`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcAppKey !== undefined && xGdcAppKey !== null) {
                localVarHeaderParameter['x_gdc_app_key'] = String(xGdcAppKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dataDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dataDto !== undefined ? dataDto : {}) : (dataDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建表
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTableUsingPOST: async (name: string, namespace: string, owner?: string, xGdcAppKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling createTableUsingPOST.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling createTableUsingPOST.');
            }
            const localVarPath = `/thirdtable/table/{namespace}/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (xGdcAppKey !== undefined && xGdcAppKey !== null) {
                localVarHeaderParameter['x_gdc_app_key'] = String(xGdcAppKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 清空表
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllRowsUsingDELETE: async (name: string, namespace: string, owner?: string, xGdcAppKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteAllRowsUsingDELETE.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling deleteAllRowsUsingDELETE.');
            }
            const localVarPath = `/thirdtable/table/{namespace}/{name}/empty`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (xGdcAppKey !== undefined && xGdcAppKey !== null) {
                localVarHeaderParameter['x_gdc_app_key'] = String(xGdcAppKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {DeleteRowDataDto} dataDto dataDto
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRowsUsingDELETE: async (name: string, namespace: string, dataDto: DeleteRowDataDto, xGdcAppKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteRowsUsingDELETE.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling deleteRowsUsingDELETE.');
            }
            // verify required parameter 'dataDto' is not null or undefined
            if (dataDto === null || dataDto === undefined) {
                throw new RequiredError('dataDto','Required parameter dataDto was null or undefined when calling deleteRowsUsingDELETE.');
            }
            const localVarPath = `/thirdtable/table/{namespace}/{name}/row`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcAppKey !== undefined && xGdcAppKey !== null) {
                localVarHeaderParameter['x_gdc_app_key'] = String(xGdcAppKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dataDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dataDto !== undefined ? dataDto : {}) : (dataDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除表
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTableUsingDELETE: async (name: string, namespace: string, owner?: string, xGdcAppKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteTableUsingDELETE.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling deleteTableUsingDELETE.');
            }
            const localVarPath = `/thirdtable/table/{namespace}/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (xGdcAppKey !== undefined && xGdcAppKey !== null) {
                localVarHeaderParameter['x_gdc_app_key'] = String(xGdcAppKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据partition查询数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {PartitionCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadData4PartitionUsingPOST: async (name: string, namespace: string, condition: PartitionCondition, xGdcAppKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling loadData4PartitionUsingPOST.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling loadData4PartitionUsingPOST.');
            }
            // verify required parameter 'condition' is not null or undefined
            if (condition === null || condition === undefined) {
                throw new RequiredError('condition','Required parameter condition was null or undefined when calling loadData4PartitionUsingPOST.');
            }
            const localVarPath = `/thirdtable/table/{namespace}/{name}/partition`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcAppKey !== undefined && xGdcAppKey !== null) {
                localVarHeaderParameter['x_gdc_app_key'] = String(xGdcAppKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof condition !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(condition !== undefined ? condition : {}) : (condition || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据rowkey集合条件查询数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {RowKeysCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadData4RowKeysUsingPOST: async (name: string, namespace: string, condition: RowKeysCondition, xGdcAppKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling loadData4RowKeysUsingPOST.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling loadData4RowKeysUsingPOST.');
            }
            // verify required parameter 'condition' is not null or undefined
            if (condition === null || condition === undefined) {
                throw new RequiredError('condition','Required parameter condition was null or undefined when calling loadData4RowKeysUsingPOST.');
            }
            const localVarPath = `/thirdtable/table/{namespace}/{name}/rowkeys`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcAppKey !== undefined && xGdcAppKey !== null) {
                localVarHeaderParameter['x_gdc_app_key'] = String(xGdcAppKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof condition !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(condition !== undefined ? condition : {}) : (condition || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 使用复杂条件查询数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {LoadDataComplexCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadDataByComplexConditionUsingPOST: async (name: string, namespace: string, condition: LoadDataComplexCondition, xGdcAppKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling loadDataByComplexConditionUsingPOST.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling loadDataByComplexConditionUsingPOST.');
            }
            // verify required parameter 'condition' is not null or undefined
            if (condition === null || condition === undefined) {
                throw new RequiredError('condition','Required parameter condition was null or undefined when calling loadDataByComplexConditionUsingPOST.');
            }
            const localVarPath = `/thirdtable/table/{namespace}/{name}/data/complex`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcAppKey !== undefined && xGdcAppKey !== null) {
                localVarHeaderParameter['x_gdc_app_key'] = String(xGdcAppKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof condition !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(condition !== undefined ? condition : {}) : (condition || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据条件查询数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {LoadDataCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadDataUsingPOST: async (name: string, namespace: string, condition: LoadDataCondition, xGdcAppKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling loadDataUsingPOST.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling loadDataUsingPOST.');
            }
            // verify required parameter 'condition' is not null or undefined
            if (condition === null || condition === undefined) {
                throw new RequiredError('condition','Required parameter condition was null or undefined when calling loadDataUsingPOST.');
            }
            const localVarPath = `/thirdtable/table/{namespace}/{name}/data`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcAppKey !== undefined && xGdcAppKey !== null) {
                localVarHeaderParameter['x_gdc_app_key'] = String(xGdcAppKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof condition !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(condition !== undefined ? condition : {}) : (condition || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量灌入测试数据
         * @param {number} count 数据大小
         * @param {number} fieldSize fieldSize
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pouredTestDataUsingPUT: async (count: number, fieldSize: number, name: string, namespace: string, version: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling pouredTestDataUsingPUT.');
            }
            // verify required parameter 'fieldSize' is not null or undefined
            if (fieldSize === null || fieldSize === undefined) {
                throw new RequiredError('fieldSize','Required parameter fieldSize was null or undefined when calling pouredTestDataUsingPUT.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling pouredTestDataUsingPUT.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling pouredTestDataUsingPUT.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling pouredTestDataUsingPUT.');
            }
            const localVarPath = `/thirdtable/table/{namespace}/{name}/poured/data/batch`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (fieldSize !== undefined) {
                localVarQueryParameter['fieldSize'] = fieldSize;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量更新行数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {string} owner 所有者
         * @param {BatchUpdateDataCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateField4BatchUsingPUT: async (name: string, namespace: string, owner: string, condition: BatchUpdateDataCondition, xGdcAppKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling updateField4BatchUsingPUT.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling updateField4BatchUsingPUT.');
            }
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling updateField4BatchUsingPUT.');
            }
            // verify required parameter 'condition' is not null or undefined
            if (condition === null || condition === undefined) {
                throw new RequiredError('condition','Required parameter condition was null or undefined when calling updateField4BatchUsingPUT.');
            }
            const localVarPath = `/thirdtable/table/{namespace}/{name}/data/batch`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (xGdcAppKey !== undefined && xGdcAppKey !== null) {
                localVarHeaderParameter['x_gdc_app_key'] = String(xGdcAppKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof condition !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(condition !== undefined ? condition : {}) : (condition || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新行数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {UpdateDataCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFieldUsingPUT: async (name: string, namespace: string, condition: UpdateDataCondition, xGdcAppKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling updateFieldUsingPUT.');
            }
            // verify required parameter 'namespace' is not null or undefined
            if (namespace === null || namespace === undefined) {
                throw new RequiredError('namespace','Required parameter namespace was null or undefined when calling updateFieldUsingPUT.');
            }
            // verify required parameter 'condition' is not null or undefined
            if (condition === null || condition === undefined) {
                throw new RequiredError('condition','Required parameter condition was null or undefined when calling updateFieldUsingPUT.');
            }
            const localVarPath = `/thirdtable/table/{namespace}/{name}/data`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"namespace"}}`, encodeURIComponent(String(namespace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcAppKey !== undefined && xGdcAppKey !== null) {
                localVarHeaderParameter['x_gdc_app_key'] = String(xGdcAppKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof condition !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(condition !== undefined ? condition : {}) : (condition || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TableApi - functional programming interface
 * @export
 */
export const TableApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 批量添加行数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {AddRowDataDto} dataDto dataDto
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRows4BatchUsingPOST(name: string, namespace: string, dataDto: AddRowDataDto, xGdcAppKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListRowData>> {
            const localVarAxiosArgs = await TableApiAxiosParamCreator(configuration).addRows4BatchUsingPOST(name, namespace, dataDto, xGdcAppKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 添加行数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {AddRowDataDto} dataDto dataDto
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRowsUsingPOST(name: string, namespace: string, dataDto: AddRowDataDto, xGdcAppKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListRowData>> {
            const localVarAxiosArgs = await TableApiAxiosParamCreator(configuration).addRowsUsingPOST(name, namespace, dataDto, xGdcAppKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建表
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTableUsingPOST(name: string, namespace: string, owner?: string, xGdcAppKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await TableApiAxiosParamCreator(configuration).createTableUsingPOST(name, namespace, owner, xGdcAppKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 清空表
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllRowsUsingDELETE(name: string, namespace: string, owner?: string, xGdcAppKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await TableApiAxiosParamCreator(configuration).deleteAllRowsUsingDELETE(name, namespace, owner, xGdcAppKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {DeleteRowDataDto} dataDto dataDto
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRowsUsingDELETE(name: string, namespace: string, dataDto: DeleteRowDataDto, xGdcAppKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await TableApiAxiosParamCreator(configuration).deleteRowsUsingDELETE(name, namespace, dataDto, xGdcAppKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除表
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTableUsingDELETE(name: string, namespace: string, owner?: string, xGdcAppKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await TableApiAxiosParamCreator(configuration).deleteTableUsingDELETE(name, namespace, owner, xGdcAppKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据partition查询数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {PartitionCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadData4PartitionUsingPOST(name: string, namespace: string, condition: PartitionCondition, xGdcAppKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRowsBean>> {
            const localVarAxiosArgs = await TableApiAxiosParamCreator(configuration).loadData4PartitionUsingPOST(name, namespace, condition, xGdcAppKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据rowkey集合条件查询数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {RowKeysCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadData4RowKeysUsingPOST(name: string, namespace: string, condition: RowKeysCondition, xGdcAppKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRowsBean>> {
            const localVarAxiosArgs = await TableApiAxiosParamCreator(configuration).loadData4RowKeysUsingPOST(name, namespace, condition, xGdcAppKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 使用复杂条件查询数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {LoadDataComplexCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadDataByComplexConditionUsingPOST(name: string, namespace: string, condition: LoadDataComplexCondition, xGdcAppKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRowsBean>> {
            const localVarAxiosArgs = await TableApiAxiosParamCreator(configuration).loadDataByComplexConditionUsingPOST(name, namespace, condition, xGdcAppKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据条件查询数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {LoadDataCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadDataUsingPOST(name: string, namespace: string, condition: LoadDataCondition, xGdcAppKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRowsBean>> {
            const localVarAxiosArgs = await TableApiAxiosParamCreator(configuration).loadDataUsingPOST(name, namespace, condition, xGdcAppKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量灌入测试数据
         * @param {number} count 数据大小
         * @param {number} fieldSize fieldSize
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pouredTestDataUsingPUT(count: number, fieldSize: number, name: string, namespace: string, version: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await TableApiAxiosParamCreator(configuration).pouredTestDataUsingPUT(count, fieldSize, name, namespace, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量更新行数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {string} owner 所有者
         * @param {BatchUpdateDataCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateField4BatchUsingPUT(name: string, namespace: string, owner: string, condition: BatchUpdateDataCondition, xGdcAppKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListUpdateResult>> {
            const localVarAxiosArgs = await TableApiAxiosParamCreator(configuration).updateField4BatchUsingPUT(name, namespace, owner, condition, xGdcAppKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新行数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {UpdateDataCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFieldUsingPUT(name: string, namespace: string, condition: UpdateDataCondition, xGdcAppKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUpdateResult>> {
            const localVarAxiosArgs = await TableApiAxiosParamCreator(configuration).updateFieldUsingPUT(name, namespace, condition, xGdcAppKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TableApi - factory interface
 * @export
 */
export const TableApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 批量添加行数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {AddRowDataDto} dataDto dataDto
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRows4BatchUsingPOST(name: string, namespace: string, dataDto: AddRowDataDto, xGdcAppKey?: string, options?: any): AxiosPromise<ResponseListRowData> {
            return TableApiFp(configuration).addRows4BatchUsingPOST(name, namespace, dataDto, xGdcAppKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 添加行数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {AddRowDataDto} dataDto dataDto
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRowsUsingPOST(name: string, namespace: string, dataDto: AddRowDataDto, xGdcAppKey?: string, options?: any): AxiosPromise<ResponseListRowData> {
            return TableApiFp(configuration).addRowsUsingPOST(name, namespace, dataDto, xGdcAppKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建表
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTableUsingPOST(name: string, namespace: string, owner?: string, xGdcAppKey?: string, options?: any): AxiosPromise<ResponseVoid> {
            return TableApiFp(configuration).createTableUsingPOST(name, namespace, owner, xGdcAppKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 清空表
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllRowsUsingDELETE(name: string, namespace: string, owner?: string, xGdcAppKey?: string, options?: any): AxiosPromise<ResponseVoid> {
            return TableApiFp(configuration).deleteAllRowsUsingDELETE(name, namespace, owner, xGdcAppKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {DeleteRowDataDto} dataDto dataDto
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRowsUsingDELETE(name: string, namespace: string, dataDto: DeleteRowDataDto, xGdcAppKey?: string, options?: any): AxiosPromise<ResponseVoid> {
            return TableApiFp(configuration).deleteRowsUsingDELETE(name, namespace, dataDto, xGdcAppKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除表
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTableUsingDELETE(name: string, namespace: string, owner?: string, xGdcAppKey?: string, options?: any): AxiosPromise<ResponseVoid> {
            return TableApiFp(configuration).deleteTableUsingDELETE(name, namespace, owner, xGdcAppKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据partition查询数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {PartitionCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadData4PartitionUsingPOST(name: string, namespace: string, condition: PartitionCondition, xGdcAppKey?: string, options?: any): AxiosPromise<ResponseRowsBean> {
            return TableApiFp(configuration).loadData4PartitionUsingPOST(name, namespace, condition, xGdcAppKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据rowkey集合条件查询数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {RowKeysCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadData4RowKeysUsingPOST(name: string, namespace: string, condition: RowKeysCondition, xGdcAppKey?: string, options?: any): AxiosPromise<ResponseRowsBean> {
            return TableApiFp(configuration).loadData4RowKeysUsingPOST(name, namespace, condition, xGdcAppKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 使用复杂条件查询数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {LoadDataComplexCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadDataByComplexConditionUsingPOST(name: string, namespace: string, condition: LoadDataComplexCondition, xGdcAppKey?: string, options?: any): AxiosPromise<ResponseRowsBean> {
            return TableApiFp(configuration).loadDataByComplexConditionUsingPOST(name, namespace, condition, xGdcAppKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据条件查询数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {LoadDataCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadDataUsingPOST(name: string, namespace: string, condition: LoadDataCondition, xGdcAppKey?: string, options?: any): AxiosPromise<ResponseRowsBean> {
            return TableApiFp(configuration).loadDataUsingPOST(name, namespace, condition, xGdcAppKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量灌入测试数据
         * @param {number} count 数据大小
         * @param {number} fieldSize fieldSize
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pouredTestDataUsingPUT(count: number, fieldSize: number, name: string, namespace: string, version: number, options?: any): AxiosPromise<ResponseVoid> {
            return TableApiFp(configuration).pouredTestDataUsingPUT(count, fieldSize, name, namespace, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量更新行数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {string} owner 所有者
         * @param {BatchUpdateDataCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateField4BatchUsingPUT(name: string, namespace: string, owner: string, condition: BatchUpdateDataCondition, xGdcAppKey?: string, options?: any): AxiosPromise<ResponseListUpdateResult> {
            return TableApiFp(configuration).updateField4BatchUsingPUT(name, namespace, owner, condition, xGdcAppKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新行数据
         * @param {string} name 表名称
         * @param {string} namespace 名称空间
         * @param {UpdateDataCondition} condition condition
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFieldUsingPUT(name: string, namespace: string, condition: UpdateDataCondition, xGdcAppKey?: string, options?: any): AxiosPromise<ResponseUpdateResult> {
            return TableApiFp(configuration).updateFieldUsingPUT(name, namespace, condition, xGdcAppKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TableApi - object-oriented interface
 * @export
 * @class TableApi
 * @extends {BaseAPI}
 */
export class TableApi extends BaseAPI {
    /**
     * 
     * @summary 批量添加行数据
     * @param {string} name 表名称
     * @param {string} namespace 名称空间
     * @param {AddRowDataDto} dataDto dataDto
     * @param {string} [xGdcAppKey] x_gdc_app_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public addRows4BatchUsingPOST(name: string, namespace: string, dataDto: AddRowDataDto, xGdcAppKey?: string, options?: any) {
        return TableApiFp(this.configuration).addRows4BatchUsingPOST(name, namespace, dataDto, xGdcAppKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 添加行数据
     * @param {string} name 表名称
     * @param {string} namespace 名称空间
     * @param {AddRowDataDto} dataDto dataDto
     * @param {string} [xGdcAppKey] x_gdc_app_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public addRowsUsingPOST(name: string, namespace: string, dataDto: AddRowDataDto, xGdcAppKey?: string, options?: any) {
        return TableApiFp(this.configuration).addRowsUsingPOST(name, namespace, dataDto, xGdcAppKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建表
     * @param {string} name 表名称
     * @param {string} namespace 名称空间
     * @param {string} [owner] 所有者
     * @param {string} [xGdcAppKey] x_gdc_app_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public createTableUsingPOST(name: string, namespace: string, owner?: string, xGdcAppKey?: string, options?: any) {
        return TableApiFp(this.configuration).createTableUsingPOST(name, namespace, owner, xGdcAppKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 清空表
     * @param {string} name 表名称
     * @param {string} namespace 名称空间
     * @param {string} [owner] 所有者
     * @param {string} [xGdcAppKey] x_gdc_app_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public deleteAllRowsUsingDELETE(name: string, namespace: string, owner?: string, xGdcAppKey?: string, options?: any) {
        return TableApiFp(this.configuration).deleteAllRowsUsingDELETE(name, namespace, owner, xGdcAppKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除数据
     * @param {string} name 表名称
     * @param {string} namespace 名称空间
     * @param {DeleteRowDataDto} dataDto dataDto
     * @param {string} [xGdcAppKey] x_gdc_app_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public deleteRowsUsingDELETE(name: string, namespace: string, dataDto: DeleteRowDataDto, xGdcAppKey?: string, options?: any) {
        return TableApiFp(this.configuration).deleteRowsUsingDELETE(name, namespace, dataDto, xGdcAppKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除表
     * @param {string} name 表名称
     * @param {string} namespace 名称空间
     * @param {string} [owner] 所有者
     * @param {string} [xGdcAppKey] x_gdc_app_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public deleteTableUsingDELETE(name: string, namespace: string, owner?: string, xGdcAppKey?: string, options?: any) {
        return TableApiFp(this.configuration).deleteTableUsingDELETE(name, namespace, owner, xGdcAppKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据partition查询数据
     * @param {string} name 表名称
     * @param {string} namespace 名称空间
     * @param {PartitionCondition} condition condition
     * @param {string} [xGdcAppKey] x_gdc_app_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public loadData4PartitionUsingPOST(name: string, namespace: string, condition: PartitionCondition, xGdcAppKey?: string, options?: any) {
        return TableApiFp(this.configuration).loadData4PartitionUsingPOST(name, namespace, condition, xGdcAppKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据rowkey集合条件查询数据
     * @param {string} name 表名称
     * @param {string} namespace 名称空间
     * @param {RowKeysCondition} condition condition
     * @param {string} [xGdcAppKey] x_gdc_app_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public loadData4RowKeysUsingPOST(name: string, namespace: string, condition: RowKeysCondition, xGdcAppKey?: string, options?: any) {
        return TableApiFp(this.configuration).loadData4RowKeysUsingPOST(name, namespace, condition, xGdcAppKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 使用复杂条件查询数据
     * @param {string} name 表名称
     * @param {string} namespace 名称空间
     * @param {LoadDataComplexCondition} condition condition
     * @param {string} [xGdcAppKey] x_gdc_app_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public loadDataByComplexConditionUsingPOST(name: string, namespace: string, condition: LoadDataComplexCondition, xGdcAppKey?: string, options?: any) {
        return TableApiFp(this.configuration).loadDataByComplexConditionUsingPOST(name, namespace, condition, xGdcAppKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据条件查询数据
     * @param {string} name 表名称
     * @param {string} namespace 名称空间
     * @param {LoadDataCondition} condition condition
     * @param {string} [xGdcAppKey] x_gdc_app_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public loadDataUsingPOST(name: string, namespace: string, condition: LoadDataCondition, xGdcAppKey?: string, options?: any) {
        return TableApiFp(this.configuration).loadDataUsingPOST(name, namespace, condition, xGdcAppKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量灌入测试数据
     * @param {number} count 数据大小
     * @param {number} fieldSize fieldSize
     * @param {string} name 表名称
     * @param {string} namespace 名称空间
     * @param {number} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public pouredTestDataUsingPUT(count: number, fieldSize: number, name: string, namespace: string, version: number, options?: any) {
        return TableApiFp(this.configuration).pouredTestDataUsingPUT(count, fieldSize, name, namespace, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量更新行数据
     * @param {string} name 表名称
     * @param {string} namespace 名称空间
     * @param {string} owner 所有者
     * @param {BatchUpdateDataCondition} condition condition
     * @param {string} [xGdcAppKey] x_gdc_app_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public updateField4BatchUsingPUT(name: string, namespace: string, owner: string, condition: BatchUpdateDataCondition, xGdcAppKey?: string, options?: any) {
        return TableApiFp(this.configuration).updateField4BatchUsingPUT(name, namespace, owner, condition, xGdcAppKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新行数据
     * @param {string} name 表名称
     * @param {string} namespace 名称空间
     * @param {UpdateDataCondition} condition condition
     * @param {string} [xGdcAppKey] x_gdc_app_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public updateFieldUsingPUT(name: string, namespace: string, condition: UpdateDataCondition, xGdcAppKey?: string, options?: any) {
        return TableApiFp(this.configuration).updateFieldUsingPUT(name, namespace, condition, xGdcAppKey, options).then((request) => request(this.axios, this.basePath));
    }

}

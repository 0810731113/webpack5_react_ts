// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResponseListstring } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
// @ts-ignore
import { Responseboolean } from '../model';
/**
 * NamespaceApi - axios parameter creator
 * @export
 */
export const NamespaceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建自定义名称空间
         * @param {string} name 空间名称
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNamespaceUsingPOST: async (name: string, owner?: string, xGdcAppKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling createNamespaceUsingPOST.');
            }
            const localVarPath = `/thirdtable/namespace/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (xGdcAppKey !== undefined && xGdcAppKey !== null) {
                localVarHeaderParameter['x_gdc_app_key'] = String(xGdcAppKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除名称空间
         * @param {string} name  名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNamespaceUsingDELETE: async (name: string, owner?: string, xGdcAppKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling deleteNamespaceUsingDELETE.');
            }
            const localVarPath = `/thirdtable/namespace/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (xGdcAppKey !== undefined && xGdcAppKey !== null) {
                localVarHeaderParameter['x_gdc_app_key'] = String(xGdcAppKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 是否有有权访问空间
         * @param {string} name  名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hasAuthenticationUsingGET: async (name: string, owner?: string, xGdcAppKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling hasAuthenticationUsingGET.');
            }
            const localVarPath = `/thirdtable/namespace/{name}/authentication`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (xGdcAppKey !== undefined && xGdcAppKey !== null) {
                localVarHeaderParameter['x_gdc_app_key'] = String(xGdcAppKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 判断名称空间是否存在
         * @param {string} name 空间名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hasNamespaceUsingGET: async (name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling hasNamespaceUsingGET.');
            }
            const localVarPath = `/thirdtable/namespace/{name}/exist`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 空间下是否包含表
         * @param {string} name  名称空间
         * @param {string} tableName 表名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hasTableUsingGET: async (name: string, tableName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling hasTableUsingGET.');
            }
            // verify required parameter 'tableName' is not null or undefined
            if (tableName === null || tableName === undefined) {
                throw new RequiredError('tableName','Required parameter tableName was null or undefined when calling hasTableUsingGET.');
            }
            const localVarPath = `/thirdtable/namespace/{name}/table/{tableName}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"tableName"}}`, encodeURIComponent(String(tableName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 列出可见的名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllNamespaceUsingGET: async (owner?: string, xGdcAppKey?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/thirdtable/namespace`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (xGdcAppKey !== undefined && xGdcAppKey !== null) {
                localVarHeaderParameter['x_gdc_app_key'] = String(xGdcAppKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 列出名称空间下的表名
         * @param {string} name  名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllTablesUsingGET: async (name: string, owner?: string, xGdcAppKey?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling listAllTablesUsingGET.');
            }
            const localVarPath = `/thirdtable/namespace/{name}/tables`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (xGdcAppKey !== undefined && xGdcAppKey !== null) {
                localVarHeaderParameter['x_gdc_app_key'] = String(xGdcAppKey);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NamespaceApi - functional programming interface
 * @export
 */
export const NamespaceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建自定义名称空间
         * @param {string} name 空间名称
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNamespaceUsingPOST(name: string, owner?: string, xGdcAppKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await NamespaceApiAxiosParamCreator(configuration).createNamespaceUsingPOST(name, owner, xGdcAppKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除名称空间
         * @param {string} name  名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNamespaceUsingDELETE(name: string, owner?: string, xGdcAppKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await NamespaceApiAxiosParamCreator(configuration).deleteNamespaceUsingDELETE(name, owner, xGdcAppKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 是否有有权访问空间
         * @param {string} name  名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hasAuthenticationUsingGET(name: string, owner?: string, xGdcAppKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseboolean>> {
            const localVarAxiosArgs = await NamespaceApiAxiosParamCreator(configuration).hasAuthenticationUsingGET(name, owner, xGdcAppKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 判断名称空间是否存在
         * @param {string} name 空间名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hasNamespaceUsingGET(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseboolean>> {
            const localVarAxiosArgs = await NamespaceApiAxiosParamCreator(configuration).hasNamespaceUsingGET(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 空间下是否包含表
         * @param {string} name  名称空间
         * @param {string} tableName 表名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hasTableUsingGET(name: string, tableName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseboolean>> {
            const localVarAxiosArgs = await NamespaceApiAxiosParamCreator(configuration).hasTableUsingGET(name, tableName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 列出可见的名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllNamespaceUsingGET(owner?: string, xGdcAppKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListstring>> {
            const localVarAxiosArgs = await NamespaceApiAxiosParamCreator(configuration).listAllNamespaceUsingGET(owner, xGdcAppKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 列出名称空间下的表名
         * @param {string} name  名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllTablesUsingGET(name: string, owner?: string, xGdcAppKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListstring>> {
            const localVarAxiosArgs = await NamespaceApiAxiosParamCreator(configuration).listAllTablesUsingGET(name, owner, xGdcAppKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NamespaceApi - factory interface
 * @export
 */
export const NamespaceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 创建自定义名称空间
         * @param {string} name 空间名称
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNamespaceUsingPOST(name: string, owner?: string, xGdcAppKey?: string, options?: any): AxiosPromise<ResponseVoid> {
            return NamespaceApiFp(configuration).createNamespaceUsingPOST(name, owner, xGdcAppKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除名称空间
         * @param {string} name  名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNamespaceUsingDELETE(name: string, owner?: string, xGdcAppKey?: string, options?: any): AxiosPromise<ResponseVoid> {
            return NamespaceApiFp(configuration).deleteNamespaceUsingDELETE(name, owner, xGdcAppKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 是否有有权访问空间
         * @param {string} name  名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hasAuthenticationUsingGET(name: string, owner?: string, xGdcAppKey?: string, options?: any): AxiosPromise<Responseboolean> {
            return NamespaceApiFp(configuration).hasAuthenticationUsingGET(name, owner, xGdcAppKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 判断名称空间是否存在
         * @param {string} name 空间名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hasNamespaceUsingGET(name: string, options?: any): AxiosPromise<Responseboolean> {
            return NamespaceApiFp(configuration).hasNamespaceUsingGET(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 空间下是否包含表
         * @param {string} name  名称空间
         * @param {string} tableName 表名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hasTableUsingGET(name: string, tableName: string, options?: any): AxiosPromise<Responseboolean> {
            return NamespaceApiFp(configuration).hasTableUsingGET(name, tableName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 列出可见的名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllNamespaceUsingGET(owner?: string, xGdcAppKey?: string, options?: any): AxiosPromise<ResponseListstring> {
            return NamespaceApiFp(configuration).listAllNamespaceUsingGET(owner, xGdcAppKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 列出名称空间下的表名
         * @param {string} name  名称空间
         * @param {string} [owner] 所有者
         * @param {string} [xGdcAppKey] x_gdc_app_key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllTablesUsingGET(name: string, owner?: string, xGdcAppKey?: string, options?: any): AxiosPromise<ResponseListstring> {
            return NamespaceApiFp(configuration).listAllTablesUsingGET(name, owner, xGdcAppKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NamespaceApi - object-oriented interface
 * @export
 * @class NamespaceApi
 * @extends {BaseAPI}
 */
export class NamespaceApi extends BaseAPI {
    /**
     * 
     * @summary 创建自定义名称空间
     * @param {string} name 空间名称
     * @param {string} [owner] 所有者
     * @param {string} [xGdcAppKey] x_gdc_app_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamespaceApi
     */
    public createNamespaceUsingPOST(name: string, owner?: string, xGdcAppKey?: string, options?: any) {
        return NamespaceApiFp(this.configuration).createNamespaceUsingPOST(name, owner, xGdcAppKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除名称空间
     * @param {string} name  名称空间
     * @param {string} [owner] 所有者
     * @param {string} [xGdcAppKey] x_gdc_app_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamespaceApi
     */
    public deleteNamespaceUsingDELETE(name: string, owner?: string, xGdcAppKey?: string, options?: any) {
        return NamespaceApiFp(this.configuration).deleteNamespaceUsingDELETE(name, owner, xGdcAppKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 是否有有权访问空间
     * @param {string} name  名称空间
     * @param {string} [owner] 所有者
     * @param {string} [xGdcAppKey] x_gdc_app_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamespaceApi
     */
    public hasAuthenticationUsingGET(name: string, owner?: string, xGdcAppKey?: string, options?: any) {
        return NamespaceApiFp(this.configuration).hasAuthenticationUsingGET(name, owner, xGdcAppKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 判断名称空间是否存在
     * @param {string} name 空间名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamespaceApi
     */
    public hasNamespaceUsingGET(name: string, options?: any) {
        return NamespaceApiFp(this.configuration).hasNamespaceUsingGET(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 空间下是否包含表
     * @param {string} name  名称空间
     * @param {string} tableName 表名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamespaceApi
     */
    public hasTableUsingGET(name: string, tableName: string, options?: any) {
        return NamespaceApiFp(this.configuration).hasTableUsingGET(name, tableName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 列出可见的名称空间
     * @param {string} [owner] 所有者
     * @param {string} [xGdcAppKey] x_gdc_app_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamespaceApi
     */
    public listAllNamespaceUsingGET(owner?: string, xGdcAppKey?: string, options?: any) {
        return NamespaceApiFp(this.configuration).listAllNamespaceUsingGET(owner, xGdcAppKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 列出名称空间下的表名
     * @param {string} name  名称空间
     * @param {string} [owner] 所有者
     * @param {string} [xGdcAppKey] x_gdc_app_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamespaceApi
     */
    public listAllTablesUsingGET(name: string, owner?: string, xGdcAppKey?: string, options?: any) {
        return NamespaceApiFp(this.configuration).listAllTablesUsingGET(name, owner, xGdcAppKey, options).then((request) => request(this.axios, this.basePath));
    }

}

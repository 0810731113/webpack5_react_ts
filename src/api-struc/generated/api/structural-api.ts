// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CategoryUpgrade } from '../model';
// @ts-ignore
import { ProjectStructureVO } from '../model';
// @ts-ignore
import { ProjectSuiteBinder } from '../model';
// @ts-ignore
import { ProjectSuiteCategorySearch } from '../model';
// @ts-ignore
import { ProjectSuiteResultBean } from '../model';
// @ts-ignore
import { ProjectSuiteSearch } from '../model';
// @ts-ignore
import { ResponseFakeProject } from '../model';
// @ts-ignore
import { ResponseListProjectStructureVO } from '../model';
// @ts-ignore
import { Responseboolean } from '../model';
// @ts-ignore
import { SuiteCheck4Update } from '../model';
// @ts-ignore
import { SuiteSearch } from '../model';
// @ts-ignore
import { UploadResultBean } from '../model';
/**
 * StructuralApi - axios parameter creator
 * @export
 */
export const StructuralApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 申请构件上传的url地址
         * @param {string} md 构件摘要
         * @param {string} md5 md5
         * @param {string} name 构件名称
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        askForSuitesUploadUrlUsingGET: async (md: string, md5: string, name: string, projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'md' is not null or undefined
            if (md === null || md === undefined) {
                throw new RequiredError('md','Required parameter md was null or undefined when calling askForSuitesUploadUrlUsingGET.');
            }
            // verify required parameter 'md5' is not null or undefined
            if (md5 === null || md5 === undefined) {
                throw new RequiredError('md5','Required parameter md5 was null or undefined when calling askForSuitesUploadUrlUsingGET.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling askForSuitesUploadUrlUsingGET.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling askForSuitesUploadUrlUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/upload/uri`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (md !== undefined) {
                localVarQueryParameter['md'] = md;
            }

            if (md5 !== undefined) {
                localVarQueryParameter['md5'] = md5;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 向项目中添加公共构件
         * @param {ProjectSuiteBinder} binder binder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindProjectSuitesUsingPOST: async (binder: ProjectSuiteBinder, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'binder' is not null or undefined
            if (binder === null || binder === undefined) {
                throw new RequiredError('binder','Required parameter binder was null or undefined when calling bindProjectSuitesUsingPOST.');
            }
            const localVarPath = `/structural/project/suites`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof binder !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(binder !== undefined ? binder : {}) : (binder || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据模板数据向项目中预置构件
         * @param {string} projectId projectId
         * @param {Array<ProjectStructureVO>} template template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindProjectSuitesUsingPOST1: async (projectId: string, template: Array<ProjectStructureVO>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling bindProjectSuitesUsingPOST1.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling bindProjectSuitesUsingPOST1.');
            }
            const localVarPath = `/structural/project/{projectId}/init/template/suites`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof template !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(template !== undefined ? template : {}) : (template || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 检查项目是否已经预置了默认的构件组
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkProjectPresetSuitesUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling checkProjectPresetSuitesUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/preset/suites`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据项目构件id判断项目中是否存在该组件
         * @param {string} id id
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkProjectSuiteExistsByIdUsingGET: async (id: string, projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling checkProjectSuiteExistsByIdUsingGET.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling checkProjectSuiteExistsByIdUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/subject/suite/{id}/exist`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 检查项目中是否存在需存在更新的项目构件
         * @param {string} major 
         * @param {string} projectId 项目Id
         * @param {number} time 时间起点，毫秒数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkProjectSuiteNeedUpGradeUsingGET: async (major: string, projectId: string, time: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'major' is not null or undefined
            if (major === null || major === undefined) {
                throw new RequiredError('major','Required parameter major was null or undefined when calling checkProjectSuiteNeedUpGradeUsingGET.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling checkProjectSuiteNeedUpGradeUsingGET.');
            }
            // verify required parameter 'time' is not null or undefined
            if (time === null || time === undefined) {
                throw new RequiredError('time','Required parameter time was null or undefined when calling checkProjectSuiteNeedUpGradeUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/components/changed`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (major !== undefined) {
                localVarQueryParameter['major'] = major;
            }

            if (time !== undefined) {
                localVarQueryParameter['time'] = time;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据公共构件id判断项目中是否存在该组件
         * @param {string} id id
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkSuiteExistsByIdUsingPOST: async (id: string, projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling checkSuiteExistsByIdUsingPOST.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling checkSuiteExistsByIdUsingPOST.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 判断项目中是否存在同名组件
         * @param {string} name 构件名称
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkSuiteExistsByNameUsingGET: async (name: string, projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling checkSuiteExistsByNameUsingGET.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling checkSuiteExistsByNameUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/name`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary V2公共库构件查询
         * @param {SuiteSearch} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonSuitesSearch4V2UsingPOST: async (condition: SuiteSearch, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'condition' is not null or undefined
            if (condition === null || condition === undefined) {
                throw new RequiredError('condition','Required parameter condition was null or undefined when calling commonSuitesSearch4V2UsingPOST.');
            }
            const localVarPath = `/structural/v2/common/suites/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof condition !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(condition !== undefined ? condition : {}) : (condition || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 公共库构件查询
         * @param {SuiteSearch} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonSuitesSearchUsingPOST: async (condition: SuiteSearch, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'condition' is not null or undefined
            if (condition === null || condition === undefined) {
                throw new RequiredError('condition','Required parameter condition was null or undefined when calling commonSuitesSearchUsingPOST.');
            }
            const localVarPath = `/structural/common/suites/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof condition !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(condition !== undefined ? condition : {}) : (condition || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除项目下的单个项目级构件
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件Id
         * @param {string} [version] 构件版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectSuiteUsingDELETE: async (projectId: string, suiteId: string, version?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling deleteProjectSuiteUsingDELETE.');
            }
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling deleteProjectSuiteUsingDELETE.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{suiteId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目构件的下载地址
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件Id
         * @param {string} version 构件版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadSuitesSearchUsingGET: async (projectId: string, suiteId: string, version: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling downloadSuitesSearchUsingGET.');
            }
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling downloadSuitesSearchUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling downloadSuitesSearchUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{suiteId}/{version}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary V2获取公共构件坞分类列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommonSuite4V2UsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/structural/v2/common/classify`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary V2获取公共构件组件详细信息
         * @param {string} suiteId 构件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommonSuiteInfoDetail4V2UsingGET: async (suiteId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling getCommonSuiteInfoDetail4V2UsingGET.');
            }
            const localVarPath = `/structural/v2/common/suite/{suiteId}/deail`
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取公共构件组件详细信息
         * @param {string} suiteId 构件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommonSuiteInfoDetailUsingGET: async (suiteId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling getCommonSuiteInfoDetailUsingGET.');
            }
            const localVarPath = `/structural/common/suite/{suiteId}/deail`
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取公共构件坞分类列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommonSuiteUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/structural/common/classify`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取产品分类
         * @param {number} major 专业编码，取值说明：0-gst,1-gap,2-gmep
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteCategoryUsingGET: async (major: number, projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'major' is not null or undefined
            if (major === null || major === undefined) {
                throw new RequiredError('major','Required parameter major was null or undefined when calling getProjectSuiteCategoryUsingGET.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getProjectSuiteCategoryUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/major/categories`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (major !== undefined) {
                localVarQueryParameter['major'] = major;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目构件坞分类列表
         * @param {string} projectId 项目id
         * @param {ProjectSuiteCategorySearch} search search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteCategoryUsingPOST: async (projectId: string, search: ProjectSuiteCategorySearch, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getProjectSuiteCategoryUsingPOST.');
            }
            // verify required parameter 'search' is not null or undefined
            if (search === null || search === undefined) {
                throw new RequiredError('search','Required parameter search was null or undefined when calling getProjectSuiteCategoryUsingPOST.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/category`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof search !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(search !== undefined ? search : {}) : (search || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取构件详情的XML文件
         * @param {string} projectId projectId
         * @param {number} suiteId suiteId
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteDetailWithXmlUsingGET: async (projectId: string, suiteId: number, version: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getProjectSuiteDetailWithXmlUsingGET.');
            }
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling getProjectSuiteDetailWithXmlUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getProjectSuiteDetailWithXmlUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{suiteId}/detail/xml`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目构件family详细信息
         * @param {string} name name
         * @param {string} projectId projectId
         * @param {string} suiteId suiteId
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteFamilyDetailUsingGET: async (name: string, projectId: string, suiteId: string, version: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getProjectSuiteFamilyDetailUsingGET.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getProjectSuiteFamilyDetailUsingGET.');
            }
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling getProjectSuiteFamilyDetailUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getProjectSuiteFamilyDetailUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{suiteId}/{version}/family/info`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取构件所有familyTpyes详情
         * @param {string} projectId projectId
         * @param {number} suiteId suiteId
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteFamilyTypesUsingGET: async (projectId: string, suiteId: number, version: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getProjectSuiteFamilyTypesUsingGET.');
            }
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling getProjectSuiteFamilyTypesUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getProjectSuiteFamilyTypesUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{suiteId}/family_types`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目构件详细信息
         * @param {string} projectId projectId
         * @param {string} suiteId suiteId
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteInfoDetailUsingGET: async (projectId: string, suiteId: string, version: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getProjectSuiteInfoDetailUsingGET.');
            }
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling getProjectSuiteInfoDetailUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getProjectSuiteInfoDetailUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{suiteId}/{version}/info`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary V2获取公共构件坞某分类下的构件元素
         * @param {string} category 分类Id
         * @param {number} [page] page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuiteDetails4V2UsingGET: async (category: string, page?: number, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling getSuiteDetails4V2UsingGET.');
            }
            const localVarPath = `/structural/v2/common/classify/{category}/suites`
                .replace(`{${"category"}}`, encodeURIComponent(String(category)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取公共构件坞某分类下的构件元素
         * @param {string} category 分类Id
         * @param {number} [page] page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuiteDetailsUsingGET: async (category: string, page?: number, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling getSuiteDetailsUsingGET.');
            }
            const localVarPath = `/structural/common/classify/{category}/suites`
                .replace(`{${"category"}}`, encodeURIComponent(String(category)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 为项目创建构件坞的映射(该接口成功返回10000，而不是success)
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initProject4SuiteUsingPOST: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling initProject4SuiteUsingPOST.');
            }
            const localVarPath = `/structural/project/{projectId}/mapper`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目中所有最新版本的可用构件列表(该接口成功返回10000，而不是success)
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectSuitesUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling listProjectSuitesUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suites/list`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目构件性能曲线数据
         * @param {string} familyType 类别
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {number} version 版本号
         * @param {number} [curveId] 曲线id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadSuitePerformanceLineDataUsingGET: async (familyType: string, projectId: string, suiteId: string, version: number, curveId?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'familyType' is not null or undefined
            if (familyType === null || familyType === undefined) {
                throw new RequiredError('familyType','Required parameter familyType was null or undefined when calling loadSuitePerformanceLineDataUsingGET.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling loadSuitePerformanceLineDataUsingGET.');
            }
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling loadSuitePerformanceLineDataUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling loadSuitePerformanceLineDataUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{suiteId}/performance/curve/data`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (curveId !== undefined) {
                localVarQueryParameter['curveId'] = curveId;
            }

            if (familyType !== undefined) {
                localVarQueryParameter['familyType'] = familyType;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目构件的性能曲线定义
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {number} version 版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadSuitePerformanceLineDefineUsingGET: async (projectId: string, suiteId: string, version: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling loadSuitePerformanceLineDefineUsingGET.');
            }
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling loadSuitePerformanceLineDefineUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling loadSuitePerformanceLineDefineUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{suiteId}/performance/curve/define`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目构件图例下载的url
         * @param {string} placeholder placeholder
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {string} version 版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadSuitePlaceholderDownloadUrlUsingGET: async (placeholder: string, projectId: string, suiteId: string, version: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'placeholder' is not null or undefined
            if (placeholder === null || placeholder === undefined) {
                throw new RequiredError('placeholder','Required parameter placeholder was null or undefined when calling loadSuitePlaceholderDownloadUrlUsingGET.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling loadSuitePlaceholderDownloadUrlUsingGET.');
            }
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling loadSuitePlaceholderDownloadUrlUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling loadSuitePlaceholderDownloadUrlUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{suiteId}/placeholder/{placeholder}/url`
                .replace(`{${"placeholder"}}`, encodeURIComponent(String(placeholder)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目构件的图例
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {string} version 版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadSuitePlaceholderUsingGET: async (projectId: string, suiteId: string, version: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling loadSuitePlaceholderUsingGET.');
            }
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling loadSuitePlaceholderUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling loadSuitePlaceholderUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{suiteId}/placeholder`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 合并项目构件信息
         * @param {string} projectId projectId
         * @param {number} suiteId suiteId
         * @param {object} map map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeProjectSuiteUsingPUT: async (projectId: string, suiteId: number, map: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling mergeProjectSuiteUsingPUT.');
            }
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling mergeProjectSuiteUsingPUT.');
            }
            // verify required parameter 'map' is not null or undefined
            if (map === null || map === undefined) {
                throw new RequiredError('map','Required parameter map was null or undefined when calling mergeProjectSuiteUsingPUT.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{suiteId}/merge`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof map !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(map !== undefined ? map : {}) : (map || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 向项目中预置默认的公共构件组
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        presetProjectSuitesUsingPOST: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling presetProjectSuitesUsingPOST.');
            }
            const localVarPath = `/structural/project/{projectId}/preset/suites`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 项目构件查询
         * @param {ProjectSuiteSearch} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectSuitesSearchUsingPOST: async (condition: ProjectSuiteSearch, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'condition' is not null or undefined
            if (condition === null || condition === undefined) {
                throw new RequiredError('condition','Required parameter condition was null or undefined when calling projectSuitesSearchUsingPOST.');
            }
            const localVarPath = `/structural/project/suites/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof condition !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(condition !== undefined ? condition : {}) : (condition || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取可更新的项目构件的分类
         * @param {string} projectId 项目Id
         * @param {CategoryUpgrade} categoryUpgrade categoryUpgrade
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suiteCategoriesCheckForUpdateUsingPOST: async (projectId: string, categoryUpgrade: CategoryUpgrade, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling suiteCategoriesCheckForUpdateUsingPOST.');
            }
            // verify required parameter 'categoryUpgrade' is not null or undefined
            if (categoryUpgrade === null || categoryUpgrade === undefined) {
                throw new RequiredError('categoryUpgrade','Required parameter categoryUpgrade was null or undefined when calling suiteCategoriesCheckForUpdateUsingPOST.');
            }
            const localVarPath = `/structural/project/{projectId}/renewable/suites/categories`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof categoryUpgrade !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(categoryUpgrade !== undefined ? categoryUpgrade : {}) : (categoryUpgrade || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量查询项目构件版本是否更新
         * @param {string} projectId 项目Id
         * @param {Array<SuiteCheck4Update>} suites suites
         * @param {string} [categoryCode] category_code
         * @param {string} [keyword] keyword
         * @param {number} [major] 专业编码，取值说明：0-gst,1-gap,2-gmep
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suiteCheckForUpdateUsingPOST: async (projectId: string, suites: Array<SuiteCheck4Update>, categoryCode?: string, keyword?: string, major?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling suiteCheckForUpdateUsingPOST.');
            }
            // verify required parameter 'suites' is not null or undefined
            if (suites === null || suites === undefined) {
                throw new RequiredError('suites','Required parameter suites was null or undefined when calling suiteCheckForUpdateUsingPOST.');
            }
            const localVarPath = `/structural/project/{projectId}/suites/check4update`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categoryCode !== undefined) {
                localVarQueryParameter['category_code'] = categoryCode;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (major !== undefined) {
                localVarQueryParameter['major'] = major;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof suites !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(suites !== undefined ? suites : {}) : (suites || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建项目构件的新版本
         * @param {string} projectId projectId
         * @param {number} suiteId suiteId
         * @param {object} map map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradeProjectSuiteUsingPUT: async (projectId: string, suiteId: number, map: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling upgradeProjectSuiteUsingPUT.');
            }
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling upgradeProjectSuiteUsingPUT.');
            }
            // verify required parameter 'map' is not null or undefined
            if (map === null || map === undefined) {
                throw new RequiredError('map','Required parameter map was null or undefined when calling upgradeProjectSuiteUsingPUT.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{suiteId}/upgrade`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof map !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(map !== undefined ? map : {}) : (map || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 上传第三方项目构件
         * @param {string} projectId 项目Id
         * @param {object} params params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadThirdPartSuiteUsingPOST: async (projectId: string, params: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling uploadThirdPartSuiteUsingPOST.');
            }
            // verify required parameter 'params' is not null or undefined
            if (params === null || params === undefined) {
                throw new RequiredError('params','Required parameter params was null or undefined when calling uploadThirdPartSuiteUsingPOST.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/upload`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof params !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(params !== undefined ? params : {}) : (params || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StructuralApi - functional programming interface
 * @export
 */
export const StructuralApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 申请构件上传的url地址
         * @param {string} md 构件摘要
         * @param {string} md5 md5
         * @param {string} name 构件名称
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async askForSuitesUploadUrlUsingGET(md: string, md5: string, name: string, projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).askForSuitesUploadUrlUsingGET(md, md5, name, projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 向项目中添加公共构件
         * @param {ProjectSuiteBinder} binder binder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bindProjectSuitesUsingPOST(binder: ProjectSuiteBinder, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).bindProjectSuitesUsingPOST(binder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据模板数据向项目中预置构件
         * @param {string} projectId projectId
         * @param {Array<ProjectStructureVO>} template template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bindProjectSuitesUsingPOST1(projectId: string, template: Array<ProjectStructureVO>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).bindProjectSuitesUsingPOST1(projectId, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 检查项目是否已经预置了默认的构件组
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkProjectPresetSuitesUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseboolean>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).checkProjectPresetSuitesUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据项目构件id判断项目中是否存在该组件
         * @param {string} id id
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkProjectSuiteExistsByIdUsingGET(id: string, projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).checkProjectSuiteExistsByIdUsingGET(id, projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 检查项目中是否存在需存在更新的项目构件
         * @param {string} major 
         * @param {string} projectId 项目Id
         * @param {number} time 时间起点，毫秒数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkProjectSuiteNeedUpGradeUsingGET(major: string, projectId: string, time: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).checkProjectSuiteNeedUpGradeUsingGET(major, projectId, time, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据公共构件id判断项目中是否存在该组件
         * @param {string} id id
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkSuiteExistsByIdUsingPOST(id: string, projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).checkSuiteExistsByIdUsingPOST(id, projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 判断项目中是否存在同名组件
         * @param {string} name 构件名称
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkSuiteExistsByNameUsingGET(name: string, projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).checkSuiteExistsByNameUsingGET(name, projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary V2公共库构件查询
         * @param {SuiteSearch} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonSuitesSearch4V2UsingPOST(condition: SuiteSearch, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).commonSuitesSearch4V2UsingPOST(condition, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 公共库构件查询
         * @param {SuiteSearch} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonSuitesSearchUsingPOST(condition: SuiteSearch, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).commonSuitesSearchUsingPOST(condition, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除项目下的单个项目级构件
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件Id
         * @param {string} [version] 构件版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectSuiteUsingDELETE(projectId: string, suiteId: string, version?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).deleteProjectSuiteUsingDELETE(projectId, suiteId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目构件的下载地址
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件Id
         * @param {string} version 构件版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadSuitesSearchUsingGET(projectId: string, suiteId: string, version: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).downloadSuitesSearchUsingGET(projectId, suiteId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary V2获取公共构件坞分类列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommonSuite4V2UsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).getCommonSuite4V2UsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary V2获取公共构件组件详细信息
         * @param {string} suiteId 构件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommonSuiteInfoDetail4V2UsingGET(suiteId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).getCommonSuiteInfoDetail4V2UsingGET(suiteId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取公共构件组件详细信息
         * @param {string} suiteId 构件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommonSuiteInfoDetailUsingGET(suiteId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).getCommonSuiteInfoDetailUsingGET(suiteId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取公共构件坞分类列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommonSuiteUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).getCommonSuiteUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取产品分类
         * @param {number} major 专业编码，取值说明：0-gst,1-gap,2-gmep
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectSuiteCategoryUsingGET(major: number, projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).getProjectSuiteCategoryUsingGET(major, projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目构件坞分类列表
         * @param {string} projectId 项目id
         * @param {ProjectSuiteCategorySearch} search search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectSuiteCategoryUsingPOST(projectId: string, search: ProjectSuiteCategorySearch, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).getProjectSuiteCategoryUsingPOST(projectId, search, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取构件详情的XML文件
         * @param {string} projectId projectId
         * @param {number} suiteId suiteId
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectSuiteDetailWithXmlUsingGET(projectId: string, suiteId: number, version: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).getProjectSuiteDetailWithXmlUsingGET(projectId, suiteId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目构件family详细信息
         * @param {string} name name
         * @param {string} projectId projectId
         * @param {string} suiteId suiteId
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectSuiteFamilyDetailUsingGET(name: string, projectId: string, suiteId: string, version: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).getProjectSuiteFamilyDetailUsingGET(name, projectId, suiteId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取构件所有familyTpyes详情
         * @param {string} projectId projectId
         * @param {number} suiteId suiteId
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectSuiteFamilyTypesUsingGET(projectId: string, suiteId: number, version: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).getProjectSuiteFamilyTypesUsingGET(projectId, suiteId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目构件详细信息
         * @param {string} projectId projectId
         * @param {string} suiteId suiteId
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectSuiteInfoDetailUsingGET(projectId: string, suiteId: string, version: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).getProjectSuiteInfoDetailUsingGET(projectId, suiteId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary V2获取公共构件坞某分类下的构件元素
         * @param {string} category 分类Id
         * @param {number} [page] page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSuiteDetails4V2UsingGET(category: string, page?: number, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).getSuiteDetails4V2UsingGET(category, page, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取公共构件坞某分类下的构件元素
         * @param {string} category 分类Id
         * @param {number} [page] page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSuiteDetailsUsingGET(category: string, page?: number, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).getSuiteDetailsUsingGET(category, page, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 为项目创建构件坞的映射(该接口成功返回10000，而不是success)
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initProject4SuiteUsingPOST(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseFakeProject>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).initProject4SuiteUsingPOST(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目中所有最新版本的可用构件列表(该接口成功返回10000，而不是success)
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjectSuitesUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListProjectStructureVO>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).listProjectSuitesUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目构件性能曲线数据
         * @param {string} familyType 类别
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {number} version 版本号
         * @param {number} [curveId] 曲线id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadSuitePerformanceLineDataUsingGET(familyType: string, projectId: string, suiteId: string, version: number, curveId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).loadSuitePerformanceLineDataUsingGET(familyType, projectId, suiteId, version, curveId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目构件的性能曲线定义
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {number} version 版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadSuitePerformanceLineDefineUsingGET(projectId: string, suiteId: string, version: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).loadSuitePerformanceLineDefineUsingGET(projectId, suiteId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目构件图例下载的url
         * @param {string} placeholder placeholder
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {string} version 版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadSuitePlaceholderDownloadUrlUsingGET(placeholder: string, projectId: string, suiteId: string, version: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).loadSuitePlaceholderDownloadUrlUsingGET(placeholder, projectId, suiteId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目构件的图例
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {string} version 版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadSuitePlaceholderUsingGET(projectId: string, suiteId: string, version: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).loadSuitePlaceholderUsingGET(projectId, suiteId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 合并项目构件信息
         * @param {string} projectId projectId
         * @param {number} suiteId suiteId
         * @param {object} map map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergeProjectSuiteUsingPUT(projectId: string, suiteId: number, map: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).mergeProjectSuiteUsingPUT(projectId, suiteId, map, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 向项目中预置默认的公共构件组
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async presetProjectSuitesUsingPOST(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).presetProjectSuitesUsingPOST(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 项目构件查询
         * @param {ProjectSuiteSearch} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectSuitesSearchUsingPOST(condition: ProjectSuiteSearch, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectSuiteResultBean>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).projectSuitesSearchUsingPOST(condition, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取可更新的项目构件的分类
         * @param {string} projectId 项目Id
         * @param {CategoryUpgrade} categoryUpgrade categoryUpgrade
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suiteCategoriesCheckForUpdateUsingPOST(projectId: string, categoryUpgrade: CategoryUpgrade, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).suiteCategoriesCheckForUpdateUsingPOST(projectId, categoryUpgrade, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量查询项目构件版本是否更新
         * @param {string} projectId 项目Id
         * @param {Array<SuiteCheck4Update>} suites suites
         * @param {string} [categoryCode] category_code
         * @param {string} [keyword] keyword
         * @param {number} [major] 专业编码，取值说明：0-gst,1-gap,2-gmep
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suiteCheckForUpdateUsingPOST(projectId: string, suites: Array<SuiteCheck4Update>, categoryCode?: string, keyword?: string, major?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).suiteCheckForUpdateUsingPOST(projectId, suites, categoryCode, keyword, major, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建项目构件的新版本
         * @param {string} projectId projectId
         * @param {number} suiteId suiteId
         * @param {object} map map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upgradeProjectSuiteUsingPUT(projectId: string, suiteId: number, map: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).upgradeProjectSuiteUsingPUT(projectId, suiteId, map, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 上传第三方项目构件
         * @param {string} projectId 项目Id
         * @param {object} params params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadThirdPartSuiteUsingPOST(projectId: string, params: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadResultBean>> {
            const localVarAxiosArgs = await StructuralApiAxiosParamCreator(configuration).uploadThirdPartSuiteUsingPOST(projectId, params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StructuralApi - factory interface
 * @export
 */
export const StructuralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 申请构件上传的url地址
         * @param {string} md 构件摘要
         * @param {string} md5 md5
         * @param {string} name 构件名称
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        askForSuitesUploadUrlUsingGET(md: string, md5: string, name: string, projectId: string, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).askForSuitesUploadUrlUsingGET(md, md5, name, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 向项目中添加公共构件
         * @param {ProjectSuiteBinder} binder binder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindProjectSuitesUsingPOST(binder: ProjectSuiteBinder, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).bindProjectSuitesUsingPOST(binder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据模板数据向项目中预置构件
         * @param {string} projectId projectId
         * @param {Array<ProjectStructureVO>} template template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindProjectSuitesUsingPOST1(projectId: string, template: Array<ProjectStructureVO>, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).bindProjectSuitesUsingPOST1(projectId, template, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 检查项目是否已经预置了默认的构件组
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkProjectPresetSuitesUsingGET(projectId: string, options?: any): AxiosPromise<Responseboolean> {
            return StructuralApiFp(configuration).checkProjectPresetSuitesUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据项目构件id判断项目中是否存在该组件
         * @param {string} id id
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkProjectSuiteExistsByIdUsingGET(id: string, projectId: string, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).checkProjectSuiteExistsByIdUsingGET(id, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 检查项目中是否存在需存在更新的项目构件
         * @param {string} major 
         * @param {string} projectId 项目Id
         * @param {number} time 时间起点，毫秒数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkProjectSuiteNeedUpGradeUsingGET(major: string, projectId: string, time: number, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).checkProjectSuiteNeedUpGradeUsingGET(major, projectId, time, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据公共构件id判断项目中是否存在该组件
         * @param {string} id id
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkSuiteExistsByIdUsingPOST(id: string, projectId: string, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).checkSuiteExistsByIdUsingPOST(id, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 判断项目中是否存在同名组件
         * @param {string} name 构件名称
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkSuiteExistsByNameUsingGET(name: string, projectId: string, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).checkSuiteExistsByNameUsingGET(name, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary V2公共库构件查询
         * @param {SuiteSearch} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonSuitesSearch4V2UsingPOST(condition: SuiteSearch, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).commonSuitesSearch4V2UsingPOST(condition, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 公共库构件查询
         * @param {SuiteSearch} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonSuitesSearchUsingPOST(condition: SuiteSearch, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).commonSuitesSearchUsingPOST(condition, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除项目下的单个项目级构件
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件Id
         * @param {string} [version] 构件版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectSuiteUsingDELETE(projectId: string, suiteId: string, version?: string, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).deleteProjectSuiteUsingDELETE(projectId, suiteId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目构件的下载地址
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件Id
         * @param {string} version 构件版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadSuitesSearchUsingGET(projectId: string, suiteId: string, version: string, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).downloadSuitesSearchUsingGET(projectId, suiteId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary V2获取公共构件坞分类列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommonSuite4V2UsingGET(options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).getCommonSuite4V2UsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary V2获取公共构件组件详细信息
         * @param {string} suiteId 构件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommonSuiteInfoDetail4V2UsingGET(suiteId: string, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).getCommonSuiteInfoDetail4V2UsingGET(suiteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取公共构件组件详细信息
         * @param {string} suiteId 构件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommonSuiteInfoDetailUsingGET(suiteId: string, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).getCommonSuiteInfoDetailUsingGET(suiteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取公共构件坞分类列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommonSuiteUsingGET(options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).getCommonSuiteUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取产品分类
         * @param {number} major 专业编码，取值说明：0-gst,1-gap,2-gmep
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteCategoryUsingGET(major: number, projectId: string, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).getProjectSuiteCategoryUsingGET(major, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目构件坞分类列表
         * @param {string} projectId 项目id
         * @param {ProjectSuiteCategorySearch} search search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteCategoryUsingPOST(projectId: string, search: ProjectSuiteCategorySearch, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).getProjectSuiteCategoryUsingPOST(projectId, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取构件详情的XML文件
         * @param {string} projectId projectId
         * @param {number} suiteId suiteId
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteDetailWithXmlUsingGET(projectId: string, suiteId: number, version: string, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).getProjectSuiteDetailWithXmlUsingGET(projectId, suiteId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目构件family详细信息
         * @param {string} name name
         * @param {string} projectId projectId
         * @param {string} suiteId suiteId
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteFamilyDetailUsingGET(name: string, projectId: string, suiteId: string, version: string, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).getProjectSuiteFamilyDetailUsingGET(name, projectId, suiteId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取构件所有familyTpyes详情
         * @param {string} projectId projectId
         * @param {number} suiteId suiteId
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteFamilyTypesUsingGET(projectId: string, suiteId: number, version: string, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).getProjectSuiteFamilyTypesUsingGET(projectId, suiteId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目构件详细信息
         * @param {string} projectId projectId
         * @param {string} suiteId suiteId
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteInfoDetailUsingGET(projectId: string, suiteId: string, version: string, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).getProjectSuiteInfoDetailUsingGET(projectId, suiteId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary V2获取公共构件坞某分类下的构件元素
         * @param {string} category 分类Id
         * @param {number} [page] page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuiteDetails4V2UsingGET(category: string, page?: number, pageSize?: number, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).getSuiteDetails4V2UsingGET(category, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取公共构件坞某分类下的构件元素
         * @param {string} category 分类Id
         * @param {number} [page] page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuiteDetailsUsingGET(category: string, page?: number, pageSize?: number, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).getSuiteDetailsUsingGET(category, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 为项目创建构件坞的映射(该接口成功返回10000，而不是success)
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initProject4SuiteUsingPOST(projectId: string, options?: any): AxiosPromise<ResponseFakeProject> {
            return StructuralApiFp(configuration).initProject4SuiteUsingPOST(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目中所有最新版本的可用构件列表(该接口成功返回10000，而不是success)
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectSuitesUsingGET(projectId: string, options?: any): AxiosPromise<ResponseListProjectStructureVO> {
            return StructuralApiFp(configuration).listProjectSuitesUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目构件性能曲线数据
         * @param {string} familyType 类别
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {number} version 版本号
         * @param {number} [curveId] 曲线id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadSuitePerformanceLineDataUsingGET(familyType: string, projectId: string, suiteId: string, version: number, curveId?: number, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).loadSuitePerformanceLineDataUsingGET(familyType, projectId, suiteId, version, curveId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目构件的性能曲线定义
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {number} version 版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadSuitePerformanceLineDefineUsingGET(projectId: string, suiteId: string, version: number, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).loadSuitePerformanceLineDefineUsingGET(projectId, suiteId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目构件图例下载的url
         * @param {string} placeholder placeholder
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {string} version 版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadSuitePlaceholderDownloadUrlUsingGET(placeholder: string, projectId: string, suiteId: string, version: string, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).loadSuitePlaceholderDownloadUrlUsingGET(placeholder, projectId, suiteId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目构件的图例
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {string} version 版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadSuitePlaceholderUsingGET(projectId: string, suiteId: string, version: string, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).loadSuitePlaceholderUsingGET(projectId, suiteId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 合并项目构件信息
         * @param {string} projectId projectId
         * @param {number} suiteId suiteId
         * @param {object} map map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeProjectSuiteUsingPUT(projectId: string, suiteId: number, map: object, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).mergeProjectSuiteUsingPUT(projectId, suiteId, map, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 向项目中预置默认的公共构件组
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        presetProjectSuitesUsingPOST(projectId: string, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).presetProjectSuitesUsingPOST(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 项目构件查询
         * @param {ProjectSuiteSearch} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectSuitesSearchUsingPOST(condition: ProjectSuiteSearch, options?: any): AxiosPromise<ProjectSuiteResultBean> {
            return StructuralApiFp(configuration).projectSuitesSearchUsingPOST(condition, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取可更新的项目构件的分类
         * @param {string} projectId 项目Id
         * @param {CategoryUpgrade} categoryUpgrade categoryUpgrade
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suiteCategoriesCheckForUpdateUsingPOST(projectId: string, categoryUpgrade: CategoryUpgrade, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).suiteCategoriesCheckForUpdateUsingPOST(projectId, categoryUpgrade, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量查询项目构件版本是否更新
         * @param {string} projectId 项目Id
         * @param {Array<SuiteCheck4Update>} suites suites
         * @param {string} [categoryCode] category_code
         * @param {string} [keyword] keyword
         * @param {number} [major] 专业编码，取值说明：0-gst,1-gap,2-gmep
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suiteCheckForUpdateUsingPOST(projectId: string, suites: Array<SuiteCheck4Update>, categoryCode?: string, keyword?: string, major?: number, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).suiteCheckForUpdateUsingPOST(projectId, suites, categoryCode, keyword, major, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建项目构件的新版本
         * @param {string} projectId projectId
         * @param {number} suiteId suiteId
         * @param {object} map map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradeProjectSuiteUsingPUT(projectId: string, suiteId: number, map: object, options?: any): AxiosPromise<object> {
            return StructuralApiFp(configuration).upgradeProjectSuiteUsingPUT(projectId, suiteId, map, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 上传第三方项目构件
         * @param {string} projectId 项目Id
         * @param {object} params params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadThirdPartSuiteUsingPOST(projectId: string, params: object, options?: any): AxiosPromise<UploadResultBean> {
            return StructuralApiFp(configuration).uploadThirdPartSuiteUsingPOST(projectId, params, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StructuralApi - object-oriented interface
 * @export
 * @class StructuralApi
 * @extends {BaseAPI}
 */
export class StructuralApi extends BaseAPI {
    /**
     * 
     * @summary 申请构件上传的url地址
     * @param {string} md 构件摘要
     * @param {string} md5 md5
     * @param {string} name 构件名称
     * @param {string} projectId 项目Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public askForSuitesUploadUrlUsingGET(md: string, md5: string, name: string, projectId: string, options?: any) {
        return StructuralApiFp(this.configuration).askForSuitesUploadUrlUsingGET(md, md5, name, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 向项目中添加公共构件
     * @param {ProjectSuiteBinder} binder binder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public bindProjectSuitesUsingPOST(binder: ProjectSuiteBinder, options?: any) {
        return StructuralApiFp(this.configuration).bindProjectSuitesUsingPOST(binder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据模板数据向项目中预置构件
     * @param {string} projectId projectId
     * @param {Array<ProjectStructureVO>} template template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public bindProjectSuitesUsingPOST1(projectId: string, template: Array<ProjectStructureVO>, options?: any) {
        return StructuralApiFp(this.configuration).bindProjectSuitesUsingPOST1(projectId, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 检查项目是否已经预置了默认的构件组
     * @param {string} projectId 项目id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public checkProjectPresetSuitesUsingGET(projectId: string, options?: any) {
        return StructuralApiFp(this.configuration).checkProjectPresetSuitesUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据项目构件id判断项目中是否存在该组件
     * @param {string} id id
     * @param {string} projectId 项目Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public checkProjectSuiteExistsByIdUsingGET(id: string, projectId: string, options?: any) {
        return StructuralApiFp(this.configuration).checkProjectSuiteExistsByIdUsingGET(id, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 检查项目中是否存在需存在更新的项目构件
     * @param {string} major 
     * @param {string} projectId 项目Id
     * @param {number} time 时间起点，毫秒数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public checkProjectSuiteNeedUpGradeUsingGET(major: string, projectId: string, time: number, options?: any) {
        return StructuralApiFp(this.configuration).checkProjectSuiteNeedUpGradeUsingGET(major, projectId, time, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据公共构件id判断项目中是否存在该组件
     * @param {string} id id
     * @param {string} projectId 项目Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public checkSuiteExistsByIdUsingPOST(id: string, projectId: string, options?: any) {
        return StructuralApiFp(this.configuration).checkSuiteExistsByIdUsingPOST(id, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 判断项目中是否存在同名组件
     * @param {string} name 构件名称
     * @param {string} projectId 项目Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public checkSuiteExistsByNameUsingGET(name: string, projectId: string, options?: any) {
        return StructuralApiFp(this.configuration).checkSuiteExistsByNameUsingGET(name, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary V2公共库构件查询
     * @param {SuiteSearch} condition condition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public commonSuitesSearch4V2UsingPOST(condition: SuiteSearch, options?: any) {
        return StructuralApiFp(this.configuration).commonSuitesSearch4V2UsingPOST(condition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 公共库构件查询
     * @param {SuiteSearch} condition condition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public commonSuitesSearchUsingPOST(condition: SuiteSearch, options?: any) {
        return StructuralApiFp(this.configuration).commonSuitesSearchUsingPOST(condition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除项目下的单个项目级构件
     * @param {string} projectId 项目Id
     * @param {string} suiteId 构件Id
     * @param {string} [version] 构件版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public deleteProjectSuiteUsingDELETE(projectId: string, suiteId: string, version?: string, options?: any) {
        return StructuralApiFp(this.configuration).deleteProjectSuiteUsingDELETE(projectId, suiteId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目构件的下载地址
     * @param {string} projectId 项目Id
     * @param {string} suiteId 构件Id
     * @param {string} version 构件版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public downloadSuitesSearchUsingGET(projectId: string, suiteId: string, version: string, options?: any) {
        return StructuralApiFp(this.configuration).downloadSuitesSearchUsingGET(projectId, suiteId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary V2获取公共构件坞分类列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public getCommonSuite4V2UsingGET(options?: any) {
        return StructuralApiFp(this.configuration).getCommonSuite4V2UsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary V2获取公共构件组件详细信息
     * @param {string} suiteId 构件id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public getCommonSuiteInfoDetail4V2UsingGET(suiteId: string, options?: any) {
        return StructuralApiFp(this.configuration).getCommonSuiteInfoDetail4V2UsingGET(suiteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取公共构件组件详细信息
     * @param {string} suiteId 构件id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public getCommonSuiteInfoDetailUsingGET(suiteId: string, options?: any) {
        return StructuralApiFp(this.configuration).getCommonSuiteInfoDetailUsingGET(suiteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取公共构件坞分类列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public getCommonSuiteUsingGET(options?: any) {
        return StructuralApiFp(this.configuration).getCommonSuiteUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取产品分类
     * @param {number} major 专业编码，取值说明：0-gst,1-gap,2-gmep
     * @param {string} projectId 项目id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public getProjectSuiteCategoryUsingGET(major: number, projectId: string, options?: any) {
        return StructuralApiFp(this.configuration).getProjectSuiteCategoryUsingGET(major, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目构件坞分类列表
     * @param {string} projectId 项目id
     * @param {ProjectSuiteCategorySearch} search search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public getProjectSuiteCategoryUsingPOST(projectId: string, search: ProjectSuiteCategorySearch, options?: any) {
        return StructuralApiFp(this.configuration).getProjectSuiteCategoryUsingPOST(projectId, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取构件详情的XML文件
     * @param {string} projectId projectId
     * @param {number} suiteId suiteId
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public getProjectSuiteDetailWithXmlUsingGET(projectId: string, suiteId: number, version: string, options?: any) {
        return StructuralApiFp(this.configuration).getProjectSuiteDetailWithXmlUsingGET(projectId, suiteId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目构件family详细信息
     * @param {string} name name
     * @param {string} projectId projectId
     * @param {string} suiteId suiteId
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public getProjectSuiteFamilyDetailUsingGET(name: string, projectId: string, suiteId: string, version: string, options?: any) {
        return StructuralApiFp(this.configuration).getProjectSuiteFamilyDetailUsingGET(name, projectId, suiteId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取构件所有familyTpyes详情
     * @param {string} projectId projectId
     * @param {number} suiteId suiteId
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public getProjectSuiteFamilyTypesUsingGET(projectId: string, suiteId: number, version: string, options?: any) {
        return StructuralApiFp(this.configuration).getProjectSuiteFamilyTypesUsingGET(projectId, suiteId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目构件详细信息
     * @param {string} projectId projectId
     * @param {string} suiteId suiteId
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public getProjectSuiteInfoDetailUsingGET(projectId: string, suiteId: string, version: string, options?: any) {
        return StructuralApiFp(this.configuration).getProjectSuiteInfoDetailUsingGET(projectId, suiteId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary V2获取公共构件坞某分类下的构件元素
     * @param {string} category 分类Id
     * @param {number} [page] page
     * @param {number} [pageSize] pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public getSuiteDetails4V2UsingGET(category: string, page?: number, pageSize?: number, options?: any) {
        return StructuralApiFp(this.configuration).getSuiteDetails4V2UsingGET(category, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取公共构件坞某分类下的构件元素
     * @param {string} category 分类Id
     * @param {number} [page] page
     * @param {number} [pageSize] pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public getSuiteDetailsUsingGET(category: string, page?: number, pageSize?: number, options?: any) {
        return StructuralApiFp(this.configuration).getSuiteDetailsUsingGET(category, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 为项目创建构件坞的映射(该接口成功返回10000，而不是success)
     * @param {string} projectId 项目id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public initProject4SuiteUsingPOST(projectId: string, options?: any) {
        return StructuralApiFp(this.configuration).initProject4SuiteUsingPOST(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目中所有最新版本的可用构件列表(该接口成功返回10000，而不是success)
     * @param {string} projectId 项目id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public listProjectSuitesUsingGET(projectId: string, options?: any) {
        return StructuralApiFp(this.configuration).listProjectSuitesUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目构件性能曲线数据
     * @param {string} familyType 类别
     * @param {string} projectId 项目Id
     * @param {string} suiteId 构件id
     * @param {number} version 版本号
     * @param {number} [curveId] 曲线id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public loadSuitePerformanceLineDataUsingGET(familyType: string, projectId: string, suiteId: string, version: number, curveId?: number, options?: any) {
        return StructuralApiFp(this.configuration).loadSuitePerformanceLineDataUsingGET(familyType, projectId, suiteId, version, curveId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目构件的性能曲线定义
     * @param {string} projectId 项目Id
     * @param {string} suiteId 构件id
     * @param {number} version 版本号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public loadSuitePerformanceLineDefineUsingGET(projectId: string, suiteId: string, version: number, options?: any) {
        return StructuralApiFp(this.configuration).loadSuitePerformanceLineDefineUsingGET(projectId, suiteId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目构件图例下载的url
     * @param {string} placeholder placeholder
     * @param {string} projectId 项目Id
     * @param {string} suiteId 构件id
     * @param {string} version 版本号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public loadSuitePlaceholderDownloadUrlUsingGET(placeholder: string, projectId: string, suiteId: string, version: string, options?: any) {
        return StructuralApiFp(this.configuration).loadSuitePlaceholderDownloadUrlUsingGET(placeholder, projectId, suiteId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目构件的图例
     * @param {string} projectId 项目Id
     * @param {string} suiteId 构件id
     * @param {string} version 版本号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public loadSuitePlaceholderUsingGET(projectId: string, suiteId: string, version: string, options?: any) {
        return StructuralApiFp(this.configuration).loadSuitePlaceholderUsingGET(projectId, suiteId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 合并项目构件信息
     * @param {string} projectId projectId
     * @param {number} suiteId suiteId
     * @param {object} map map
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public mergeProjectSuiteUsingPUT(projectId: string, suiteId: number, map: object, options?: any) {
        return StructuralApiFp(this.configuration).mergeProjectSuiteUsingPUT(projectId, suiteId, map, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 向项目中预置默认的公共构件组
     * @param {string} projectId 项目id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public presetProjectSuitesUsingPOST(projectId: string, options?: any) {
        return StructuralApiFp(this.configuration).presetProjectSuitesUsingPOST(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 项目构件查询
     * @param {ProjectSuiteSearch} condition condition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public projectSuitesSearchUsingPOST(condition: ProjectSuiteSearch, options?: any) {
        return StructuralApiFp(this.configuration).projectSuitesSearchUsingPOST(condition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取可更新的项目构件的分类
     * @param {string} projectId 项目Id
     * @param {CategoryUpgrade} categoryUpgrade categoryUpgrade
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public suiteCategoriesCheckForUpdateUsingPOST(projectId: string, categoryUpgrade: CategoryUpgrade, options?: any) {
        return StructuralApiFp(this.configuration).suiteCategoriesCheckForUpdateUsingPOST(projectId, categoryUpgrade, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量查询项目构件版本是否更新
     * @param {string} projectId 项目Id
     * @param {Array<SuiteCheck4Update>} suites suites
     * @param {string} [categoryCode] category_code
     * @param {string} [keyword] keyword
     * @param {number} [major] 专业编码，取值说明：0-gst,1-gap,2-gmep
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public suiteCheckForUpdateUsingPOST(projectId: string, suites: Array<SuiteCheck4Update>, categoryCode?: string, keyword?: string, major?: number, options?: any) {
        return StructuralApiFp(this.configuration).suiteCheckForUpdateUsingPOST(projectId, suites, categoryCode, keyword, major, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建项目构件的新版本
     * @param {string} projectId projectId
     * @param {number} suiteId suiteId
     * @param {object} map map
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public upgradeProjectSuiteUsingPUT(projectId: string, suiteId: number, map: object, options?: any) {
        return StructuralApiFp(this.configuration).upgradeProjectSuiteUsingPUT(projectId, suiteId, map, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 上传第三方项目构件
     * @param {string} projectId 项目Id
     * @param {object} params params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StructuralApi
     */
    public uploadThirdPartSuiteUsingPOST(projectId: string, params: object, options?: any) {
        return StructuralApiFp(this.configuration).uploadThirdPartSuiteUsingPOST(projectId, params, options).then((request) => request(this.axios, this.basePath));
    }

}

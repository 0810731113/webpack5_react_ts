// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProjectStructureVO } from '../model';
// @ts-ignore
import { ProjectSuiteBinder } from '../model';
// @ts-ignore
import { ProjectSuiteCategorySearch } from '../model';
// @ts-ignore
import { ProjectSuiteResultBean } from '../model';
// @ts-ignore
import { ProjectSuiteSearch } from '../model';
// @ts-ignore
import { ResponseFakeProject } from '../model';
// @ts-ignore
import { ResponseListProjectStructureVO } from '../model';
// @ts-ignore
import { SuiteSearch } from '../model';
// @ts-ignore
import { UploadResultBean } from '../model';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 申请构件上传的url地址
         * @param {string} md 构件摘要
         * @param {string} md5 md5
         * @param {string} name 构件名称
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        askForSuitesUploadUrlUsingGET: async (md: string, md5: string, name: string, projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'md' is not null or undefined
            if (md === null || md === undefined) {
                throw new RequiredError('md','Required parameter md was null or undefined when calling askForSuitesUploadUrlUsingGET.');
            }
            // verify required parameter 'md5' is not null or undefined
            if (md5 === null || md5 === undefined) {
                throw new RequiredError('md5','Required parameter md5 was null or undefined when calling askForSuitesUploadUrlUsingGET.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling askForSuitesUploadUrlUsingGET.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling askForSuitesUploadUrlUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/upload/uri`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (md !== undefined) {
                localVarQueryParameter['md'] = md;
            }

            if (md5 !== undefined) {
                localVarQueryParameter['md5'] = md5;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 向项目中预置公共构件
         * @param {ProjectSuiteBinder} binder binder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindProjectSuitesUsingPOST: async (binder: ProjectSuiteBinder, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'binder' is not null or undefined
            if (binder === null || binder === undefined) {
                throw new RequiredError('binder','Required parameter binder was null or undefined when calling bindProjectSuitesUsingPOST.');
            }
            const localVarPath = `/structural/project/suites`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof binder !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(binder !== undefined ? binder : {}) : (binder || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据模板数据向项目中预置构件
         * @param {string} projectId projectId
         * @param {Array<ProjectStructureVO>} template template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindProjectSuitesUsingPOST1: async (projectId: string, template: Array<ProjectStructureVO>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling bindProjectSuitesUsingPOST1.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling bindProjectSuitesUsingPOST1.');
            }
            const localVarPath = `/structural/project/{projectId}/init/template/suites`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof template !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(template !== undefined ? template : {}) : (template || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据构件id判断项目中是否存组件
         * @param {string} id id
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkSuiteExistsByIdsUsingPOST: async (id: string, projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling checkSuiteExistsByIdsUsingPOST.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling checkSuiteExistsByIdsUsingPOST.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 判断项目中是否存在同名组件
         * @param {string} name 构件名称
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkSuiteExistsByNameUsingGET: async (name: string, projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling checkSuiteExistsByNameUsingGET.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling checkSuiteExistsByNameUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/name`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 公共库构件查询
         * @param {SuiteSearch} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonSuitesSearchUsingPOST: async (condition: SuiteSearch, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'condition' is not null or undefined
            if (condition === null || condition === undefined) {
                throw new RequiredError('condition','Required parameter condition was null or undefined when calling commonSuitesSearchUsingPOST.');
            }
            const localVarPath = `/structural/common/suites/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof condition !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(condition !== undefined ? condition : {}) : (condition || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目构件的下载地址
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件Id
         * @param {string} version 构件版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadSuitesSearchUsingGET: async (projectId: string, suiteId: string, version: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling downloadSuitesSearchUsingGET.');
            }
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling downloadSuitesSearchUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling downloadSuitesSearchUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{suiteId}/{version}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取公共构件组件详细信息
         * @param {string} suiteId 构件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommonSuiteInfoDetailUsingGET: async (suiteId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling getCommonSuiteInfoDetailUsingGET.');
            }
            const localVarPath = `/structural/common/suite/{suiteId}/deail`
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取公共构件坞分类列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommonSuiteUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/structural/common/classify`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目构件坞分类列表
         * @param {string} projectId 项目id
         * @param {ProjectSuiteCategorySearch} search search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteCategoryUsingPOST: async (projectId: string, search: ProjectSuiteCategorySearch, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getProjectSuiteCategoryUsingPOST.');
            }
            // verify required parameter 'search' is not null or undefined
            if (search === null || search === undefined) {
                throw new RequiredError('search','Required parameter search was null or undefined when calling getProjectSuiteCategoryUsingPOST.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/category`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof search !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(search !== undefined ? search : {}) : (search || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目构件family详细信息
         * @param {string} name name
         * @param {string} projectId projectId
         * @param {string} suiteId suiteId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteFamilyDetailUsingGET: async (name: string, projectId: string, suiteId: string, version: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling getProjectSuiteFamilyDetailUsingGET.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getProjectSuiteFamilyDetailUsingGET.');
            }
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling getProjectSuiteFamilyDetailUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getProjectSuiteFamilyDetailUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{suiteId}/{version}/family/info`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目构件详细信息
         * @param {string} projectId projectId
         * @param {string} suiteId suiteId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteInfoDetailUsingGET: async (projectId: string, suiteId: string, version: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getProjectSuiteInfoDetailUsingGET.');
            }
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling getProjectSuiteInfoDetailUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getProjectSuiteInfoDetailUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{suiteId}/{version}/info`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取公共构件坞某分类下的构件元素
         * @param {string} category 分类Id
         * @param {number} [page] page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuiteDetailsUsingGET: async (category: string, page?: number, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling getSuiteDetailsUsingGET.');
            }
            const localVarPath = `/structural/common/classify/{category}/suites`
                .replace(`{${"category"}}`, encodeURIComponent(String(category)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 为项目创建构件坞的映射(该接口成功返回10000，而不是success)
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initProject4SuiteUsingPOST: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling initProject4SuiteUsingPOST.');
            }
            const localVarPath = `/structural/project/{projectId}/mapper`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目中所有最新版本的可用构件列表(该接口成功返回10000，而不是success)
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectSuitesUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling listProjectSuitesUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suites/list`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目构件图例下载的url
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {string} version 版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadSuitePlaceholderDownloadUrlUsingGET: async (projectId: string, suiteId: string, version: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling loadSuitePlaceholderDownloadUrlUsingGET.');
            }
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling loadSuitePlaceholderDownloadUrlUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling loadSuitePlaceholderDownloadUrlUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{suiteId}/placeholder/url`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目构件的图例
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {string} version 版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadSuitePlaceholderUsingGET: async (projectId: string, suiteId: string, version: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling loadSuitePlaceholderUsingGET.');
            }
            // verify required parameter 'suiteId' is not null or undefined
            if (suiteId === null || suiteId === undefined) {
                throw new RequiredError('suiteId','Required parameter suiteId was null or undefined when calling loadSuitePlaceholderUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling loadSuitePlaceholderUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/{suiteId}/placeholder`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"suiteId"}}`, encodeURIComponent(String(suiteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 项目构件查询
         * @param {ProjectSuiteSearch} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectSuitesSearchUsingPOST: async (condition: ProjectSuiteSearch, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'condition' is not null or undefined
            if (condition === null || condition === undefined) {
                throw new RequiredError('condition','Required parameter condition was null or undefined when calling projectSuitesSearchUsingPOST.');
            }
            const localVarPath = `/structural/project/suites/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof condition !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(condition !== undefined ? condition : {}) : (condition || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 上传第三方项目构件
         * @param {string} projectId 项目Id
         * @param {object} params params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadThirdPartSuiteUsingGET: async (projectId: string, params: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling uploadThirdPartSuiteUsingGET.');
            }
            // verify required parameter 'params' is not null or undefined
            if (params === null || params === undefined) {
                throw new RequiredError('params','Required parameter params was null or undefined when calling uploadThirdPartSuiteUsingGET.');
            }
            const localVarPath = `/structural/project/{projectId}/suite/upload`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof params !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(params !== undefined ? params : {}) : (params || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 申请构件上传的url地址
         * @param {string} md 构件摘要
         * @param {string} md5 md5
         * @param {string} name 构件名称
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async askForSuitesUploadUrlUsingGET(md: string, md5: string, name: string, projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).askForSuitesUploadUrlUsingGET(md, md5, name, projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 向项目中预置公共构件
         * @param {ProjectSuiteBinder} binder binder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bindProjectSuitesUsingPOST(binder: ProjectSuiteBinder, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).bindProjectSuitesUsingPOST(binder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据模板数据向项目中预置构件
         * @param {string} projectId projectId
         * @param {Array<ProjectStructureVO>} template template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bindProjectSuitesUsingPOST1(projectId: string, template: Array<ProjectStructureVO>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).bindProjectSuitesUsingPOST1(projectId, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据构件id判断项目中是否存组件
         * @param {string} id id
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkSuiteExistsByIdsUsingPOST(id: string, projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).checkSuiteExistsByIdsUsingPOST(id, projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 判断项目中是否存在同名组件
         * @param {string} name 构件名称
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkSuiteExistsByNameUsingGET(name: string, projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).checkSuiteExistsByNameUsingGET(name, projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 公共库构件查询
         * @param {SuiteSearch} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commonSuitesSearchUsingPOST(condition: SuiteSearch, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).commonSuitesSearchUsingPOST(condition, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目构件的下载地址
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件Id
         * @param {string} version 构件版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadSuitesSearchUsingGET(projectId: string, suiteId: string, version: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).downloadSuitesSearchUsingGET(projectId, suiteId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取公共构件组件详细信息
         * @param {string} suiteId 构件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommonSuiteInfoDetailUsingGET(suiteId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getCommonSuiteInfoDetailUsingGET(suiteId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取公共构件坞分类列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommonSuiteUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getCommonSuiteUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目构件坞分类列表
         * @param {string} projectId 项目id
         * @param {ProjectSuiteCategorySearch} search search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectSuiteCategoryUsingPOST(projectId: string, search: ProjectSuiteCategorySearch, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getProjectSuiteCategoryUsingPOST(projectId, search, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目构件family详细信息
         * @param {string} name name
         * @param {string} projectId projectId
         * @param {string} suiteId suiteId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectSuiteFamilyDetailUsingGET(name: string, projectId: string, suiteId: string, version: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getProjectSuiteFamilyDetailUsingGET(name, projectId, suiteId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目构件详细信息
         * @param {string} projectId projectId
         * @param {string} suiteId suiteId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectSuiteInfoDetailUsingGET(projectId: string, suiteId: string, version: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getProjectSuiteInfoDetailUsingGET(projectId, suiteId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取公共构件坞某分类下的构件元素
         * @param {string} category 分类Id
         * @param {number} [page] page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSuiteDetailsUsingGET(category: string, page?: number, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getSuiteDetailsUsingGET(category, page, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 为项目创建构件坞的映射(该接口成功返回10000，而不是success)
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initProject4SuiteUsingPOST(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseFakeProject>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).initProject4SuiteUsingPOST(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目中所有最新版本的可用构件列表(该接口成功返回10000，而不是success)
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjectSuitesUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListProjectStructureVO>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listProjectSuitesUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目构件图例下载的url
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {string} version 版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadSuitePlaceholderDownloadUrlUsingGET(projectId: string, suiteId: string, version: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).loadSuitePlaceholderDownloadUrlUsingGET(projectId, suiteId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目构件的图例
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {string} version 版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadSuitePlaceholderUsingGET(projectId: string, suiteId: string, version: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).loadSuitePlaceholderUsingGET(projectId, suiteId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 项目构件查询
         * @param {ProjectSuiteSearch} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectSuitesSearchUsingPOST(condition: ProjectSuiteSearch, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectSuiteResultBean>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).projectSuitesSearchUsingPOST(condition, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 上传第三方项目构件
         * @param {string} projectId 项目Id
         * @param {object} params params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadThirdPartSuiteUsingGET(projectId: string, params: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadResultBean>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).uploadThirdPartSuiteUsingGET(projectId, params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 申请构件上传的url地址
         * @param {string} md 构件摘要
         * @param {string} md5 md5
         * @param {string} name 构件名称
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        askForSuitesUploadUrlUsingGET(md: string, md5: string, name: string, projectId: string, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).askForSuitesUploadUrlUsingGET(md, md5, name, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 向项目中预置公共构件
         * @param {ProjectSuiteBinder} binder binder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindProjectSuitesUsingPOST(binder: ProjectSuiteBinder, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).bindProjectSuitesUsingPOST(binder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据模板数据向项目中预置构件
         * @param {string} projectId projectId
         * @param {Array<ProjectStructureVO>} template template
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bindProjectSuitesUsingPOST1(projectId: string, template: Array<ProjectStructureVO>, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).bindProjectSuitesUsingPOST1(projectId, template, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据构件id判断项目中是否存组件
         * @param {string} id id
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkSuiteExistsByIdsUsingPOST(id: string, projectId: string, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).checkSuiteExistsByIdsUsingPOST(id, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 判断项目中是否存在同名组件
         * @param {string} name 构件名称
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkSuiteExistsByNameUsingGET(name: string, projectId: string, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).checkSuiteExistsByNameUsingGET(name, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 公共库构件查询
         * @param {SuiteSearch} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commonSuitesSearchUsingPOST(condition: SuiteSearch, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).commonSuitesSearchUsingPOST(condition, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目构件的下载地址
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件Id
         * @param {string} version 构件版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadSuitesSearchUsingGET(projectId: string, suiteId: string, version: string, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).downloadSuitesSearchUsingGET(projectId, suiteId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取公共构件组件详细信息
         * @param {string} suiteId 构件id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommonSuiteInfoDetailUsingGET(suiteId: string, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).getCommonSuiteInfoDetailUsingGET(suiteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取公共构件坞分类列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommonSuiteUsingGET(options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).getCommonSuiteUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目构件坞分类列表
         * @param {string} projectId 项目id
         * @param {ProjectSuiteCategorySearch} search search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteCategoryUsingPOST(projectId: string, search: ProjectSuiteCategorySearch, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).getProjectSuiteCategoryUsingPOST(projectId, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目构件family详细信息
         * @param {string} name name
         * @param {string} projectId projectId
         * @param {string} suiteId suiteId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteFamilyDetailUsingGET(name: string, projectId: string, suiteId: string, version: number, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).getProjectSuiteFamilyDetailUsingGET(name, projectId, suiteId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目构件详细信息
         * @param {string} projectId projectId
         * @param {string} suiteId suiteId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectSuiteInfoDetailUsingGET(projectId: string, suiteId: string, version: number, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).getProjectSuiteInfoDetailUsingGET(projectId, suiteId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取公共构件坞某分类下的构件元素
         * @param {string} category 分类Id
         * @param {number} [page] page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuiteDetailsUsingGET(category: string, page?: number, pageSize?: number, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).getSuiteDetailsUsingGET(category, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 为项目创建构件坞的映射(该接口成功返回10000，而不是success)
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initProject4SuiteUsingPOST(projectId: string, options?: any): AxiosPromise<ResponseFakeProject> {
            return DefaultApiFp(configuration).initProject4SuiteUsingPOST(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目中所有最新版本的可用构件列表(该接口成功返回10000，而不是success)
         * @param {string} projectId 项目id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectSuitesUsingGET(projectId: string, options?: any): AxiosPromise<ResponseListProjectStructureVO> {
            return DefaultApiFp(configuration).listProjectSuitesUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目构件图例下载的url
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {string} version 版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadSuitePlaceholderDownloadUrlUsingGET(projectId: string, suiteId: string, version: string, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).loadSuitePlaceholderDownloadUrlUsingGET(projectId, suiteId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目构件的图例
         * @param {string} projectId 项目Id
         * @param {string} suiteId 构件id
         * @param {string} version 版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadSuitePlaceholderUsingGET(projectId: string, suiteId: string, version: string, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).loadSuitePlaceholderUsingGET(projectId, suiteId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 项目构件查询
         * @param {ProjectSuiteSearch} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectSuitesSearchUsingPOST(condition: ProjectSuiteSearch, options?: any): AxiosPromise<ProjectSuiteResultBean> {
            return DefaultApiFp(configuration).projectSuitesSearchUsingPOST(condition, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 上传第三方项目构件
         * @param {string} projectId 项目Id
         * @param {object} params params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadThirdPartSuiteUsingGET(projectId: string, params: object, options?: any): AxiosPromise<UploadResultBean> {
            return DefaultApiFp(configuration).uploadThirdPartSuiteUsingGET(projectId, params, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 申请构件上传的url地址
     * @param {string} md 构件摘要
     * @param {string} md5 md5
     * @param {string} name 构件名称
     * @param {string} projectId 项目Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public askForSuitesUploadUrlUsingGET(md: string, md5: string, name: string, projectId: string, options?: any) {
        return DefaultApiFp(this.configuration).askForSuitesUploadUrlUsingGET(md, md5, name, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 向项目中预置公共构件
     * @param {ProjectSuiteBinder} binder binder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public bindProjectSuitesUsingPOST(binder: ProjectSuiteBinder, options?: any) {
        return DefaultApiFp(this.configuration).bindProjectSuitesUsingPOST(binder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据模板数据向项目中预置构件
     * @param {string} projectId projectId
     * @param {Array<ProjectStructureVO>} template template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public bindProjectSuitesUsingPOST1(projectId: string, template: Array<ProjectStructureVO>, options?: any) {
        return DefaultApiFp(this.configuration).bindProjectSuitesUsingPOST1(projectId, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据构件id判断项目中是否存组件
     * @param {string} id id
     * @param {string} projectId 项目Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public checkSuiteExistsByIdsUsingPOST(id: string, projectId: string, options?: any) {
        return DefaultApiFp(this.configuration).checkSuiteExistsByIdsUsingPOST(id, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 判断项目中是否存在同名组件
     * @param {string} name 构件名称
     * @param {string} projectId 项目Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public checkSuiteExistsByNameUsingGET(name: string, projectId: string, options?: any) {
        return DefaultApiFp(this.configuration).checkSuiteExistsByNameUsingGET(name, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 公共库构件查询
     * @param {SuiteSearch} condition condition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public commonSuitesSearchUsingPOST(condition: SuiteSearch, options?: any) {
        return DefaultApiFp(this.configuration).commonSuitesSearchUsingPOST(condition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目构件的下载地址
     * @param {string} projectId 项目Id
     * @param {string} suiteId 构件Id
     * @param {string} version 构件版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public downloadSuitesSearchUsingGET(projectId: string, suiteId: string, version: string, options?: any) {
        return DefaultApiFp(this.configuration).downloadSuitesSearchUsingGET(projectId, suiteId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取公共构件组件详细信息
     * @param {string} suiteId 构件id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCommonSuiteInfoDetailUsingGET(suiteId: string, options?: any) {
        return DefaultApiFp(this.configuration).getCommonSuiteInfoDetailUsingGET(suiteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取公共构件坞分类列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCommonSuiteUsingGET(options?: any) {
        return DefaultApiFp(this.configuration).getCommonSuiteUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目构件坞分类列表
     * @param {string} projectId 项目id
     * @param {ProjectSuiteCategorySearch} search search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectSuiteCategoryUsingPOST(projectId: string, search: ProjectSuiteCategorySearch, options?: any) {
        return DefaultApiFp(this.configuration).getProjectSuiteCategoryUsingPOST(projectId, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目构件family详细信息
     * @param {string} name name
     * @param {string} projectId projectId
     * @param {string} suiteId suiteId
     * @param {number} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectSuiteFamilyDetailUsingGET(name: string, projectId: string, suiteId: string, version: number, options?: any) {
        return DefaultApiFp(this.configuration).getProjectSuiteFamilyDetailUsingGET(name, projectId, suiteId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目构件详细信息
     * @param {string} projectId projectId
     * @param {string} suiteId suiteId
     * @param {number} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectSuiteInfoDetailUsingGET(projectId: string, suiteId: string, version: number, options?: any) {
        return DefaultApiFp(this.configuration).getProjectSuiteInfoDetailUsingGET(projectId, suiteId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取公共构件坞某分类下的构件元素
     * @param {string} category 分类Id
     * @param {number} [page] page
     * @param {number} [pageSize] pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSuiteDetailsUsingGET(category: string, page?: number, pageSize?: number, options?: any) {
        return DefaultApiFp(this.configuration).getSuiteDetailsUsingGET(category, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 为项目创建构件坞的映射(该接口成功返回10000，而不是success)
     * @param {string} projectId 项目id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public initProject4SuiteUsingPOST(projectId: string, options?: any) {
        return DefaultApiFp(this.configuration).initProject4SuiteUsingPOST(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目中所有最新版本的可用构件列表(该接口成功返回10000，而不是success)
     * @param {string} projectId 项目id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listProjectSuitesUsingGET(projectId: string, options?: any) {
        return DefaultApiFp(this.configuration).listProjectSuitesUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目构件图例下载的url
     * @param {string} projectId 项目Id
     * @param {string} suiteId 构件id
     * @param {string} version 版本号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loadSuitePlaceholderDownloadUrlUsingGET(projectId: string, suiteId: string, version: string, options?: any) {
        return DefaultApiFp(this.configuration).loadSuitePlaceholderDownloadUrlUsingGET(projectId, suiteId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目构件的图例
     * @param {string} projectId 项目Id
     * @param {string} suiteId 构件id
     * @param {string} version 版本号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loadSuitePlaceholderUsingGET(projectId: string, suiteId: string, version: string, options?: any) {
        return DefaultApiFp(this.configuration).loadSuitePlaceholderUsingGET(projectId, suiteId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 项目构件查询
     * @param {ProjectSuiteSearch} condition condition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public projectSuitesSearchUsingPOST(condition: ProjectSuiteSearch, options?: any) {
        return DefaultApiFp(this.configuration).projectSuitesSearchUsingPOST(condition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 上传第三方项目构件
     * @param {string} projectId 项目Id
     * @param {object} params params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadThirdPartSuiteUsingGET(projectId: string, params: object, options?: any) {
        return DefaultApiFp(this.configuration).uploadThirdPartSuiteUsingGET(projectId, params, options).then((request) => request(this.axios, this.basePath));
    }

}

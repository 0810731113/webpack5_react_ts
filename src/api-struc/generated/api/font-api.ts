// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CommonFontDto } from '../model';
// @ts-ignore
import { ProjectFontDto } from '../model';
// @ts-ignore
import { ResponseCommonFontVO } from '../model';
// @ts-ignore
import { ResponseFileTransferBean } from '../model';
// @ts-ignore
import { ResponseListCommonFontVO } from '../model';
// @ts-ignore
import { ResponseListProjectFontVO } from '../model';
// @ts-ignore
import { ResponseProjectFontVO } from '../model';
/**
 * FontApi - axios parameter creator
 * @export
 */
export const FontApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取项目字体下载的uri
         * @param {number} fontId 字体Id
         * @param {string} projectId 项目Id
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyDownLoadCommonFontUriUsingGET: async (fontId: number, projectId: string, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fontId' is not null or undefined
            if (fontId === null || fontId === undefined) {
                throw new RequiredError('fontId','Required parameter fontId was null or undefined when calling applyDownLoadCommonFontUriUsingGET.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling applyDownLoadCommonFontUriUsingGET.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling applyDownLoadCommonFontUriUsingGET.');
            }
            const localVarPath = `/style-family/font/project/download/uri`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fontId !== undefined) {
                localVarQueryParameter['fontId'] = fontId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 申请上传公共字体的uri
         * @param {string} name 字体名称(含后缀)
         * @param {boolean} override 重复是否覆盖
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyUploadCommonFontUriUsingGET: async (name: string, override: boolean, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling applyUploadCommonFontUriUsingGET.');
            }
            // verify required parameter 'override' is not null or undefined
            if (override === null || override === undefined) {
                throw new RequiredError('override','Required parameter override was null or undefined when calling applyUploadCommonFontUriUsingGET.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling applyUploadCommonFontUriUsingGET.');
            }
            const localVarPath = `/style-family/font/common/upload/uri`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (override !== undefined) {
                localVarQueryParameter['override'] = override;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 申请上传项目字体的uri
         * @param {string} name 字体名称(含后缀)
         * @param {boolean} override 同名是否覆盖
         * @param {string} projectId 项目Id
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyUploadCommonFontUriUsingGET1: async (name: string, override: boolean, projectId: string, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling applyUploadCommonFontUriUsingGET1.');
            }
            // verify required parameter 'override' is not null or undefined
            if (override === null || override === undefined) {
                throw new RequiredError('override','Required parameter override was null or undefined when calling applyUploadCommonFontUriUsingGET1.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling applyUploadCommonFontUriUsingGET1.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling applyUploadCommonFontUriUsingGET1.');
            }
            const localVarPath = `/style-family/font/project/upload/uri`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (override !== undefined) {
                localVarQueryParameter['override'] = override;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 提交上传公共字体的信息
         * @param {string} xGdcUserid x-gdc-userid
         * @param {CommonFontDto} font font
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commitCommonFontUsingPOST: async (xGdcUserid: string, font: CommonFontDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling commitCommonFontUsingPOST.');
            }
            // verify required parameter 'font' is not null or undefined
            if (font === null || font === undefined) {
                throw new RequiredError('font','Required parameter font was null or undefined when calling commitCommonFontUsingPOST.');
            }
            const localVarPath = `/style-family/font/common/commit`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof font !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(font !== undefined ? font : {}) : (font || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取公共字体列表
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllCommonFontUsingGET: async (xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling listAllCommonFontUsingGET.');
            }
            const localVarPath = `/style-family/font/common/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目字体列表
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectFontUsingGET: async (projectId: string, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling listProjectFontUsingGET.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling listProjectFontUsingGET.');
            }
            const localVarPath = `/style-family/font/project/list/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除公共字体
         * @param {number} fontId 字体Id
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCommonFontUsingDELETE: async (fontId: number, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fontId' is not null or undefined
            if (fontId === null || fontId === undefined) {
                throw new RequiredError('fontId','Required parameter fontId was null or undefined when calling removeCommonFontUsingDELETE.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling removeCommonFontUsingDELETE.');
            }
            const localVarPath = `/style-family/font/common/{fontId}`
                .replace(`{${"fontId"}}`, encodeURIComponent(String(fontId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除项目字体
         * @param {string} fontId 字体Id
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCommonFontUsingDELETE1: async (fontId: string, projectId: string, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fontId' is not null or undefined
            if (fontId === null || fontId === undefined) {
                throw new RequiredError('fontId','Required parameter fontId was null or undefined when calling removeCommonFontUsingDELETE1.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling removeCommonFontUsingDELETE1.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling removeCommonFontUsingDELETE1.');
            }
            const localVarPath = `/style-family/font/project/{projectId}/{fontId}`
                .replace(`{${"fontId"}}`, encodeURIComponent(String(fontId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 项目字体重命名
         * @param {number} fontId fontId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ProjectFontDto} font font
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameProjectFontUsingPUT: async (fontId: number, xGdcUserid: string, font: ProjectFontDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fontId' is not null or undefined
            if (fontId === null || fontId === undefined) {
                throw new RequiredError('fontId','Required parameter fontId was null or undefined when calling renameProjectFontUsingPUT.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling renameProjectFontUsingPUT.');
            }
            // verify required parameter 'font' is not null or undefined
            if (font === null || font === undefined) {
                throw new RequiredError('font','Required parameter font was null or undefined when calling renameProjectFontUsingPUT.');
            }
            const localVarPath = `/style-family/font/project/rename/{fontId}`
                .replace(`{${"fontId"}}`, encodeURIComponent(String(fontId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof font !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(font !== undefined ? font : {}) : (font || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 提交上传项目字体的信息
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ProjectFontDto} font font
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitProjectFontUsingPOST: async (xGdcUserid: string, font: ProjectFontDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling submitProjectFontUsingPOST.');
            }
            // verify required parameter 'font' is not null or undefined
            if (font === null || font === undefined) {
                throw new RequiredError('font','Required parameter font was null or undefined when calling submitProjectFontUsingPOST.');
            }
            const localVarPath = `/style-family/font/project/commit`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof font !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(font !== undefined ? font : {}) : (font || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FontApi - functional programming interface
 * @export
 */
export const FontApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取项目字体下载的uri
         * @param {number} fontId 字体Id
         * @param {string} projectId 项目Id
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyDownLoadCommonFontUriUsingGET(fontId: number, projectId: string, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseFileTransferBean>> {
            const localVarAxiosArgs = await FontApiAxiosParamCreator(configuration).applyDownLoadCommonFontUriUsingGET(fontId, projectId, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 申请上传公共字体的uri
         * @param {string} name 字体名称(含后缀)
         * @param {boolean} override 重复是否覆盖
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyUploadCommonFontUriUsingGET(name: string, override: boolean, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseFileTransferBean>> {
            const localVarAxiosArgs = await FontApiAxiosParamCreator(configuration).applyUploadCommonFontUriUsingGET(name, override, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 申请上传项目字体的uri
         * @param {string} name 字体名称(含后缀)
         * @param {boolean} override 同名是否覆盖
         * @param {string} projectId 项目Id
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyUploadCommonFontUriUsingGET1(name: string, override: boolean, projectId: string, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseFileTransferBean>> {
            const localVarAxiosArgs = await FontApiAxiosParamCreator(configuration).applyUploadCommonFontUriUsingGET1(name, override, projectId, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 提交上传公共字体的信息
         * @param {string} xGdcUserid x-gdc-userid
         * @param {CommonFontDto} font font
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commitCommonFontUsingPOST(xGdcUserid: string, font: CommonFontDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCommonFontVO>> {
            const localVarAxiosArgs = await FontApiAxiosParamCreator(configuration).commitCommonFontUsingPOST(xGdcUserid, font, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取公共字体列表
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllCommonFontUsingGET(xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListCommonFontVO>> {
            const localVarAxiosArgs = await FontApiAxiosParamCreator(configuration).listAllCommonFontUsingGET(xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目字体列表
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjectFontUsingGET(projectId: string, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListProjectFontVO>> {
            const localVarAxiosArgs = await FontApiAxiosParamCreator(configuration).listProjectFontUsingGET(projectId, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除公共字体
         * @param {number} fontId 字体Id
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCommonFontUsingDELETE(fontId: number, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCommonFontVO>> {
            const localVarAxiosArgs = await FontApiAxiosParamCreator(configuration).removeCommonFontUsingDELETE(fontId, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除项目字体
         * @param {string} fontId 字体Id
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCommonFontUsingDELETE1(fontId: string, projectId: string, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProjectFontVO>> {
            const localVarAxiosArgs = await FontApiAxiosParamCreator(configuration).removeCommonFontUsingDELETE1(fontId, projectId, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 项目字体重命名
         * @param {number} fontId fontId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ProjectFontDto} font font
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async renameProjectFontUsingPUT(fontId: number, xGdcUserid: string, font: ProjectFontDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProjectFontVO>> {
            const localVarAxiosArgs = await FontApiAxiosParamCreator(configuration).renameProjectFontUsingPUT(fontId, xGdcUserid, font, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 提交上传项目字体的信息
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ProjectFontDto} font font
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitProjectFontUsingPOST(xGdcUserid: string, font: ProjectFontDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProjectFontVO>> {
            const localVarAxiosArgs = await FontApiAxiosParamCreator(configuration).submitProjectFontUsingPOST(xGdcUserid, font, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FontApi - factory interface
 * @export
 */
export const FontApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取项目字体下载的uri
         * @param {number} fontId 字体Id
         * @param {string} projectId 项目Id
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyDownLoadCommonFontUriUsingGET(fontId: number, projectId: string, xGdcUserid: string, options?: any): AxiosPromise<ResponseFileTransferBean> {
            return FontApiFp(configuration).applyDownLoadCommonFontUriUsingGET(fontId, projectId, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 申请上传公共字体的uri
         * @param {string} name 字体名称(含后缀)
         * @param {boolean} override 重复是否覆盖
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyUploadCommonFontUriUsingGET(name: string, override: boolean, xGdcUserid: string, options?: any): AxiosPromise<ResponseFileTransferBean> {
            return FontApiFp(configuration).applyUploadCommonFontUriUsingGET(name, override, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 申请上传项目字体的uri
         * @param {string} name 字体名称(含后缀)
         * @param {boolean} override 同名是否覆盖
         * @param {string} projectId 项目Id
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyUploadCommonFontUriUsingGET1(name: string, override: boolean, projectId: string, xGdcUserid: string, options?: any): AxiosPromise<ResponseFileTransferBean> {
            return FontApiFp(configuration).applyUploadCommonFontUriUsingGET1(name, override, projectId, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 提交上传公共字体的信息
         * @param {string} xGdcUserid x-gdc-userid
         * @param {CommonFontDto} font font
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commitCommonFontUsingPOST(xGdcUserid: string, font: CommonFontDto, options?: any): AxiosPromise<ResponseCommonFontVO> {
            return FontApiFp(configuration).commitCommonFontUsingPOST(xGdcUserid, font, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取公共字体列表
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllCommonFontUsingGET(xGdcUserid: string, options?: any): AxiosPromise<ResponseListCommonFontVO> {
            return FontApiFp(configuration).listAllCommonFontUsingGET(xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目字体列表
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectFontUsingGET(projectId: string, xGdcUserid: string, options?: any): AxiosPromise<ResponseListProjectFontVO> {
            return FontApiFp(configuration).listProjectFontUsingGET(projectId, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除公共字体
         * @param {number} fontId 字体Id
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCommonFontUsingDELETE(fontId: number, xGdcUserid: string, options?: any): AxiosPromise<ResponseCommonFontVO> {
            return FontApiFp(configuration).removeCommonFontUsingDELETE(fontId, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除项目字体
         * @param {string} fontId 字体Id
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCommonFontUsingDELETE1(fontId: string, projectId: string, xGdcUserid: string, options?: any): AxiosPromise<ResponseProjectFontVO> {
            return FontApiFp(configuration).removeCommonFontUsingDELETE1(fontId, projectId, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 项目字体重命名
         * @param {number} fontId fontId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ProjectFontDto} font font
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameProjectFontUsingPUT(fontId: number, xGdcUserid: string, font: ProjectFontDto, options?: any): AxiosPromise<ResponseProjectFontVO> {
            return FontApiFp(configuration).renameProjectFontUsingPUT(fontId, xGdcUserid, font, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 提交上传项目字体的信息
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ProjectFontDto} font font
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitProjectFontUsingPOST(xGdcUserid: string, font: ProjectFontDto, options?: any): AxiosPromise<ResponseProjectFontVO> {
            return FontApiFp(configuration).submitProjectFontUsingPOST(xGdcUserid, font, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FontApi - object-oriented interface
 * @export
 * @class FontApi
 * @extends {BaseAPI}
 */
export class FontApi extends BaseAPI {
    /**
     * 
     * @summary 获取项目字体下载的uri
     * @param {number} fontId 字体Id
     * @param {string} projectId 项目Id
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FontApi
     */
    public applyDownLoadCommonFontUriUsingGET(fontId: number, projectId: string, xGdcUserid: string, options?: any) {
        return FontApiFp(this.configuration).applyDownLoadCommonFontUriUsingGET(fontId, projectId, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 申请上传公共字体的uri
     * @param {string} name 字体名称(含后缀)
     * @param {boolean} override 重复是否覆盖
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FontApi
     */
    public applyUploadCommonFontUriUsingGET(name: string, override: boolean, xGdcUserid: string, options?: any) {
        return FontApiFp(this.configuration).applyUploadCommonFontUriUsingGET(name, override, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 申请上传项目字体的uri
     * @param {string} name 字体名称(含后缀)
     * @param {boolean} override 同名是否覆盖
     * @param {string} projectId 项目Id
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FontApi
     */
    public applyUploadCommonFontUriUsingGET1(name: string, override: boolean, projectId: string, xGdcUserid: string, options?: any) {
        return FontApiFp(this.configuration).applyUploadCommonFontUriUsingGET1(name, override, projectId, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 提交上传公共字体的信息
     * @param {string} xGdcUserid x-gdc-userid
     * @param {CommonFontDto} font font
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FontApi
     */
    public commitCommonFontUsingPOST(xGdcUserid: string, font: CommonFontDto, options?: any) {
        return FontApiFp(this.configuration).commitCommonFontUsingPOST(xGdcUserid, font, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取公共字体列表
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FontApi
     */
    public listAllCommonFontUsingGET(xGdcUserid: string, options?: any) {
        return FontApiFp(this.configuration).listAllCommonFontUsingGET(xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目字体列表
     * @param {string} projectId projectId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FontApi
     */
    public listProjectFontUsingGET(projectId: string, xGdcUserid: string, options?: any) {
        return FontApiFp(this.configuration).listProjectFontUsingGET(projectId, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除公共字体
     * @param {number} fontId 字体Id
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FontApi
     */
    public removeCommonFontUsingDELETE(fontId: number, xGdcUserid: string, options?: any) {
        return FontApiFp(this.configuration).removeCommonFontUsingDELETE(fontId, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除项目字体
     * @param {string} fontId 字体Id
     * @param {string} projectId projectId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FontApi
     */
    public removeCommonFontUsingDELETE1(fontId: string, projectId: string, xGdcUserid: string, options?: any) {
        return FontApiFp(this.configuration).removeCommonFontUsingDELETE1(fontId, projectId, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 项目字体重命名
     * @param {number} fontId fontId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {ProjectFontDto} font font
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FontApi
     */
    public renameProjectFontUsingPUT(fontId: number, xGdcUserid: string, font: ProjectFontDto, options?: any) {
        return FontApiFp(this.configuration).renameProjectFontUsingPUT(fontId, xGdcUserid, font, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 提交上传项目字体的信息
     * @param {string} xGdcUserid x-gdc-userid
     * @param {ProjectFontDto} font font
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FontApi
     */
    public submitProjectFontUsingPOST(xGdcUserid: string, font: ProjectFontDto, options?: any) {
        return FontApiFp(this.configuration).submitProjectFontUsingPOST(xGdcUserid, font, options).then((request) => request(this.axios, this.basePath));
    }

}

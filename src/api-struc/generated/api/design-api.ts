// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * DesignApi - axios parameter creator
 * @export
 */
export const DesignApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获得专辑里视频列表
         * @param {string} albumsId 专辑Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbumsVCRListUsingGET: async (albumsId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumsId' is not null or undefined
            if (albumsId === null || albumsId === undefined) {
                throw new RequiredError('albumsId','Required parameter albumsId was null or undefined when calling getAlbumsVCRListUsingGET.');
            }
            const localVarPath = `/design/resource/signature/vcr/{albumsId}/list`
                .replace(`{${"albumsId"}}`, encodeURIComponent(String(albumsId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获得签名后的软件下载地址
         * @param {'garch' | 'gstr' | 'gmep'} softwareCode 软件编码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSoftWareDownLoadSignatureUrlUsingGET: async (softwareCode: 'garch' | 'gstr' | 'gmep', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'softwareCode' is not null or undefined
            if (softwareCode === null || softwareCode === undefined) {
                throw new RequiredError('softwareCode','Required parameter softwareCode was null or undefined when calling getSoftWareDownLoadSignatureUrlUsingGET.');
            }
            const localVarPath = `/design/resource/signature/software/{softwareCode}/download/url`
                .replace(`{${"softwareCode"}}`, encodeURIComponent(String(softwareCode)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获得签名后的视频播放地址
         * @param {string} videoId 视频Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVCRPlaySignatureUrlUsingGET: async (videoId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            if (videoId === null || videoId === undefined) {
                throw new RequiredError('videoId','Required parameter videoId was null or undefined when calling getVCRPlaySignatureUrlUsingGET.');
            }
            const localVarPath = `/design/resource/signature/vcr/{videoId}/url`
                .replace(`{${"videoId"}}`, encodeURIComponent(String(videoId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DesignApi - functional programming interface
 * @export
 */
export const DesignApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获得专辑里视频列表
         * @param {string} albumsId 专辑Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlbumsVCRListUsingGET(albumsId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DesignApiAxiosParamCreator(configuration).getAlbumsVCRListUsingGET(albumsId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获得签名后的软件下载地址
         * @param {'garch' | 'gstr' | 'gmep'} softwareCode 软件编码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSoftWareDownLoadSignatureUrlUsingGET(softwareCode: 'garch' | 'gstr' | 'gmep', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DesignApiAxiosParamCreator(configuration).getSoftWareDownLoadSignatureUrlUsingGET(softwareCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获得签名后的视频播放地址
         * @param {string} videoId 视频Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVCRPlaySignatureUrlUsingGET(videoId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DesignApiAxiosParamCreator(configuration).getVCRPlaySignatureUrlUsingGET(videoId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DesignApi - factory interface
 * @export
 */
export const DesignApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获得专辑里视频列表
         * @param {string} albumsId 专辑Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbumsVCRListUsingGET(albumsId: string, options?: any): AxiosPromise<object> {
            return DesignApiFp(configuration).getAlbumsVCRListUsingGET(albumsId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获得签名后的软件下载地址
         * @param {'garch' | 'gstr' | 'gmep'} softwareCode 软件编码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSoftWareDownLoadSignatureUrlUsingGET(softwareCode: 'garch' | 'gstr' | 'gmep', options?: any): AxiosPromise<object> {
            return DesignApiFp(configuration).getSoftWareDownLoadSignatureUrlUsingGET(softwareCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获得签名后的视频播放地址
         * @param {string} videoId 视频Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVCRPlaySignatureUrlUsingGET(videoId: string, options?: any): AxiosPromise<object> {
            return DesignApiFp(configuration).getVCRPlaySignatureUrlUsingGET(videoId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DesignApi - object-oriented interface
 * @export
 * @class DesignApi
 * @extends {BaseAPI}
 */
export class DesignApi extends BaseAPI {
    /**
     * 
     * @summary 获得专辑里视频列表
     * @param {string} albumsId 专辑Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DesignApi
     */
    public getAlbumsVCRListUsingGET(albumsId: string, options?: any) {
        return DesignApiFp(this.configuration).getAlbumsVCRListUsingGET(albumsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获得签名后的软件下载地址
     * @param {'garch' | 'gstr' | 'gmep'} softwareCode 软件编码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DesignApi
     */
    public getSoftWareDownLoadSignatureUrlUsingGET(softwareCode: 'garch' | 'gstr' | 'gmep', options?: any) {
        return DesignApiFp(this.configuration).getSoftWareDownLoadSignatureUrlUsingGET(softwareCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获得签名后的视频播放地址
     * @param {string} videoId 视频Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DesignApi
     */
    public getVCRPlaySignatureUrlUsingGET(videoId: string, options?: any) {
        return DesignApiFp(this.configuration).getVCRPlaySignatureUrlUsingGET(videoId, options).then((request) => request(this.axios, this.basePath));
    }

}

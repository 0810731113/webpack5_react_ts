// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResponseListDatasetVersionStatistics } from '../model';
// @ts-ignore
import { ResponseMapstringProjectStatisticsBean } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
// @ts-ignore
import { Responseint } from '../model';
/**
 * DevOpsApi - axios parameter creator
 * @export
 */
export const DevOpsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 数据集运维--获得工作单元统计信息
         * @param {string} dsId dsId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeDatasetStatisticsUsingPOST: async (dsId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling analyzeDatasetStatisticsUsingPOST.');
            }
            const localVarPath = `/dataset/{dsId}/statistics/footprint`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 数据集运维--数据集拷贝
         * @param {string} fromDS 源数据集Id
         * @param {string} toDS 目标数据集Id
         * @param {boolean} [merge] 是否合并版本
         * @param {string} [version] 源数据集版本号，默认为最新
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyDataset4OpsUsingPOST: async (fromDS: string, toDS: string, merge?: boolean, version?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromDS' is not null or undefined
            if (fromDS === null || fromDS === undefined) {
                throw new RequiredError('fromDS','Required parameter fromDS was null or undefined when calling copyDataset4OpsUsingPOST.');
            }
            // verify required parameter 'toDS' is not null or undefined
            if (toDS === null || toDS === undefined) {
                throw new RequiredError('toDS','Required parameter toDS was null or undefined when calling copyDataset4OpsUsingPOST.');
            }
            const localVarPath = `/dataset/ops/copy`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromDS !== undefined) {
                localVarQueryParameter['fromDS'] = fromDS;
            }

            if (merge !== undefined) {
                localVarQueryParameter['merge'] = merge;
            }

            if (toDS !== undefined) {
                localVarQueryParameter['toDS'] = toDS;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 数据集运维--数据集结构升级拷贝
         * @param {string} fromDS fromDS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyDataset4UpGradeOpsUsingPOST: async (fromDS: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromDS' is not null or undefined
            if (fromDS === null || fromDS === undefined) {
                throw new RequiredError('fromDS','Required parameter fromDS was null or undefined when calling copyDataset4UpGradeOpsUsingPOST.');
            }
            const localVarPath = `/dataset/ops/struct/dataset/{fromDS}/upgrade`
                .replace(`{${"fromDS"}}`, encodeURIComponent(String(fromDS)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 数据集运维--数据集结构升级--项目拷贝
         * @param {Array<string>} projects projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyProjects4DatasetUpGradeOpsUsingPOST: async (projects: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projects' is not null or undefined
            if (projects === null || projects === undefined) {
                throw new RequiredError('projects','Required parameter projects was null or undefined when calling copyProjects4DatasetUpGradeOpsUsingPOST.');
            }
            const localVarPath = `/dataset/ops/struct/project/upgrade`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof projects !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(projects !== undefined ? projects : {}) : (projects || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevOpsApi - functional programming interface
 * @export
 */
export const DevOpsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 数据集运维--获得工作单元统计信息
         * @param {string} dsId dsId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyzeDatasetStatisticsUsingPOST(dsId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDatasetVersionStatistics>> {
            const localVarAxiosArgs = await DevOpsApiAxiosParamCreator(configuration).analyzeDatasetStatisticsUsingPOST(dsId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 数据集运维--数据集拷贝
         * @param {string} fromDS 源数据集Id
         * @param {string} toDS 目标数据集Id
         * @param {boolean} [merge] 是否合并版本
         * @param {string} [version] 源数据集版本号，默认为最新
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async copyDataset4OpsUsingPOST(fromDS: string, toDS: string, merge?: boolean, version?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await DevOpsApiAxiosParamCreator(configuration).copyDataset4OpsUsingPOST(fromDS, toDS, merge, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 数据集运维--数据集结构升级拷贝
         * @param {string} fromDS fromDS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async copyDataset4UpGradeOpsUsingPOST(fromDS: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await DevOpsApiAxiosParamCreator(configuration).copyDataset4UpGradeOpsUsingPOST(fromDS, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 数据集运维--数据集结构升级--项目拷贝
         * @param {Array<string>} projects projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async copyProjects4DatasetUpGradeOpsUsingPOST(projects: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMapstringProjectStatisticsBean>> {
            const localVarAxiosArgs = await DevOpsApiAxiosParamCreator(configuration).copyProjects4DatasetUpGradeOpsUsingPOST(projects, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DevOpsApi - factory interface
 * @export
 */
export const DevOpsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 数据集运维--获得工作单元统计信息
         * @param {string} dsId dsId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeDatasetStatisticsUsingPOST(dsId: string, options?: any): AxiosPromise<ResponseListDatasetVersionStatistics> {
            return DevOpsApiFp(configuration).analyzeDatasetStatisticsUsingPOST(dsId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 数据集运维--数据集拷贝
         * @param {string} fromDS 源数据集Id
         * @param {string} toDS 目标数据集Id
         * @param {boolean} [merge] 是否合并版本
         * @param {string} [version] 源数据集版本号，默认为最新
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyDataset4OpsUsingPOST(fromDS: string, toDS: string, merge?: boolean, version?: string, options?: any): AxiosPromise<ResponseVoid> {
            return DevOpsApiFp(configuration).copyDataset4OpsUsingPOST(fromDS, toDS, merge, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 数据集运维--数据集结构升级拷贝
         * @param {string} fromDS fromDS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyDataset4UpGradeOpsUsingPOST(fromDS: string, options?: any): AxiosPromise<Responseint> {
            return DevOpsApiFp(configuration).copyDataset4UpGradeOpsUsingPOST(fromDS, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 数据集运维--数据集结构升级--项目拷贝
         * @param {Array<string>} projects projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyProjects4DatasetUpGradeOpsUsingPOST(projects: Array<string>, options?: any): AxiosPromise<ResponseMapstringProjectStatisticsBean> {
            return DevOpsApiFp(configuration).copyProjects4DatasetUpGradeOpsUsingPOST(projects, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DevOpsApi - object-oriented interface
 * @export
 * @class DevOpsApi
 * @extends {BaseAPI}
 */
export class DevOpsApi extends BaseAPI {
    /**
     * 
     * @summary 数据集运维--获得工作单元统计信息
     * @param {string} dsId dsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevOpsApi
     */
    public analyzeDatasetStatisticsUsingPOST(dsId: string, options?: any) {
        return DevOpsApiFp(this.configuration).analyzeDatasetStatisticsUsingPOST(dsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 数据集运维--数据集拷贝
     * @param {string} fromDS 源数据集Id
     * @param {string} toDS 目标数据集Id
     * @param {boolean} [merge] 是否合并版本
     * @param {string} [version] 源数据集版本号，默认为最新
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevOpsApi
     */
    public copyDataset4OpsUsingPOST(fromDS: string, toDS: string, merge?: boolean, version?: string, options?: any) {
        return DevOpsApiFp(this.configuration).copyDataset4OpsUsingPOST(fromDS, toDS, merge, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 数据集运维--数据集结构升级拷贝
     * @param {string} fromDS fromDS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevOpsApi
     */
    public copyDataset4UpGradeOpsUsingPOST(fromDS: string, options?: any) {
        return DevOpsApiFp(this.configuration).copyDataset4UpGradeOpsUsingPOST(fromDS, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 数据集运维--数据集结构升级--项目拷贝
     * @param {Array<string>} projects projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevOpsApi
     */
    public copyProjects4DatasetUpGradeOpsUsingPOST(projects: Array<string>, options?: any) {
        return DevOpsApiFp(this.configuration).copyProjects4DatasetUpGradeOpsUsingPOST(projects, options).then((request) => request(this.axios, this.basePath));
    }

}

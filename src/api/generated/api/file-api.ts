// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FileInfo } from '../model';
// @ts-ignore
import { ResponseFileInfo } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
/**
 * FileApi - axios parameter creator
 * @export
 */
export const FileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 给文件分配上传的地址
         * @param {string} dsId 文件名称
         * @param {string} fileKey 文件名称
         * @param {boolean} override 文件路径已经存是否覆盖
         * @param {number} version 文件名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPrivateOBSLogPathUsingGET: async (dsId: string, fileKey: string, override: boolean, version: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling createPrivateOBSLogPathUsingGET.');
            }
            // verify required parameter 'fileKey' is not null or undefined
            if (fileKey === null || fileKey === undefined) {
                throw new RequiredError('fileKey','Required parameter fileKey was null or undefined when calling createPrivateOBSLogPathUsingGET.');
            }
            // verify required parameter 'override' is not null or undefined
            if (override === null || override === undefined) {
                throw new RequiredError('override','Required parameter override was null or undefined when calling createPrivateOBSLogPathUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling createPrivateOBSLogPathUsingGET.');
            }
            const localVarPath = `/file/ds/{dsId}/version/{version}/url`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileKey !== undefined) {
                localVarQueryParameter['fileKey'] = fileKey;
            }

            if (override !== undefined) {
                localVarQueryParameter['override'] = override;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 给样式资源文件分配上传的地址
         * @param {string} identifier 文件标识符
         * @param {boolean} override 文件路径已经存是否覆盖
         * @param {string} prefix 前缀
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPrivateOBSStyleFamilyPathUsingGET: async (identifier: string, override: boolean, prefix: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling createPrivateOBSStyleFamilyPathUsingGET.');
            }
            // verify required parameter 'override' is not null or undefined
            if (override === null || override === undefined) {
                throw new RequiredError('override','Required parameter override was null or undefined when calling createPrivateOBSStyleFamilyPathUsingGET.');
            }
            // verify required parameter 'prefix' is not null or undefined
            if (prefix === null || prefix === undefined) {
                throw new RequiredError('prefix','Required parameter prefix was null or undefined when calling createPrivateOBSStyleFamilyPathUsingGET.');
            }
            const localVarPath = `/file/style-family/storage/url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (identifier !== undefined) {
                localVarQueryParameter['identifier'] = identifier;
            }

            if (override !== undefined) {
                localVarQueryParameter['override'] = override;
            }

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 给文件分配上传的地址
         * @param {string} fileKey 文件名称
         * @param {boolean} override 文件路径已经存是否覆盖
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPublicOBSPathUsingGET: async (fileKey: string, override: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileKey' is not null or undefined
            if (fileKey === null || fileKey === undefined) {
                throw new RequiredError('fileKey','Required parameter fileKey was null or undefined when calling createPublicOBSPathUsingGET.');
            }
            // verify required parameter 'override' is not null or undefined
            if (override === null || override === undefined) {
                throw new RequiredError('override','Required parameter override was null or undefined when calling createPublicOBSPathUsingGET.');
            }
            const localVarPath = `/file/public/upload/url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileKey !== undefined) {
                localVarQueryParameter['fileKey'] = fileKey;
            }

            if (override !== undefined) {
                localVarQueryParameter['override'] = override;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 执行分段上传的初始化段任务
         * @param {string} fileName 文件名称
         * @param {string} [path] 文件目录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInitMultipartUploadPathUsingPUT: async (fileName: string, path?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new RequiredError('fileName','Required parameter fileName was null or undefined when calling getInitMultipartUploadPathUsingPUT.');
            }
            const localVarPath = `/file/multi/region/init`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSASForRead
         * @param {string} osspath osspath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSASForReadUsingPOST: async (osspath: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'osspath' is not null or undefined
            if (osspath === null || osspath === undefined) {
                throw new RequiredError('osspath','Required parameter osspath was null or undefined when calling getSASForReadUsingPOST.');
            }
            const localVarPath = `/file/read`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof osspath !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(osspath !== undefined ? osspath : {}) : (osspath || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取资源文件分配下载地址
         * @param {string} identifier 文件标识符
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleFamilyResourcePathUsingGET: async (identifier: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            if (identifier === null || identifier === undefined) {
                throw new RequiredError('identifier','Required parameter identifier was null or undefined when calling getStyleFamilyResourcePathUsingGET.');
            }
            const localVarPath = `/file/style-family/download/url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (identifier !== undefined) {
                localVarQueryParameter['identifier'] = identifier;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 执行分段上传合并段任务
         * @param {string} fileKey 文件标识
         * @param {string} uploadId 上传id
         * @param {string} params 分段参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeMultipartUploadPathUsingPUT: async (fileKey: string, uploadId: string, params: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileKey' is not null or undefined
            if (fileKey === null || fileKey === undefined) {
                throw new RequiredError('fileKey','Required parameter fileKey was null or undefined when calling mergeMultipartUploadPathUsingPUT.');
            }
            // verify required parameter 'uploadId' is not null or undefined
            if (uploadId === null || uploadId === undefined) {
                throw new RequiredError('uploadId','Required parameter uploadId was null or undefined when calling mergeMultipartUploadPathUsingPUT.');
            }
            // verify required parameter 'params' is not null or undefined
            if (params === null || params === undefined) {
                throw new RequiredError('params','Required parameter params was null or undefined when calling mergeMultipartUploadPathUsingPUT.');
            }
            const localVarPath = `/file/multi/region/merge`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileKey !== undefined) {
                localVarQueryParameter['fileKey'] = fileKey;
            }

            if (uploadId !== undefined) {
                localVarQueryParameter['uploadId'] = uploadId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof params !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(params !== undefined ? params : {}) : (params || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary newFile
         * @param {string} fileName fileName
         * @param {string} [filepath] filepath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newFileUsingPUT: async (fileName: string, filepath?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new RequiredError('fileName','Required parameter fileName was null or undefined when calling newFileUsingPUT.');
            }
            const localVarPath = `/file/new`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }

            if (filepath !== undefined) {
                localVarQueryParameter['filepath'] = filepath;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取上传段任务的url
         * @param {string} fileKey 文件标识
         * @param {string} partNumber 分段编号
         * @param {string} uploadId 上传Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMultipartUploadPathUsingGET: async (fileKey: string, partNumber: string, uploadId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileKey' is not null or undefined
            if (fileKey === null || fileKey === undefined) {
                throw new RequiredError('fileKey','Required parameter fileKey was null or undefined when calling putMultipartUploadPathUsingGET.');
            }
            // verify required parameter 'partNumber' is not null or undefined
            if (partNumber === null || partNumber === undefined) {
                throw new RequiredError('partNumber','Required parameter partNumber was null or undefined when calling putMultipartUploadPathUsingGET.');
            }
            // verify required parameter 'uploadId' is not null or undefined
            if (uploadId === null || uploadId === undefined) {
                throw new RequiredError('uploadId','Required parameter uploadId was null or undefined when calling putMultipartUploadPathUsingGET.');
            }
            const localVarPath = `/file/multi/region/put`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileKey !== undefined) {
                localVarQueryParameter['fileKey'] = fileKey;
            }

            if (partNumber !== undefined) {
                localVarQueryParameter['partNumber'] = partNumber;
            }

            if (uploadId !== undefined) {
                localVarQueryParameter['uploadId'] = uploadId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary uploadFile
         * @param {any} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFileUsingPUT: async (file: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling uploadFileUsingPUT.');
            }
            const localVarPath = `/file/upload`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 给文件分配上传的地址
         * @param {string} dsId 文件名称
         * @param {string} fileKey 文件名称
         * @param {boolean} override 文件路径已经存是否覆盖
         * @param {number} version 文件名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPrivateOBSLogPathUsingGET(dsId: string, fileKey: string, override: boolean, version: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseFileInfo>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).createPrivateOBSLogPathUsingGET(dsId, fileKey, override, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 给样式资源文件分配上传的地址
         * @param {string} identifier 文件标识符
         * @param {boolean} override 文件路径已经存是否覆盖
         * @param {string} prefix 前缀
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPrivateOBSStyleFamilyPathUsingGET(identifier: string, override: boolean, prefix: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseFileInfo>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).createPrivateOBSStyleFamilyPathUsingGET(identifier, override, prefix, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 给文件分配上传的地址
         * @param {string} fileKey 文件名称
         * @param {boolean} override 文件路径已经存是否覆盖
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPublicOBSPathUsingGET(fileKey: string, override: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseFileInfo>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).createPublicOBSPathUsingGET(fileKey, override, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 执行分段上传的初始化段任务
         * @param {string} fileName 文件名称
         * @param {string} [path] 文件目录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInitMultipartUploadPathUsingPUT(fileName: string, path?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).getInitMultipartUploadPathUsingPUT(fileName, path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getSASForRead
         * @param {string} osspath osspath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSASForReadUsingPOST(osspath: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).getSASForReadUsingPOST(osspath, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取资源文件分配下载地址
         * @param {string} identifier 文件标识符
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyleFamilyResourcePathUsingGET(identifier: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseFileInfo>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).getStyleFamilyResourcePathUsingGET(identifier, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 执行分段上传合并段任务
         * @param {string} fileKey 文件标识
         * @param {string} uploadId 上传id
         * @param {string} params 分段参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mergeMultipartUploadPathUsingPUT(fileKey: string, uploadId: string, params: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).mergeMultipartUploadPathUsingPUT(fileKey, uploadId, params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary newFile
         * @param {string} fileName fileName
         * @param {string} [filepath] filepath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newFileUsingPUT(fileName: string, filepath?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).newFileUsingPUT(fileName, filepath, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取上传段任务的url
         * @param {string} fileKey 文件标识
         * @param {string} partNumber 分段编号
         * @param {string} uploadId 上传Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMultipartUploadPathUsingGET(fileKey: string, partNumber: string, uploadId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).putMultipartUploadPathUsingGET(fileKey, partNumber, uploadId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary uploadFile
         * @param {any} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFileUsingPUT(file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await FileApiAxiosParamCreator(configuration).uploadFileUsingPUT(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 给文件分配上传的地址
         * @param {string} dsId 文件名称
         * @param {string} fileKey 文件名称
         * @param {boolean} override 文件路径已经存是否覆盖
         * @param {number} version 文件名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPrivateOBSLogPathUsingGET(dsId: string, fileKey: string, override: boolean, version: number, options?: any): AxiosPromise<ResponseFileInfo> {
            return FileApiFp(configuration).createPrivateOBSLogPathUsingGET(dsId, fileKey, override, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 给样式资源文件分配上传的地址
         * @param {string} identifier 文件标识符
         * @param {boolean} override 文件路径已经存是否覆盖
         * @param {string} prefix 前缀
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPrivateOBSStyleFamilyPathUsingGET(identifier: string, override: boolean, prefix: string, options?: any): AxiosPromise<ResponseFileInfo> {
            return FileApiFp(configuration).createPrivateOBSStyleFamilyPathUsingGET(identifier, override, prefix, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 给文件分配上传的地址
         * @param {string} fileKey 文件名称
         * @param {boolean} override 文件路径已经存是否覆盖
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPublicOBSPathUsingGET(fileKey: string, override: boolean, options?: any): AxiosPromise<ResponseFileInfo> {
            return FileApiFp(configuration).createPublicOBSPathUsingGET(fileKey, override, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 执行分段上传的初始化段任务
         * @param {string} fileName 文件名称
         * @param {string} [path] 文件目录
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInitMultipartUploadPathUsingPUT(fileName: string, path?: string, options?: any): AxiosPromise<FileInfo> {
            return FileApiFp(configuration).getInitMultipartUploadPathUsingPUT(fileName, path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSASForRead
         * @param {string} osspath osspath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSASForReadUsingPOST(osspath: string, options?: any): AxiosPromise<FileInfo> {
            return FileApiFp(configuration).getSASForReadUsingPOST(osspath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取资源文件分配下载地址
         * @param {string} identifier 文件标识符
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleFamilyResourcePathUsingGET(identifier: string, options?: any): AxiosPromise<ResponseFileInfo> {
            return FileApiFp(configuration).getStyleFamilyResourcePathUsingGET(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 执行分段上传合并段任务
         * @param {string} fileKey 文件标识
         * @param {string} uploadId 上传id
         * @param {string} params 分段参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeMultipartUploadPathUsingPUT(fileKey: string, uploadId: string, params: string, options?: any): AxiosPromise<ResponseVoid> {
            return FileApiFp(configuration).mergeMultipartUploadPathUsingPUT(fileKey, uploadId, params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary newFile
         * @param {string} fileName fileName
         * @param {string} [filepath] filepath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newFileUsingPUT(fileName: string, filepath?: string, options?: any): AxiosPromise<FileInfo> {
            return FileApiFp(configuration).newFileUsingPUT(fileName, filepath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取上传段任务的url
         * @param {string} fileKey 文件标识
         * @param {string} partNumber 分段编号
         * @param {string} uploadId 上传Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMultipartUploadPathUsingGET(fileKey: string, partNumber: string, uploadId: string, options?: any): AxiosPromise<FileInfo> {
            return FileApiFp(configuration).putMultipartUploadPathUsingGET(fileKey, partNumber, uploadId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary uploadFile
         * @param {any} file file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFileUsingPUT(file: any, options?: any): AxiosPromise<string> {
            return FileApiFp(configuration).uploadFileUsingPUT(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI {
    /**
     * 
     * @summary 给文件分配上传的地址
     * @param {string} dsId 文件名称
     * @param {string} fileKey 文件名称
     * @param {boolean} override 文件路径已经存是否覆盖
     * @param {number} version 文件名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public createPrivateOBSLogPathUsingGET(dsId: string, fileKey: string, override: boolean, version: number, options?: any) {
        return FileApiFp(this.configuration).createPrivateOBSLogPathUsingGET(dsId, fileKey, override, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 给样式资源文件分配上传的地址
     * @param {string} identifier 文件标识符
     * @param {boolean} override 文件路径已经存是否覆盖
     * @param {string} prefix 前缀
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public createPrivateOBSStyleFamilyPathUsingGET(identifier: string, override: boolean, prefix: string, options?: any) {
        return FileApiFp(this.configuration).createPrivateOBSStyleFamilyPathUsingGET(identifier, override, prefix, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 给文件分配上传的地址
     * @param {string} fileKey 文件名称
     * @param {boolean} override 文件路径已经存是否覆盖
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public createPublicOBSPathUsingGET(fileKey: string, override: boolean, options?: any) {
        return FileApiFp(this.configuration).createPublicOBSPathUsingGET(fileKey, override, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 执行分段上传的初始化段任务
     * @param {string} fileName 文件名称
     * @param {string} [path] 文件目录
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public getInitMultipartUploadPathUsingPUT(fileName: string, path?: string, options?: any) {
        return FileApiFp(this.configuration).getInitMultipartUploadPathUsingPUT(fileName, path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSASForRead
     * @param {string} osspath osspath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public getSASForReadUsingPOST(osspath: string, options?: any) {
        return FileApiFp(this.configuration).getSASForReadUsingPOST(osspath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取资源文件分配下载地址
     * @param {string} identifier 文件标识符
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public getStyleFamilyResourcePathUsingGET(identifier: string, options?: any) {
        return FileApiFp(this.configuration).getStyleFamilyResourcePathUsingGET(identifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 执行分段上传合并段任务
     * @param {string} fileKey 文件标识
     * @param {string} uploadId 上传id
     * @param {string} params 分段参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public mergeMultipartUploadPathUsingPUT(fileKey: string, uploadId: string, params: string, options?: any) {
        return FileApiFp(this.configuration).mergeMultipartUploadPathUsingPUT(fileKey, uploadId, params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary newFile
     * @param {string} fileName fileName
     * @param {string} [filepath] filepath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public newFileUsingPUT(fileName: string, filepath?: string, options?: any) {
        return FileApiFp(this.configuration).newFileUsingPUT(fileName, filepath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取上传段任务的url
     * @param {string} fileKey 文件标识
     * @param {string} partNumber 分段编号
     * @param {string} uploadId 上传Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public putMultipartUploadPathUsingGET(fileKey: string, partNumber: string, uploadId: string, options?: any) {
        return FileApiFp(this.configuration).putMultipartUploadPathUsingGET(fileKey, partNumber, uploadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary uploadFile
     * @param {any} file file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public uploadFileUsingPUT(file: any, options?: any) {
        return FileApiFp(this.configuration).uploadFileUsingPUT(file, options).then((request) => request(this.axios, this.basePath));
    }

}

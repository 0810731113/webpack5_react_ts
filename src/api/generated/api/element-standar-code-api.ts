// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResponseListElementVersionStandardCodeVO } from '../model';
/**
 * ElementStandarCodeApi - axios parameter creator
 * @export
 */
export const ElementStandarCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 根据元素Id和版本号获取表中编码列表
         * @param {string} [elementId] elementId
         * @param {number} [versionId] versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementVersionStandardCodeUsingGET: async (elementId?: string, versionId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/element-version-standard-code/element/version/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (elementId !== undefined) {
                localVarQueryParameter['elementId'] = elementId;
            }

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据版本号获取编码列表
         * @param {number} [versionId] versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementVersionStandardCodeUsingGET1: async (versionId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/element-version-standard-code/version/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ElementStandarCodeApi - functional programming interface
 * @export
 */
export const ElementStandarCodeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 根据元素Id和版本号获取表中编码列表
         * @param {string} [elementId] elementId
         * @param {number} [versionId] versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElementVersionStandardCodeUsingGET(elementId?: string, versionId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListElementVersionStandardCodeVO>> {
            const localVarAxiosArgs = await ElementStandarCodeApiAxiosParamCreator(configuration).getElementVersionStandardCodeUsingGET(elementId, versionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据版本号获取编码列表
         * @param {number} [versionId] versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElementVersionStandardCodeUsingGET1(versionId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListElementVersionStandardCodeVO>> {
            const localVarAxiosArgs = await ElementStandarCodeApiAxiosParamCreator(configuration).getElementVersionStandardCodeUsingGET1(versionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ElementStandarCodeApi - factory interface
 * @export
 */
export const ElementStandarCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 根据元素Id和版本号获取表中编码列表
         * @param {string} [elementId] elementId
         * @param {number} [versionId] versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementVersionStandardCodeUsingGET(elementId?: string, versionId?: number, options?: any): AxiosPromise<ResponseListElementVersionStandardCodeVO> {
            return ElementStandarCodeApiFp(configuration).getElementVersionStandardCodeUsingGET(elementId, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据版本号获取编码列表
         * @param {number} [versionId] versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementVersionStandardCodeUsingGET1(versionId?: number, options?: any): AxiosPromise<ResponseListElementVersionStandardCodeVO> {
            return ElementStandarCodeApiFp(configuration).getElementVersionStandardCodeUsingGET1(versionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ElementStandarCodeApi - object-oriented interface
 * @export
 * @class ElementStandarCodeApi
 * @extends {BaseAPI}
 */
export class ElementStandarCodeApi extends BaseAPI {
    /**
     * 
     * @summary 根据元素Id和版本号获取表中编码列表
     * @param {string} [elementId] elementId
     * @param {number} [versionId] versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementStandarCodeApi
     */
    public getElementVersionStandardCodeUsingGET(elementId?: string, versionId?: number, options?: any) {
        return ElementStandarCodeApiFp(this.configuration).getElementVersionStandardCodeUsingGET(elementId, versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据版本号获取编码列表
     * @param {number} [versionId] versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementStandarCodeApi
     */
    public getElementVersionStandardCodeUsingGET1(versionId?: number, options?: any) {
        return ElementStandarCodeApiFp(this.configuration).getElementVersionStandardCodeUsingGET1(versionId, options).then((request) => request(this.axios, this.basePath));
    }

}

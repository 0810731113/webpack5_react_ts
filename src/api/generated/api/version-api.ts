// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from "url";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { OperateVersionParam } from "../model";
// @ts-ignore
import { ResponseListTreeNode } from "../model";
// @ts-ignore
import { ResponseListVersionVO } from "../model";
// @ts-ignore
import { ResponseListstring } from "../model";
// @ts-ignore
import { ResponseMapstringListIncrementElement } from "../model";
// @ts-ignore
import { ResponseVersionVO } from "../model";
// @ts-ignore
import { ResponseVoid } from "../model";
// @ts-ignore
import { Responseboolean } from "../model";
// @ts-ignore
import { Version } from "../model";
/**
 * VersionApi - axios parameter creator
 * @export
 */
export const VersionApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary 收集指定的versionId的rawDataFile和refDataFile升级信息并记录到version_update_pool表中
     * @param {Array<number>} versionIds versionIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectVersionByVersionIdsUsingPOST: async (
      versionIds: Array<number>,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'versionIds' is not null or undefined
      if (versionIds === null || versionIds === undefined) {
        throw new RequiredError(
          "versionIds",
          "Required parameter versionIds was null or undefined when calling collectVersionByVersionIdsUsingPOST.",
        );
      }
      const localVarPath = `/versions/collection/byids`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof versionIds !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(versionIds !== undefined ? versionIds : {})
        : versionIds || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 收集指定数量version的rawDataFile和refDataFile升级信息并记录到version_update_pool表中
     * @param {number} size size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectVersionsUsingPOST: async (
      size: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'size' is not null or undefined
      if (size === null || size === undefined) {
        throw new RequiredError(
          "size",
          "Required parameter size was null or undefined when calling collectVersionsUsingPOST.",
        );
      }
      const localVarPath = `/versions/collection/{size}`.replace(
        `{${"size"}}`,
        encodeURIComponent(String(size)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getDataSetVersionNumbersOfStatus
     * @param {string} dataSetId dataSetId
     * @param {string} status status
     * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetVersionNumbersOfStatusUsingGET: async (
      dataSetId: string,
      status: string,
      onlySuccess?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'dataSetId' is not null or undefined
      if (dataSetId === null || dataSetId === undefined) {
        throw new RequiredError(
          "dataSetId",
          "Required parameter dataSetId was null or undefined when calling getDataSetVersionNumbersOfStatusUsingGET.",
        );
      }
      // verify required parameter 'status' is not null or undefined
      if (status === null || status === undefined) {
        throw new RequiredError(
          "status",
          "Required parameter status was null or undefined when calling getDataSetVersionNumbersOfStatusUsingGET.",
        );
      }
      const localVarPath = `/version/status`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (dataSetId !== undefined) {
        localVarQueryParameter["dataSetId"] = dataSetId;
      }

      if (onlySuccess !== undefined) {
        localVarQueryParameter["onlySuccess"] = onlySuccess;
      }

      if (status !== undefined) {
        localVarQueryParameter["status"] = status;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 获取版本间的增量结果
     * @param {string} dataSetId dataSetId
     * @param {number} endVersion endVersion
     * @param {number} startVersion startVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIncrementElementsUsingGET1: async (
      dataSetId: string,
      endVersion: number,
      startVersion: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'dataSetId' is not null or undefined
      if (dataSetId === null || dataSetId === undefined) {
        throw new RequiredError(
          "dataSetId",
          "Required parameter dataSetId was null or undefined when calling getIncrementElementsUsingGET1.",
        );
      }
      // verify required parameter 'endVersion' is not null or undefined
      if (endVersion === null || endVersion === undefined) {
        throw new RequiredError(
          "endVersion",
          "Required parameter endVersion was null or undefined when calling getIncrementElementsUsingGET1.",
        );
      }
      // verify required parameter 'startVersion' is not null or undefined
      if (startVersion === null || startVersion === undefined) {
        throw new RequiredError(
          "startVersion",
          "Required parameter startVersion was null or undefined when calling getIncrementElementsUsingGET1.",
        );
      }
      const localVarPath = `/dataSets/{dataSetId}/increment-elements`.replace(
        `{${"dataSetId"}}`,
        encodeURIComponent(String(dataSetId)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (endVersion !== undefined) {
        localVarQueryParameter["endVersion"] = endVersion;
      }

      if (startVersion !== undefined) {
        localVarQueryParameter["startVersion"] = startVersion;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getMetaValueByKey
     * @param {string} key key
     * @param {number} versionId versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetaValueByKeyUsingGET: async (
      key: string,
      versionId: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'key' is not null or undefined
      if (key === null || key === undefined) {
        throw new RequiredError(
          "key",
          "Required parameter key was null or undefined when calling getMetaValueByKeyUsingGET.",
        );
      }
      // verify required parameter 'versionId' is not null or undefined
      if (versionId === null || versionId === undefined) {
        throw new RequiredError(
          "versionId",
          "Required parameter versionId was null or undefined when calling getMetaValueByKeyUsingGET.",
        );
      }
      const localVarPath = `/version/{versionId}/meta`.replace(
        `{${"versionId"}}`,
        encodeURIComponent(String(versionId)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (key !== undefined) {
        localVarQueryParameter["key"] = key;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 获取模型的目录树
     * @param {string} versionIds versionIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTreeUsingGET: async (
      versionIds: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'versionIds' is not null or undefined
      if (versionIds === null || versionIds === undefined) {
        throw new RequiredError(
          "versionIds",
          "Required parameter versionIds was null or undefined when calling getTreeUsingGET.",
        );
      }
      const localVarPath = `/versions/tree`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (versionIds !== undefined) {
        localVarQueryParameter["versionIds"] = versionIds;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 按mvd获取version信息(Deprecated，被v3版本替换)
     * @param {number} versionId versionId
     * @param {string} [mvd] mvd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionByIdAndMvdsUsingGET: async (
      versionId: number,
      mvd?: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'versionId' is not null or undefined
      if (versionId === null || versionId === undefined) {
        throw new RequiredError(
          "versionId",
          "Required parameter versionId was null or undefined when calling getVersionByIdAndMvdsUsingGET.",
        );
      }
      const localVarPath = `/v2/versions/{versionId}`.replace(
        `{${"versionId"}}`,
        encodeURIComponent(String(versionId)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (mvd !== undefined) {
        localVarQueryParameter["mvd"] = mvd;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 按mvd获取version信息(不会填充RawData和RefInfo字段)
     * @param {number} versionId versionId
     * @param {string} [mvd] mvd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionByIdAndMvdsWithoutRawDataAndRefInfoUsingGET: async (
      versionId: number,
      mvd?: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'versionId' is not null or undefined
      if (versionId === null || versionId === undefined) {
        throw new RequiredError(
          "versionId",
          "Required parameter versionId was null or undefined when calling getVersionByIdAndMvdsWithoutRawDataAndRefInfoUsingGET.",
        );
      }
      const localVarPath = `/v3/versions/{versionId}`.replace(
        `{${"versionId"}}`,
        encodeURIComponent(String(versionId)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (mvd !== undefined) {
        localVarQueryParameter["mvd"] = mvd;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 获取版本支持的mvd
     * @param {number} versionId versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionSupportedMvdUsingGET: async (
      versionId: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'versionId' is not null or undefined
      if (versionId === null || versionId === undefined) {
        throw new RequiredError(
          "versionId",
          "Required parameter versionId was null or undefined when calling getVersionSupportedMvdUsingGET.",
        );
      }
      const localVarPath = `/v2/versions/{versionId}/mvd`.replace(
        `{${"versionId"}}`,
        encodeURIComponent(String(versionId)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getVersion
     * @param {number} versionId versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionUsingGET1: async (
      versionId: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'versionId' is not null or undefined
      if (versionId === null || versionId === undefined) {
        throw new RequiredError(
          "versionId",
          "Required parameter versionId was null or undefined when calling getVersionUsingGET1.",
        );
      }
      const localVarPath = `/version/{versionId}`.replace(
        `{${"versionId"}}`,
        encodeURIComponent(String(versionId)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 根据工作单元id批量查询版本信息
     * @param {Array<string>} dataSetIds dataSetIds
     * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionsByDataSetIdsAndColumnsUsingPOST: async (
      dataSetIds: Array<string>,
      onlySuccess?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'dataSetIds' is not null or undefined
      if (dataSetIds === null || dataSetIds === undefined) {
        throw new RequiredError(
          "dataSetIds",
          "Required parameter dataSetIds was null or undefined when calling getVersionsByDataSetIdsAndColumnsUsingPOST.",
        );
      }
      const localVarPath = `/v2/versions/dataSetIds/batch`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (onlySuccess !== undefined) {
        localVarQueryParameter["onlySuccess"] = onlySuccess;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof dataSetIds !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(dataSetIds !== undefined ? dataSetIds : {})
        : dataSetIds || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以mvd方式根据工作单元id批量查询版本信息
     * @param {Array<string>} dataSetIds dataSetIds
     * @param {boolean} [filterDelete] filterDelete
     * @param {string} [mvd] mvd
     * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionsByDataSetIdsMVDUsingPOST: async (
      dataSetIds: Array<string>,
      filterDelete?: boolean,
      mvd?: string,
      onlySuccess?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'dataSetIds' is not null or undefined
      if (dataSetIds === null || dataSetIds === undefined) {
        throw new RequiredError(
          "dataSetIds",
          "Required parameter dataSetIds was null or undefined when calling getVersionsByDataSetIdsMVDUsingPOST.",
        );
      }
      const localVarPath = `/v3/versions/dataSetIds/batch`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (filterDelete !== undefined) {
        localVarQueryParameter["filterDelete"] = filterDelete;
      }

      if (mvd !== undefined) {
        localVarQueryParameter["mvd"] = mvd;
      }

      if (onlySuccess !== undefined) {
        localVarQueryParameter["onlySuccess"] = onlySuccess;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof dataSetIds !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(dataSetIds !== undefined ? dataSetIds : {})
        : dataSetIds || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 根据工作单元id批量查询版本信息
     * @param {Array<string>} dataSetIds dataSetIds
     * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionsByDataSetIdsUsingPOST: async (
      dataSetIds: Array<string>,
      onlySuccess?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'dataSetIds' is not null or undefined
      if (dataSetIds === null || dataSetIds === undefined) {
        throw new RequiredError(
          "dataSetIds",
          "Required parameter dataSetIds was null or undefined when calling getVersionsByDataSetIdsUsingPOST.",
        );
      }
      const localVarPath = `/versions/dataSetIds/batch`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (onlySuccess !== undefined) {
        localVarQueryParameter["onlySuccess"] = onlySuccess;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof dataSetIds !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(dataSetIds !== undefined ? dataSetIds : {})
        : dataSetIds || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 按mvd获取多个version的信息
     * @param {Array<number>} versionIds versionIds
     * @param {string} [mvd] mvd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionsByIdsAndMvdsUsingPOST: async (
      versionIds: Array<number>,
      mvd?: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'versionIds' is not null or undefined
      if (versionIds === null || versionIds === undefined) {
        throw new RequiredError(
          "versionIds",
          "Required parameter versionIds was null or undefined when calling getVersionsByIdsAndMvdsUsingPOST.",
        );
      }
      const localVarPath = `/v2/versions/byids`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (mvd !== undefined) {
        localVarQueryParameter["mvd"] = mvd;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof versionIds !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(versionIds !== undefined ? versionIds : {})
        : versionIds || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 根据id批量查询版本信息
     * @param {Array<number>} versionIds versionIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionsByIdsUsingPOST: async (
      versionIds: Array<number>,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'versionIds' is not null or undefined
      if (versionIds === null || versionIds === undefined) {
        throw new RequiredError(
          "versionIds",
          "Required parameter versionIds was null or undefined when calling getVersionsByIdsUsingPOST.",
        );
      }
      const localVarPath = `/versions/ids/batch`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof versionIds !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(versionIds !== undefined ? versionIds : {})
        : versionIds || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary getViewInfoValueByKey
     * @param {string} key key
     * @param {number} versionId versionId
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewInfoValueByKeyUsingGET: async (
      key: string,
      versionId: number,
      xGdcUserid?: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'key' is not null or undefined
      if (key === null || key === undefined) {
        throw new RequiredError(
          "key",
          "Required parameter key was null or undefined when calling getViewInfoValueByKeyUsingGET.",
        );
      }
      // verify required parameter 'versionId' is not null or undefined
      if (versionId === null || versionId === undefined) {
        throw new RequiredError(
          "versionId",
          "Required parameter versionId was null or undefined when calling getViewInfoValueByKeyUsingGET.",
        );
      }
      const localVarPath = `/v2/versions/{versionId}/viewinfo`.replace(
        `{${"versionId"}}`,
        encodeURIComponent(String(versionId)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (key !== undefined) {
        localVarQueryParameter["key"] = key;
      }

      if (xGdcUserid !== undefined && xGdcUserid !== null) {
        localVarHeaderParameter["x-gdc-userid"] = String(xGdcUserid);
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary insertMeta
     * @param {number} versionId versionId
     * @param {{ [key: string]: object; }} metaMap metaMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insertMetaUsingPOST: async (
      versionId: number,
      metaMap: { [key: string]: object },
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'versionId' is not null or undefined
      if (versionId === null || versionId === undefined) {
        throw new RequiredError(
          "versionId",
          "Required parameter versionId was null or undefined when calling insertMetaUsingPOST.",
        );
      }
      // verify required parameter 'metaMap' is not null or undefined
      if (metaMap === null || metaMap === undefined) {
        throw new RequiredError(
          "metaMap",
          "Required parameter metaMap was null or undefined when calling insertMetaUsingPOST.",
        );
      }
      const localVarPath = `/version/{versionId}/meta`.replace(
        `{${"versionId"}}`,
        encodeURIComponent(String(versionId)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof metaMap !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(metaMap !== undefined ? metaMap : {})
        : metaMap || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary insertViewInfo
     * @param {number} versionId versionId
     * @param {{ [key: string]: object; }} viewMap viewMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insertViewInfoUsingPOST: async (
      versionId: number,
      viewMap: { [key: string]: object },
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'versionId' is not null or undefined
      if (versionId === null || versionId === undefined) {
        throw new RequiredError(
          "versionId",
          "Required parameter versionId was null or undefined when calling insertViewInfoUsingPOST.",
        );
      }
      // verify required parameter 'viewMap' is not null or undefined
      if (viewMap === null || viewMap === undefined) {
        throw new RequiredError(
          "viewMap",
          "Required parameter viewMap was null or undefined when calling insertViewInfoUsingPOST.",
        );
      }
      const localVarPath = `/v2/versions/{versionId}/viewinfo`.replace(
        `{${"versionId"}}`,
        encodeURIComponent(String(versionId)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof viewMap !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(viewMap !== undefined ? viewMap : {})
        : viewMap || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 更改version删除状态
     * @param {OperateVersionParam} param param
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    operateVersionStateUsingPOST: async (
      param: OperateVersionParam,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'param' is not null or undefined
      if (param === null || param === undefined) {
        throw new RequiredError(
          "param",
          "Required parameter param was null or undefined when calling operateVersionStateUsingPOST.",
        );
      }
      const localVarPath = `/v3/versions/delversion`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof param !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(param !== undefined ? param : {})
        : param || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 重新计算生成显示版本号
     * @param {string} datasetId datasetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regenerateDisplayVersionUsingPOST: async (
      datasetId: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'datasetId' is not null or undefined
      if (datasetId === null || datasetId === undefined) {
        throw new RequiredError(
          "datasetId",
          "Required parameter datasetId was null or undefined when calling regenerateDisplayVersionUsingPOST.",
        );
      }
      const localVarPath = `/datasets/{datasetId}/update_display_version`.replace(
        `{${"datasetId"}}`,
        encodeURIComponent(String(datasetId)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary updateVersionStatus
     * @param {string} status status
     * @param {number} versionId versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVersionStatusUsingPOST: async (
      status: string,
      versionId: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'status' is not null or undefined
      if (status === null || status === undefined) {
        throw new RequiredError(
          "status",
          "Required parameter status was null or undefined when calling updateVersionStatusUsingPOST.",
        );
      }
      // verify required parameter 'versionId' is not null or undefined
      if (versionId === null || versionId === undefined) {
        throw new RequiredError(
          "versionId",
          "Required parameter versionId was null or undefined when calling updateVersionStatusUsingPOST.",
        );
      }
      const localVarPath = `/version/status/byversionid`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (status !== undefined) {
        localVarQueryParameter["status"] = status;
      }

      if (versionId !== undefined) {
        localVarQueryParameter["versionId"] = versionId;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary updateVersionStatus
     * @param {string} dataSetId dataSetId
     * @param {string} status status
     * @param {number} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVersionStatusUsingPOST1: async (
      dataSetId: string,
      status: string,
      version: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'dataSetId' is not null or undefined
      if (dataSetId === null || dataSetId === undefined) {
        throw new RequiredError(
          "dataSetId",
          "Required parameter dataSetId was null or undefined when calling updateVersionStatusUsingPOST1.",
        );
      }
      // verify required parameter 'status' is not null or undefined
      if (status === null || status === undefined) {
        throw new RequiredError(
          "status",
          "Required parameter status was null or undefined when calling updateVersionStatusUsingPOST1.",
        );
      }
      // verify required parameter 'version' is not null or undefined
      if (version === null || version === undefined) {
        throw new RequiredError(
          "version",
          "Required parameter version was null or undefined when calling updateVersionStatusUsingPOST1.",
        );
      }
      const localVarPath = `/version/status`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (dataSetId !== undefined) {
        localVarQueryParameter["dataSetId"] = dataSetId;
      }

      if (status !== undefined) {
        localVarQueryParameter["status"] = status;
      }

      if (version !== undefined) {
        localVarQueryParameter["version"] = version;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary updateVersion
     * @param {Version} version version
     * @param {boolean} [mergemeta] mergemeta
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVersionUsingPOST: async (
      version: Version,
      mergemeta?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'version' is not null or undefined
      if (version === null || version === undefined) {
        throw new RequiredError(
          "version",
          "Required parameter version was null or undefined when calling updateVersionUsingPOST.",
        );
      }
      const localVarPath = `/version`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (mergemeta !== undefined) {
        localVarQueryParameter["mergemeta"] = mergemeta;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof version !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(version !== undefined ? version : {})
        : version || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 从version_update_pool获取指定数量的升级信息并升级对应的version
     * @param {number} size size
     * @param {boolean} [setnull] setnull
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVersionsUsingPOST: async (
      size: number,
      setnull?: boolean,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'size' is not null or undefined
      if (size === null || size === undefined) {
        throw new RequiredError(
          "size",
          "Required parameter size was null or undefined when calling updateVersionsUsingPOST.",
        );
      }
      const localVarPath = `/versions/update/{size}`.replace(
        `{${"size"}}`,
        encodeURIComponent(String(size)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (setnull !== undefined) {
        localVarQueryParameter["setnull"] = setnull;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * VersionApi - functional programming interface
 * @export
 */
export const VersionApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 收集指定的versionId的rawDataFile和refDataFile升级信息并记录到version_update_pool表中
     * @param {Array<number>} versionIds versionIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async collectVersionByVersionIdsUsingPOST(
      versionIds: Array<number>,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).collectVersionByVersionIdsUsingPOST(versionIds, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 收集指定数量version的rawDataFile和refDataFile升级信息并记录到version_update_pool表中
     * @param {number} size size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async collectVersionsUsingPOST(
      size: number,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).collectVersionsUsingPOST(size, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getDataSetVersionNumbersOfStatus
     * @param {string} dataSetId dataSetId
     * @param {string} status status
     * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDataSetVersionNumbersOfStatusUsingGET(
      dataSetId: string,
      status: string,
      onlySuccess?: boolean,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).getDataSetVersionNumbersOfStatusUsingGET(
        dataSetId,
        status,
        onlySuccess,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 获取版本间的增量结果
     * @param {string} dataSetId dataSetId
     * @param {number} endVersion endVersion
     * @param {number} startVersion startVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getIncrementElementsUsingGET1(
      dataSetId: string,
      endVersion: number,
      startVersion: number,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseMapstringListIncrementElement>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).getIncrementElementsUsingGET1(
        dataSetId,
        endVersion,
        startVersion,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getMetaValueByKey
     * @param {string} key key
     * @param {number} versionId versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMetaValueByKeyUsingGET(
      key: string,
      versionId: number,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).getMetaValueByKeyUsingGET(key, versionId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 获取模型的目录树
     * @param {string} versionIds versionIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTreeUsingGET(
      versionIds: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseListTreeNode>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).getTreeUsingGET(versionIds, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 按mvd获取version信息(Deprecated，被v3版本替换)
     * @param {number} versionId versionId
     * @param {string} [mvd] mvd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVersionByIdAndMvdsUsingGET(
      versionId: number,
      mvd?: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseVersionVO>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).getVersionByIdAndMvdsUsingGET(versionId, mvd, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 按mvd获取version信息(不会填充RawData和RefInfo字段)
     * @param {number} versionId versionId
     * @param {string} [mvd] mvd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVersionByIdAndMvdsWithoutRawDataAndRefInfoUsingGET(
      versionId: number,
      mvd?: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseVersionVO>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).getVersionByIdAndMvdsWithoutRawDataAndRefInfoUsingGET(
        versionId,
        mvd,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 获取版本支持的mvd
     * @param {number} versionId versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVersionSupportedMvdUsingGET(
      versionId: number,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseListstring>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).getVersionSupportedMvdUsingGET(versionId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getVersion
     * @param {number} versionId versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVersionUsingGET1(
      versionId: number,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Version>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).getVersionUsingGET1(versionId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 根据工作单元id批量查询版本信息
     * @param {Array<string>} dataSetIds dataSetIds
     * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVersionsByDataSetIdsAndColumnsUsingPOST(
      dataSetIds: Array<string>,
      onlySuccess?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseListVersionVO>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).getVersionsByDataSetIdsAndColumnsUsingPOST(
        dataSetIds,
        onlySuccess,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 以mvd方式根据工作单元id批量查询版本信息
     * @param {Array<string>} dataSetIds dataSetIds
     * @param {boolean} [filterDelete] filterDelete
     * @param {string} [mvd] mvd
     * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVersionsByDataSetIdsMVDUsingPOST(
      dataSetIds: Array<string>,
      filterDelete?: boolean,
      mvd?: string,
      onlySuccess?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseListVersionVO>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).getVersionsByDataSetIdsMVDUsingPOST(
        dataSetIds,
        filterDelete,
        mvd,
        onlySuccess,
        options,
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 根据工作单元id批量查询版本信息
     * @param {Array<string>} dataSetIds dataSetIds
     * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVersionsByDataSetIdsUsingPOST(
      dataSetIds: Array<string>,
      onlySuccess?: boolean,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseListVersionVO>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).getVersionsByDataSetIdsUsingPOST(dataSetIds, onlySuccess, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 按mvd获取多个version的信息
     * @param {Array<number>} versionIds versionIds
     * @param {string} [mvd] mvd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVersionsByIdsAndMvdsUsingPOST(
      versionIds: Array<number>,
      mvd?: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseListVersionVO>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).getVersionsByIdsAndMvdsUsingPOST(versionIds, mvd, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 根据id批量查询版本信息
     * @param {Array<number>} versionIds versionIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVersionsByIdsUsingPOST(
      versionIds: Array<number>,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ResponseListVersionVO>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).getVersionsByIdsUsingPOST(versionIds, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getViewInfoValueByKey
     * @param {string} key key
     * @param {number} versionId versionId
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getViewInfoValueByKeyUsingGET(
      key: string,
      versionId: number,
      xGdcUserid?: string,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).getViewInfoValueByKeyUsingGET(key, versionId, xGdcUserid, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary insertMeta
     * @param {number} versionId versionId
     * @param {{ [key: string]: object; }} metaMap metaMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async insertMetaUsingPOST(
      versionId: number,
      metaMap: { [key: string]: object },
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).insertMetaUsingPOST(versionId, metaMap, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary insertViewInfo
     * @param {number} versionId versionId
     * @param {{ [key: string]: object; }} viewMap viewMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async insertViewInfoUsingPOST(
      versionId: number,
      viewMap: { [key: string]: object },
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).insertViewInfoUsingPOST(versionId, viewMap, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 更改version删除状态
     * @param {OperateVersionParam} param param
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async operateVersionStateUsingPOST(
      param: OperateVersionParam,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).operateVersionStateUsingPOST(param, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 重新计算生成显示版本号
     * @param {string} datasetId datasetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regenerateDisplayVersionUsingPOST(
      datasetId: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Responseboolean>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).regenerateDisplayVersionUsingPOST(datasetId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary updateVersionStatus
     * @param {string} status status
     * @param {number} versionId versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateVersionStatusUsingPOST(
      status: string,
      versionId: number,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).updateVersionStatusUsingPOST(status, versionId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary updateVersionStatus
     * @param {string} dataSetId dataSetId
     * @param {string} status status
     * @param {number} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateVersionStatusUsingPOST1(
      dataSetId: string,
      status: string,
      version: number,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).updateVersionStatusUsingPOST1(dataSetId, status, version, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary updateVersion
     * @param {Version} version version
     * @param {boolean} [mergemeta] mergemeta
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateVersionUsingPOST(
      version: Version,
      mergemeta?: boolean,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).updateVersionUsingPOST(version, mergemeta, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary 从version_update_pool获取指定数量的升级信息并升级对应的version
     * @param {number} size size
     * @param {boolean} [setnull] setnull
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateVersionsUsingPOST(
      size: number,
      setnull?: boolean,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs = await VersionApiAxiosParamCreator(
        configuration,
      ).updateVersionsUsingPOST(size, setnull, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * VersionApi - factory interface
 * @export
 */
export const VersionApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @summary 收集指定的versionId的rawDataFile和refDataFile升级信息并记录到version_update_pool表中
     * @param {Array<number>} versionIds versionIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectVersionByVersionIdsUsingPOST(
      versionIds: Array<number>,
      options?: any,
    ): AxiosPromise<object> {
      return VersionApiFp(configuration)
        .collectVersionByVersionIdsUsingPOST(versionIds, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 收集指定数量version的rawDataFile和refDataFile升级信息并记录到version_update_pool表中
     * @param {number} size size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectVersionsUsingPOST(
      size: number,
      options?: any,
    ): AxiosPromise<object> {
      return VersionApiFp(configuration)
        .collectVersionsUsingPOST(size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getDataSetVersionNumbersOfStatus
     * @param {string} dataSetId dataSetId
     * @param {string} status status
     * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSetVersionNumbersOfStatusUsingGET(
      dataSetId: string,
      status: string,
      onlySuccess?: boolean,
      options?: any,
    ): AxiosPromise<Array<number>> {
      return VersionApiFp(configuration)
        .getDataSetVersionNumbersOfStatusUsingGET(
          dataSetId,
          status,
          onlySuccess,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 获取版本间的增量结果
     * @param {string} dataSetId dataSetId
     * @param {number} endVersion endVersion
     * @param {number} startVersion startVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIncrementElementsUsingGET1(
      dataSetId: string,
      endVersion: number,
      startVersion: number,
      options?: any,
    ): AxiosPromise<ResponseMapstringListIncrementElement> {
      return VersionApiFp(configuration)
        .getIncrementElementsUsingGET1(
          dataSetId,
          endVersion,
          startVersion,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getMetaValueByKey
     * @param {string} key key
     * @param {number} versionId versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetaValueByKeyUsingGET(
      key: string,
      versionId: number,
      options?: any,
    ): AxiosPromise<object> {
      return VersionApiFp(configuration)
        .getMetaValueByKeyUsingGET(key, versionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 获取模型的目录树
     * @param {string} versionIds versionIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTreeUsingGET(
      versionIds: string,
      options?: any,
    ): AxiosPromise<ResponseListTreeNode> {
      return VersionApiFp(configuration)
        .getTreeUsingGET(versionIds, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 按mvd获取version信息(Deprecated，被v3版本替换)
     * @param {number} versionId versionId
     * @param {string} [mvd] mvd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionByIdAndMvdsUsingGET(
      versionId: number,
      mvd?: string,
      options?: any,
    ): AxiosPromise<ResponseVersionVO> {
      return VersionApiFp(configuration)
        .getVersionByIdAndMvdsUsingGET(versionId, mvd, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 按mvd获取version信息(不会填充RawData和RefInfo字段)
     * @param {number} versionId versionId
     * @param {string} [mvd] mvd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionByIdAndMvdsWithoutRawDataAndRefInfoUsingGET(
      versionId: number,
      mvd?: string,
      options?: any,
    ): AxiosPromise<ResponseVersionVO> {
      return VersionApiFp(configuration)
        .getVersionByIdAndMvdsWithoutRawDataAndRefInfoUsingGET(
          versionId,
          mvd,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 获取版本支持的mvd
     * @param {number} versionId versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionSupportedMvdUsingGET(
      versionId: number,
      options?: any,
    ): AxiosPromise<ResponseListstring> {
      return VersionApiFp(configuration)
        .getVersionSupportedMvdUsingGET(versionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getVersion
     * @param {number} versionId versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionUsingGET1(
      versionId: number,
      options?: any,
    ): AxiosPromise<Version> {
      return VersionApiFp(configuration)
        .getVersionUsingGET1(versionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 根据工作单元id批量查询版本信息
     * @param {Array<string>} dataSetIds dataSetIds
     * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionsByDataSetIdsAndColumnsUsingPOST(
      dataSetIds: Array<string>,
      onlySuccess?: boolean,
      options?: any,
    ): AxiosPromise<ResponseListVersionVO> {
      return VersionApiFp(configuration)
        .getVersionsByDataSetIdsAndColumnsUsingPOST(
          dataSetIds,
          onlySuccess,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以mvd方式根据工作单元id批量查询版本信息
     * @param {Array<string>} dataSetIds dataSetIds
     * @param {boolean} [filterDelete] filterDelete
     * @param {string} [mvd] mvd
     * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionsByDataSetIdsMVDUsingPOST(
      dataSetIds: Array<string>,
      filterDelete?: boolean,
      mvd?: string,
      onlySuccess?: boolean,
      options?: any,
    ): AxiosPromise<ResponseListVersionVO> {
      return VersionApiFp(configuration)
        .getVersionsByDataSetIdsMVDUsingPOST(
          dataSetIds,
          filterDelete,
          mvd,
          onlySuccess,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 根据工作单元id批量查询版本信息
     * @param {Array<string>} dataSetIds dataSetIds
     * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionsByDataSetIdsUsingPOST(
      dataSetIds: Array<string>,
      onlySuccess?: boolean,
      options?: any,
    ): AxiosPromise<ResponseListVersionVO> {
      return VersionApiFp(configuration)
        .getVersionsByDataSetIdsUsingPOST(dataSetIds, onlySuccess, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 按mvd获取多个version的信息
     * @param {Array<number>} versionIds versionIds
     * @param {string} [mvd] mvd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionsByIdsAndMvdsUsingPOST(
      versionIds: Array<number>,
      mvd?: string,
      options?: any,
    ): AxiosPromise<ResponseListVersionVO> {
      return VersionApiFp(configuration)
        .getVersionsByIdsAndMvdsUsingPOST(versionIds, mvd, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 根据id批量查询版本信息
     * @param {Array<number>} versionIds versionIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVersionsByIdsUsingPOST(
      versionIds: Array<number>,
      options?: any,
    ): AxiosPromise<ResponseListVersionVO> {
      return VersionApiFp(configuration)
        .getVersionsByIdsUsingPOST(versionIds, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary getViewInfoValueByKey
     * @param {string} key key
     * @param {number} versionId versionId
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewInfoValueByKeyUsingGET(
      key: string,
      versionId: number,
      xGdcUserid?: string,
      options?: any,
    ): AxiosPromise<object> {
      return VersionApiFp(configuration)
        .getViewInfoValueByKeyUsingGET(key, versionId, xGdcUserid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary insertMeta
     * @param {number} versionId versionId
     * @param {{ [key: string]: object; }} metaMap metaMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insertMetaUsingPOST(
      versionId: number,
      metaMap: { [key: string]: object },
      options?: any,
    ): AxiosPromise<boolean> {
      return VersionApiFp(configuration)
        .insertMetaUsingPOST(versionId, metaMap, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary insertViewInfo
     * @param {number} versionId versionId
     * @param {{ [key: string]: object; }} viewMap viewMap
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insertViewInfoUsingPOST(
      versionId: number,
      viewMap: { [key: string]: object },
      options?: any,
    ): AxiosPromise<boolean> {
      return VersionApiFp(configuration)
        .insertViewInfoUsingPOST(versionId, viewMap, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 更改version删除状态
     * @param {OperateVersionParam} param param
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    operateVersionStateUsingPOST(
      param: OperateVersionParam,
      options?: any,
    ): AxiosPromise<ResponseVoid> {
      return VersionApiFp(configuration)
        .operateVersionStateUsingPOST(param, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 重新计算生成显示版本号
     * @param {string} datasetId datasetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regenerateDisplayVersionUsingPOST(
      datasetId: string,
      options?: any,
    ): AxiosPromise<Responseboolean> {
      return VersionApiFp(configuration)
        .regenerateDisplayVersionUsingPOST(datasetId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary updateVersionStatus
     * @param {string} status status
     * @param {number} versionId versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVersionStatusUsingPOST(
      status: string,
      versionId: number,
      options?: any,
    ): AxiosPromise<boolean> {
      return VersionApiFp(configuration)
        .updateVersionStatusUsingPOST(status, versionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary updateVersionStatus
     * @param {string} dataSetId dataSetId
     * @param {string} status status
     * @param {number} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVersionStatusUsingPOST1(
      dataSetId: string,
      status: string,
      version: number,
      options?: any,
    ): AxiosPromise<boolean> {
      return VersionApiFp(configuration)
        .updateVersionStatusUsingPOST1(dataSetId, status, version, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary updateVersion
     * @param {Version} version version
     * @param {boolean} [mergemeta] mergemeta
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVersionUsingPOST(
      version: Version,
      mergemeta?: boolean,
      options?: any,
    ): AxiosPromise<string> {
      return VersionApiFp(configuration)
        .updateVersionUsingPOST(version, mergemeta, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 从version_update_pool获取指定数量的升级信息并升级对应的version
     * @param {number} size size
     * @param {boolean} [setnull] setnull
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVersionsUsingPOST(
      size: number,
      setnull?: boolean,
      options?: any,
    ): AxiosPromise<object> {
      return VersionApiFp(configuration)
        .updateVersionsUsingPOST(size, setnull, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */
export class VersionApi extends BaseAPI {
  /**
   *
   * @summary 收集指定的versionId的rawDataFile和refDataFile升级信息并记录到version_update_pool表中
   * @param {Array<number>} versionIds versionIds
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public collectVersionByVersionIdsUsingPOST(
    versionIds: Array<number>,
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .collectVersionByVersionIdsUsingPOST(versionIds, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 收集指定数量version的rawDataFile和refDataFile升级信息并记录到version_update_pool表中
   * @param {number} size size
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public collectVersionsUsingPOST(size: number, options?: any) {
    return VersionApiFp(this.configuration)
      .collectVersionsUsingPOST(size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getDataSetVersionNumbersOfStatus
   * @param {string} dataSetId dataSetId
   * @param {string} status status
   * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public getDataSetVersionNumbersOfStatusUsingGET(
    dataSetId: string,
    status: string,
    onlySuccess?: boolean,
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .getDataSetVersionNumbersOfStatusUsingGET(
        dataSetId,
        status,
        onlySuccess,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 获取版本间的增量结果
   * @param {string} dataSetId dataSetId
   * @param {number} endVersion endVersion
   * @param {number} startVersion startVersion
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public getIncrementElementsUsingGET1(
    dataSetId: string,
    endVersion: number,
    startVersion: number,
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .getIncrementElementsUsingGET1(
        dataSetId,
        endVersion,
        startVersion,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getMetaValueByKey
   * @param {string} key key
   * @param {number} versionId versionId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public getMetaValueByKeyUsingGET(
    key: string,
    versionId: number,
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .getMetaValueByKeyUsingGET(key, versionId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 获取模型的目录树
   * @param {string} versionIds versionIds
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public getTreeUsingGET(versionIds: string, options?: any) {
    return VersionApiFp(this.configuration)
      .getTreeUsingGET(versionIds, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 按mvd获取version信息(Deprecated，被v3版本替换)
   * @param {number} versionId versionId
   * @param {string} [mvd] mvd
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public getVersionByIdAndMvdsUsingGET(
    versionId: number,
    mvd?: string,
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .getVersionByIdAndMvdsUsingGET(versionId, mvd, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 按mvd获取version信息(不会填充RawData和RefInfo字段)
   * @param {number} versionId versionId
   * @param {string} [mvd] mvd
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public getVersionByIdAndMvdsWithoutRawDataAndRefInfoUsingGET(
    versionId: number,
    mvd?: string,
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .getVersionByIdAndMvdsWithoutRawDataAndRefInfoUsingGET(
        versionId,
        mvd,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 获取版本支持的mvd
   * @param {number} versionId versionId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public getVersionSupportedMvdUsingGET(versionId: number, options?: any) {
    return VersionApiFp(this.configuration)
      .getVersionSupportedMvdUsingGET(versionId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getVersion
   * @param {number} versionId versionId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public getVersionUsingGET1(versionId: number, options?: any) {
    return VersionApiFp(this.configuration)
      .getVersionUsingGET1(versionId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 根据工作单元id批量查询版本信息
   * @param {Array<string>} dataSetIds dataSetIds
   * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public getVersionsByDataSetIdsAndColumnsUsingPOST(
    dataSetIds: Array<string>,
    onlySuccess?: boolean,
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .getVersionsByDataSetIdsAndColumnsUsingPOST(
        dataSetIds,
        onlySuccess,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以mvd方式根据工作单元id批量查询版本信息
   * @param {Array<string>} dataSetIds dataSetIds
   * @param {boolean} [filterDelete] filterDelete
   * @param {string} [mvd] mvd
   * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public getVersionsByDataSetIdsMVDUsingPOST(
    dataSetIds: Array<string>,
    filterDelete?: boolean,
    mvd?: string,
    onlySuccess?: boolean,
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .getVersionsByDataSetIdsMVDUsingPOST(
        dataSetIds,
        filterDelete,
        mvd,
        onlySuccess,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 根据工作单元id批量查询版本信息
   * @param {Array<string>} dataSetIds dataSetIds
   * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public getVersionsByDataSetIdsUsingPOST(
    dataSetIds: Array<string>,
    onlySuccess?: boolean,
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .getVersionsByDataSetIdsUsingPOST(dataSetIds, onlySuccess, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 按mvd获取多个version的信息
   * @param {Array<number>} versionIds versionIds
   * @param {string} [mvd] mvd
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public getVersionsByIdsAndMvdsUsingPOST(
    versionIds: Array<number>,
    mvd?: string,
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .getVersionsByIdsAndMvdsUsingPOST(versionIds, mvd, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 根据id批量查询版本信息
   * @param {Array<number>} versionIds versionIds
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public getVersionsByIdsUsingPOST(versionIds: Array<number>, options?: any) {
    return VersionApiFp(this.configuration)
      .getVersionsByIdsUsingPOST(versionIds, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary getViewInfoValueByKey
   * @param {string} key key
   * @param {number} versionId versionId
   * @param {string} [xGdcUserid] x-gdc-userid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public getViewInfoValueByKeyUsingGET(
    key: string,
    versionId: number,
    xGdcUserid?: string,
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .getViewInfoValueByKeyUsingGET(key, versionId, xGdcUserid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary insertMeta
   * @param {number} versionId versionId
   * @param {{ [key: string]: object; }} metaMap metaMap
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public insertMetaUsingPOST(
    versionId: number,
    metaMap: { [key: string]: object },
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .insertMetaUsingPOST(versionId, metaMap, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary insertViewInfo
   * @param {number} versionId versionId
   * @param {{ [key: string]: object; }} viewMap viewMap
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public insertViewInfoUsingPOST(
    versionId: number,
    viewMap: { [key: string]: object },
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .insertViewInfoUsingPOST(versionId, viewMap, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 更改version删除状态
   * @param {OperateVersionParam} param param
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public operateVersionStateUsingPOST(
    param: OperateVersionParam,
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .operateVersionStateUsingPOST(param, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 重新计算生成显示版本号
   * @param {string} datasetId datasetId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public regenerateDisplayVersionUsingPOST(datasetId: string, options?: any) {
    return VersionApiFp(this.configuration)
      .regenerateDisplayVersionUsingPOST(datasetId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary updateVersionStatus
   * @param {string} status status
   * @param {number} versionId versionId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public updateVersionStatusUsingPOST(
    status: string,
    versionId: number,
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .updateVersionStatusUsingPOST(status, versionId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary updateVersionStatus
   * @param {string} dataSetId dataSetId
   * @param {string} status status
   * @param {number} version version
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public updateVersionStatusUsingPOST1(
    dataSetId: string,
    status: string,
    version: number,
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .updateVersionStatusUsingPOST1(dataSetId, status, version, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary updateVersion
   * @param {Version} version version
   * @param {boolean} [mergemeta] mergemeta
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public updateVersionUsingPOST(
    version: Version,
    mergemeta?: boolean,
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .updateVersionUsingPOST(version, mergemeta, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 从version_update_pool获取指定数量的升级信息并升级对应的version
   * @param {number} size size
   * @param {boolean} [setnull] setnull
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VersionApi
   */
  public updateVersionsUsingPOST(
    size: number,
    setnull?: boolean,
    options?: any,
  ) {
    return VersionApiFp(this.configuration)
      .updateVersionsUsingPOST(size, setnull, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

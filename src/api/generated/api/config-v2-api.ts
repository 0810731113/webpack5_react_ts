// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResponseEnhanceBimConfigVO } from '../model';
// @ts-ignore
import { ResponseListEnhanceBimConfigVO } from '../model';
// @ts-ignore
import { ResponseListstring } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
/**
 * ConfigV2Api - axios parameter creator
 * @export
 */
export const ConfigV2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 运维接口--为历史项目增加默认子项信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignDefaultSubItems4HistoryProjectUsingPOST: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/sub_item/history/project/repair`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 为子项添加新的配置
         * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
         * @param {string} projectId projectId
         * @param {number} subItemId subItemId
         * @param {string} config config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubItemConfigUsingPOST: async (configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, subItemId: number, config: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'configType' is not null or undefined
            if (configType === null || configType === undefined) {
                throw new RequiredError('configType','Required parameter configType was null or undefined when calling createSubItemConfigUsingPOST.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling createSubItemConfigUsingPOST.');
            }
            // verify required parameter 'subItemId' is not null or undefined
            if (subItemId === null || subItemId === undefined) {
                throw new RequiredError('subItemId','Required parameter subItemId was null or undefined when calling createSubItemConfigUsingPOST.');
            }
            // verify required parameter 'config' is not null or undefined
            if (config === null || config === undefined) {
                throw new RequiredError('config','Required parameter config was null or undefined when calling createSubItemConfigUsingPOST.');
            }
            const localVarPath = `/v2/{projectId}/sub_item/{subItemId}/config/type/{configType}`
                .replace(`{${"configType"}}`, encodeURIComponent(String(configType)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"subItemId"}}`, encodeURIComponent(String(subItemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof config !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(config !== undefined ? config : {}) : (config || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 为项目创建子项
         * @param {string} projectId projectId
         * @param {number} revision 版本号(值小于1表示版本未知，后台自动控制版本)
         * @param {string} config config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubItemUsingPOST: async (projectId: string, revision: number, config: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling createSubItemUsingPOST.');
            }
            // verify required parameter 'revision' is not null or undefined
            if (revision === null || revision === undefined) {
                throw new RequiredError('revision','Required parameter revision was null or undefined when calling createSubItemUsingPOST.');
            }
            // verify required parameter 'config' is not null or undefined
            if (config === null || config === undefined) {
                throw new RequiredError('config','Required parameter config was null or undefined when calling createSubItemUsingPOST.');
            }
            const localVarPath = `/v2/{projectId}/sub_item/{revision}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"revision"}}`, encodeURIComponent(String(revision)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof config !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(config !== undefined ? config : {}) : (config || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除子项的配置信息
         * @param {number} cfgId cfgId
         * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
         * @param {string} projectId projectId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubItemCfgUsingDELETE: async (cfgId: number, configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, version: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cfgId' is not null or undefined
            if (cfgId === null || cfgId === undefined) {
                throw new RequiredError('cfgId','Required parameter cfgId was null or undefined when calling deleteSubItemCfgUsingDELETE.');
            }
            // verify required parameter 'configType' is not null or undefined
            if (configType === null || configType === undefined) {
                throw new RequiredError('configType','Required parameter configType was null or undefined when calling deleteSubItemCfgUsingDELETE.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling deleteSubItemCfgUsingDELETE.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling deleteSubItemCfgUsingDELETE.');
            }
            const localVarPath = `/v2/{projectId}/config/{configType}/{cfgId}/{version}`
                .replace(`{${"cfgId"}}`, encodeURIComponent(String(cfgId)))
                .replace(`{${"configType"}}`, encodeURIComponent(String(configType)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除项目的子项
         * @param {string} projectId projectId
         * @param {number} revision revision
         * @param {number} subItemId subItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubItemUsingDELETE: async (projectId: string, revision: number, subItemId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling deleteSubItemUsingDELETE.');
            }
            // verify required parameter 'revision' is not null or undefined
            if (revision === null || revision === undefined) {
                throw new RequiredError('revision','Required parameter revision was null or undefined when calling deleteSubItemUsingDELETE.');
            }
            // verify required parameter 'subItemId' is not null or undefined
            if (subItemId === null || subItemId === undefined) {
                throw new RequiredError('subItemId','Required parameter subItemId was null or undefined when calling deleteSubItemUsingDELETE.');
            }
            const localVarPath = `/v2/{projectId}/sub_item/{subItemId}/{revision}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"revision"}}`, encodeURIComponent(String(revision)))
                .replace(`{${"subItemId"}}`, encodeURIComponent(String(subItemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据绑定Id和指定类型获取最新的配置列表
         * @param {string} bindId bindId
         * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestConfigUsingGET: async (bindId: string, configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bindId' is not null or undefined
            if (bindId === null || bindId === undefined) {
                throw new RequiredError('bindId','Required parameter bindId was null or undefined when calling getLatestConfigUsingGET.');
            }
            // verify required parameter 'configType' is not null or undefined
            if (configType === null || configType === undefined) {
                throw new RequiredError('configType','Required parameter configType was null or undefined when calling getLatestConfigUsingGET.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getLatestConfigUsingGET.');
            }
            const localVarPath = `/v2/{projectId}/config/binder/{bindId}/type/{configType}/latest`
                .replace(`{${"bindId"}}`, encodeURIComponent(String(bindId)))
                .replace(`{${"configType"}}`, encodeURIComponent(String(configType)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据项目Id获取最新版本的子项列表
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestSubItems4ProjectUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getLatestSubItems4ProjectUsingGET.');
            }
            const localVarPath = `/v2/{projectId}/sub_item/latest/list`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取指定版本的子项信息
         * @param {string} projectId projectId
         * @param {number} subItemId subItemId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubItem4VersionUsingGET: async (projectId: string, subItemId: number, version: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getSubItem4VersionUsingGET.');
            }
            // verify required parameter 'subItemId' is not null or undefined
            if (subItemId === null || subItemId === undefined) {
                throw new RequiredError('subItemId','Required parameter subItemId was null or undefined when calling getSubItem4VersionUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getSubItem4VersionUsingGET.');
            }
            const localVarPath = `/v2/{projectId}/sub_item/{subItemId}/version/{version}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"subItemId"}}`, encodeURIComponent(String(subItemId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据子项id、配置类型、配置版本获取配置信息
         * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
         * @param {string} projectId projectId
         * @param {string} subItemId subItemId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubItemCfg4IdAndVersionUsingGET: async (configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, subItemId: string, version: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'configType' is not null or undefined
            if (configType === null || configType === undefined) {
                throw new RequiredError('configType','Required parameter configType was null or undefined when calling getSubItemCfg4IdAndVersionUsingGET.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getSubItemCfg4IdAndVersionUsingGET.');
            }
            // verify required parameter 'subItemId' is not null or undefined
            if (subItemId === null || subItemId === undefined) {
                throw new RequiredError('subItemId','Required parameter subItemId was null or undefined when calling getSubItemCfg4IdAndVersionUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getSubItemCfg4IdAndVersionUsingGET.');
            }
            const localVarPath = `/v2/{projectId}/config/{subItemId}/{configType}/version/{version}`
                .replace(`{${"configType"}}`, encodeURIComponent(String(configType)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"subItemId"}}`, encodeURIComponent(String(subItemId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取最新版本的子项信息
         * @param {string} projectId projectId
         * @param {number} subItemId subItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubItemLatestUsingGET: async (projectId: string, subItemId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getSubItemLatestUsingGET.');
            }
            // verify required parameter 'subItemId' is not null or undefined
            if (subItemId === null || subItemId === undefined) {
                throw new RequiredError('subItemId','Required parameter subItemId was null or undefined when calling getSubItemLatestUsingGET.');
            }
            const localVarPath = `/v2/{projectId}/sub_item/{subItemId}/latest`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"subItemId"}}`, encodeURIComponent(String(subItemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取指定项目版本的子项列表
         * @param {string} projectId projectId
         * @param {number} revision revision
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubItemList4VersionUsingGET: async (projectId: string, revision: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getSubItemList4VersionUsingGET.');
            }
            // verify required parameter 'revision' is not null or undefined
            if (revision === null || revision === undefined) {
                throw new RequiredError('revision','Required parameter revision was null or undefined when calling getSubItemList4VersionUsingGET.');
            }
            const localVarPath = `/v2/{projectId}/sub_item/revision/{revision}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"revision"}}`, encodeURIComponent(String(revision)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据子项Id和配置的版本更新配置
         * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
         * @param {string} projectId projectId
         * @param {string} subItemId subItemId
         * @param {number} version version
         * @param {string} config config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubItemConfigUseSubItemIdAndCfgVersionUsingPUT: async (configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, subItemId: string, version: number, config: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'configType' is not null or undefined
            if (configType === null || configType === undefined) {
                throw new RequiredError('configType','Required parameter configType was null or undefined when calling updateSubItemConfigUseSubItemIdAndCfgVersionUsingPUT.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling updateSubItemConfigUseSubItemIdAndCfgVersionUsingPUT.');
            }
            // verify required parameter 'subItemId' is not null or undefined
            if (subItemId === null || subItemId === undefined) {
                throw new RequiredError('subItemId','Required parameter subItemId was null or undefined when calling updateSubItemConfigUseSubItemIdAndCfgVersionUsingPUT.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling updateSubItemConfigUseSubItemIdAndCfgVersionUsingPUT.');
            }
            // verify required parameter 'config' is not null or undefined
            if (config === null || config === undefined) {
                throw new RequiredError('config','Required parameter config was null or undefined when calling updateSubItemConfigUseSubItemIdAndCfgVersionUsingPUT.');
            }
            const localVarPath = `/v2/{projectId}/config/subItem/{subItemId}/type/{configType}/version/{version}`
                .replace(`{${"configType"}}`, encodeURIComponent(String(configType)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"subItemId"}}`, encodeURIComponent(String(subItemId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof config !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(config !== undefined ? config : {}) : (config || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新项目的子项
         * @param {string} projectId projectId
         * @param {number} revision revision
         * @param {number} subItemId subItemId
         * @param {string} config config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubItemUsingPUT: async (projectId: string, revision: number, subItemId: number, config: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling updateSubItemUsingPUT.');
            }
            // verify required parameter 'revision' is not null or undefined
            if (revision === null || revision === undefined) {
                throw new RequiredError('revision','Required parameter revision was null or undefined when calling updateSubItemUsingPUT.');
            }
            // verify required parameter 'subItemId' is not null or undefined
            if (subItemId === null || subItemId === undefined) {
                throw new RequiredError('subItemId','Required parameter subItemId was null or undefined when calling updateSubItemUsingPUT.');
            }
            // verify required parameter 'config' is not null or undefined
            if (config === null || config === undefined) {
                throw new RequiredError('config','Required parameter config was null or undefined when calling updateSubItemUsingPUT.');
            }
            const localVarPath = `/v2/{projectId}/sub_item/{subItemId}/{revision}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"revision"}}`, encodeURIComponent(String(revision)))
                .replace(`{${"subItemId"}}`, encodeURIComponent(String(subItemId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof config !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(config !== undefined ? config : {}) : (config || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigV2Api - functional programming interface
 * @export
 */
export const ConfigV2ApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 运维接口--为历史项目增加默认子项信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignDefaultSubItems4HistoryProjectUsingPOST(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListstring>> {
            const localVarAxiosArgs = await ConfigV2ApiAxiosParamCreator(configuration).assignDefaultSubItems4HistoryProjectUsingPOST(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 为子项添加新的配置
         * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
         * @param {string} projectId projectId
         * @param {number} subItemId subItemId
         * @param {string} config config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubItemConfigUsingPOST(configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, subItemId: number, config: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseEnhanceBimConfigVO>> {
            const localVarAxiosArgs = await ConfigV2ApiAxiosParamCreator(configuration).createSubItemConfigUsingPOST(configType, projectId, subItemId, config, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 为项目创建子项
         * @param {string} projectId projectId
         * @param {number} revision 版本号(值小于1表示版本未知，后台自动控制版本)
         * @param {string} config config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubItemUsingPOST(projectId: string, revision: number, config: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseEnhanceBimConfigVO>> {
            const localVarAxiosArgs = await ConfigV2ApiAxiosParamCreator(configuration).createSubItemUsingPOST(projectId, revision, config, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除子项的配置信息
         * @param {number} cfgId cfgId
         * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
         * @param {string} projectId projectId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubItemCfgUsingDELETE(cfgId: number, configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, version: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await ConfigV2ApiAxiosParamCreator(configuration).deleteSubItemCfgUsingDELETE(cfgId, configType, projectId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除项目的子项
         * @param {string} projectId projectId
         * @param {number} revision revision
         * @param {number} subItemId subItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubItemUsingDELETE(projectId: string, revision: number, subItemId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await ConfigV2ApiAxiosParamCreator(configuration).deleteSubItemUsingDELETE(projectId, revision, subItemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据绑定Id和指定类型获取最新的配置列表
         * @param {string} bindId bindId
         * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestConfigUsingGET(bindId: string, configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListEnhanceBimConfigVO>> {
            const localVarAxiosArgs = await ConfigV2ApiAxiosParamCreator(configuration).getLatestConfigUsingGET(bindId, configType, projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据项目Id获取最新版本的子项列表
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestSubItems4ProjectUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListEnhanceBimConfigVO>> {
            const localVarAxiosArgs = await ConfigV2ApiAxiosParamCreator(configuration).getLatestSubItems4ProjectUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取指定版本的子项信息
         * @param {string} projectId projectId
         * @param {number} subItemId subItemId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubItem4VersionUsingGET(projectId: string, subItemId: number, version: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseEnhanceBimConfigVO>> {
            const localVarAxiosArgs = await ConfigV2ApiAxiosParamCreator(configuration).getSubItem4VersionUsingGET(projectId, subItemId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据子项id、配置类型、配置版本获取配置信息
         * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
         * @param {string} projectId projectId
         * @param {string} subItemId subItemId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubItemCfg4IdAndVersionUsingGET(configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, subItemId: string, version: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseEnhanceBimConfigVO>> {
            const localVarAxiosArgs = await ConfigV2ApiAxiosParamCreator(configuration).getSubItemCfg4IdAndVersionUsingGET(configType, projectId, subItemId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取最新版本的子项信息
         * @param {string} projectId projectId
         * @param {number} subItemId subItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubItemLatestUsingGET(projectId: string, subItemId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseEnhanceBimConfigVO>> {
            const localVarAxiosArgs = await ConfigV2ApiAxiosParamCreator(configuration).getSubItemLatestUsingGET(projectId, subItemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取指定项目版本的子项列表
         * @param {string} projectId projectId
         * @param {number} revision revision
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubItemList4VersionUsingGET(projectId: string, revision: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListEnhanceBimConfigVO>> {
            const localVarAxiosArgs = await ConfigV2ApiAxiosParamCreator(configuration).getSubItemList4VersionUsingGET(projectId, revision, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据子项Id和配置的版本更新配置
         * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
         * @param {string} projectId projectId
         * @param {string} subItemId subItemId
         * @param {number} version version
         * @param {string} config config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubItemConfigUseSubItemIdAndCfgVersionUsingPUT(configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, subItemId: string, version: number, config: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseEnhanceBimConfigVO>> {
            const localVarAxiosArgs = await ConfigV2ApiAxiosParamCreator(configuration).updateSubItemConfigUseSubItemIdAndCfgVersionUsingPUT(configType, projectId, subItemId, version, config, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新项目的子项
         * @param {string} projectId projectId
         * @param {number} revision revision
         * @param {number} subItemId subItemId
         * @param {string} config config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubItemUsingPUT(projectId: string, revision: number, subItemId: number, config: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseEnhanceBimConfigVO>> {
            const localVarAxiosArgs = await ConfigV2ApiAxiosParamCreator(configuration).updateSubItemUsingPUT(projectId, revision, subItemId, config, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ConfigV2Api - factory interface
 * @export
 */
export const ConfigV2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 运维接口--为历史项目增加默认子项信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignDefaultSubItems4HistoryProjectUsingPOST(options?: any): AxiosPromise<ResponseListstring> {
            return ConfigV2ApiFp(configuration).assignDefaultSubItems4HistoryProjectUsingPOST(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 为子项添加新的配置
         * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
         * @param {string} projectId projectId
         * @param {number} subItemId subItemId
         * @param {string} config config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubItemConfigUsingPOST(configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, subItemId: number, config: string, options?: any): AxiosPromise<ResponseEnhanceBimConfigVO> {
            return ConfigV2ApiFp(configuration).createSubItemConfigUsingPOST(configType, projectId, subItemId, config, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 为项目创建子项
         * @param {string} projectId projectId
         * @param {number} revision 版本号(值小于1表示版本未知，后台自动控制版本)
         * @param {string} config config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubItemUsingPOST(projectId: string, revision: number, config: string, options?: any): AxiosPromise<ResponseEnhanceBimConfigVO> {
            return ConfigV2ApiFp(configuration).createSubItemUsingPOST(projectId, revision, config, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除子项的配置信息
         * @param {number} cfgId cfgId
         * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
         * @param {string} projectId projectId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubItemCfgUsingDELETE(cfgId: number, configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, version: number, options?: any): AxiosPromise<ResponseVoid> {
            return ConfigV2ApiFp(configuration).deleteSubItemCfgUsingDELETE(cfgId, configType, projectId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除项目的子项
         * @param {string} projectId projectId
         * @param {number} revision revision
         * @param {number} subItemId subItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubItemUsingDELETE(projectId: string, revision: number, subItemId: number, options?: any): AxiosPromise<ResponseVoid> {
            return ConfigV2ApiFp(configuration).deleteSubItemUsingDELETE(projectId, revision, subItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据绑定Id和指定类型获取最新的配置列表
         * @param {string} bindId bindId
         * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestConfigUsingGET(bindId: string, configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, options?: any): AxiosPromise<ResponseListEnhanceBimConfigVO> {
            return ConfigV2ApiFp(configuration).getLatestConfigUsingGET(bindId, configType, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据项目Id获取最新版本的子项列表
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestSubItems4ProjectUsingGET(projectId: string, options?: any): AxiosPromise<ResponseListEnhanceBimConfigVO> {
            return ConfigV2ApiFp(configuration).getLatestSubItems4ProjectUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取指定版本的子项信息
         * @param {string} projectId projectId
         * @param {number} subItemId subItemId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubItem4VersionUsingGET(projectId: string, subItemId: number, version: number, options?: any): AxiosPromise<ResponseEnhanceBimConfigVO> {
            return ConfigV2ApiFp(configuration).getSubItem4VersionUsingGET(projectId, subItemId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据子项id、配置类型、配置版本获取配置信息
         * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
         * @param {string} projectId projectId
         * @param {string} subItemId subItemId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubItemCfg4IdAndVersionUsingGET(configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, subItemId: string, version: number, options?: any): AxiosPromise<ResponseEnhanceBimConfigVO> {
            return ConfigV2ApiFp(configuration).getSubItemCfg4IdAndVersionUsingGET(configType, projectId, subItemId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取最新版本的子项信息
         * @param {string} projectId projectId
         * @param {number} subItemId subItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubItemLatestUsingGET(projectId: string, subItemId: number, options?: any): AxiosPromise<ResponseEnhanceBimConfigVO> {
            return ConfigV2ApiFp(configuration).getSubItemLatestUsingGET(projectId, subItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取指定项目版本的子项列表
         * @param {string} projectId projectId
         * @param {number} revision revision
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubItemList4VersionUsingGET(projectId: string, revision: number, options?: any): AxiosPromise<ResponseListEnhanceBimConfigVO> {
            return ConfigV2ApiFp(configuration).getSubItemList4VersionUsingGET(projectId, revision, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据子项Id和配置的版本更新配置
         * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
         * @param {string} projectId projectId
         * @param {string} subItemId subItemId
         * @param {number} version version
         * @param {string} config config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubItemConfigUseSubItemIdAndCfgVersionUsingPUT(configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, subItemId: string, version: number, config: string, options?: any): AxiosPromise<ResponseEnhanceBimConfigVO> {
            return ConfigV2ApiFp(configuration).updateSubItemConfigUseSubItemIdAndCfgVersionUsingPUT(configType, projectId, subItemId, version, config, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新项目的子项
         * @param {string} projectId projectId
         * @param {number} revision revision
         * @param {number} subItemId subItemId
         * @param {string} config config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubItemUsingPUT(projectId: string, revision: number, subItemId: number, config: string, options?: any): AxiosPromise<ResponseEnhanceBimConfigVO> {
            return ConfigV2ApiFp(configuration).updateSubItemUsingPUT(projectId, revision, subItemId, config, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigV2Api - object-oriented interface
 * @export
 * @class ConfigV2Api
 * @extends {BaseAPI}
 */
export class ConfigV2Api extends BaseAPI {
    /**
     * 
     * @summary 运维接口--为历史项目增加默认子项信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigV2Api
     */
    public assignDefaultSubItems4HistoryProjectUsingPOST(options?: any) {
        return ConfigV2ApiFp(this.configuration).assignDefaultSubItems4HistoryProjectUsingPOST(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 为子项添加新的配置
     * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
     * @param {string} projectId projectId
     * @param {number} subItemId subItemId
     * @param {string} config config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigV2Api
     */
    public createSubItemConfigUsingPOST(configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, subItemId: number, config: string, options?: any) {
        return ConfigV2ApiFp(this.configuration).createSubItemConfigUsingPOST(configType, projectId, subItemId, config, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 为项目创建子项
     * @param {string} projectId projectId
     * @param {number} revision 版本号(值小于1表示版本未知，后台自动控制版本)
     * @param {string} config config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigV2Api
     */
    public createSubItemUsingPOST(projectId: string, revision: number, config: string, options?: any) {
        return ConfigV2ApiFp(this.configuration).createSubItemUsingPOST(projectId, revision, config, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除子项的配置信息
     * @param {number} cfgId cfgId
     * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
     * @param {string} projectId projectId
     * @param {number} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigV2Api
     */
    public deleteSubItemCfgUsingDELETE(cfgId: number, configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, version: number, options?: any) {
        return ConfigV2ApiFp(this.configuration).deleteSubItemCfgUsingDELETE(cfgId, configType, projectId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除项目的子项
     * @param {string} projectId projectId
     * @param {number} revision revision
     * @param {number} subItemId subItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigV2Api
     */
    public deleteSubItemUsingDELETE(projectId: string, revision: number, subItemId: number, options?: any) {
        return ConfigV2ApiFp(this.configuration).deleteSubItemUsingDELETE(projectId, revision, subItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据绑定Id和指定类型获取最新的配置列表
     * @param {string} bindId bindId
     * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigV2Api
     */
    public getLatestConfigUsingGET(bindId: string, configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, options?: any) {
        return ConfigV2ApiFp(this.configuration).getLatestConfigUsingGET(bindId, configType, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据项目Id获取最新版本的子项列表
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigV2Api
     */
    public getLatestSubItems4ProjectUsingGET(projectId: string, options?: any) {
        return ConfigV2ApiFp(this.configuration).getLatestSubItems4ProjectUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取指定版本的子项信息
     * @param {string} projectId projectId
     * @param {number} subItemId subItemId
     * @param {number} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigV2Api
     */
    public getSubItem4VersionUsingGET(projectId: string, subItemId: number, version: number, options?: any) {
        return ConfigV2ApiFp(this.configuration).getSubItem4VersionUsingGET(projectId, subItemId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据子项id、配置类型、配置版本获取配置信息
     * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
     * @param {string} projectId projectId
     * @param {string} subItemId subItemId
     * @param {number} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigV2Api
     */
    public getSubItemCfg4IdAndVersionUsingGET(configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, subItemId: string, version: number, options?: any) {
        return ConfigV2ApiFp(this.configuration).getSubItemCfg4IdAndVersionUsingGET(configType, projectId, subItemId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取最新版本的子项信息
     * @param {string} projectId projectId
     * @param {number} subItemId subItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigV2Api
     */
    public getSubItemLatestUsingGET(projectId: string, subItemId: number, options?: any) {
        return ConfigV2ApiFp(this.configuration).getSubItemLatestUsingGET(projectId, subItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取指定项目版本的子项列表
     * @param {string} projectId projectId
     * @param {number} revision revision
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigV2Api
     */
    public getSubItemList4VersionUsingGET(projectId: string, revision: number, options?: any) {
        return ConfigV2ApiFp(this.configuration).getSubItemList4VersionUsingGET(projectId, revision, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据子项Id和配置的版本更新配置
     * @param {'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate'} configType configType
     * @param {string} projectId projectId
     * @param {string} subItemId subItemId
     * @param {number} version version
     * @param {string} config config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigV2Api
     */
    public updateSubItemConfigUseSubItemIdAndCfgVersionUsingPUT(configType: 'SpaceConfig' | 'GridConfig' | 'SubItem' | 'Coordinate', projectId: string, subItemId: string, version: number, config: string, options?: any) {
        return ConfigV2ApiFp(this.configuration).updateSubItemConfigUseSubItemIdAndCfgVersionUsingPUT(configType, projectId, subItemId, version, config, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新项目的子项
     * @param {string} projectId projectId
     * @param {number} revision revision
     * @param {number} subItemId subItemId
     * @param {string} config config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigV2Api
     */
    public updateSubItemUsingPUT(projectId: string, revision: number, subItemId: number, config: string, options?: any) {
        return ConfigV2ApiFp(this.configuration).updateSubItemUsingPUT(projectId, revision, subItemId, config, options).then((request) => request(this.axios, this.basePath));
    }

}

// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ArchivePackageCreation } from '../model';
// @ts-ignore
import { ArchivePackageUpdation } from '../model';
// @ts-ignore
import { ArchiveResources } from '../model';
// @ts-ignore
import { Resource } from '../model';
// @ts-ignore
import { ResponseArchivePackageVO } from '../model';
// @ts-ignore
import { ResponseArchiveVersionVO } from '../model';
// @ts-ignore
import { ResponseListArchivePackageVO } from '../model';
// @ts-ignore
import { ResponseListArchiveVersionVO } from '../model';
// @ts-ignore
import { ResponseListAssignmentArchiveResultVO } from '../model';
// @ts-ignore
import { ResponseListAssignmentArchiveVO } from '../model';
// @ts-ignore
import { Responseboolean } from '../model';
/**
 * ArchiveApi - axios parameter creator
 * @export
 */
export const ArchiveApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 向草稿归档资料包中添加资源
         * @param {string} packageId packageId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchiveResources} resources resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addResourcesToDraftPackageUsingPOST: async (packageId: string, xGdcUserid: string, resources: ArchiveResources, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling addResourcesToDraftPackageUsingPOST.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling addResourcesToDraftPackageUsingPOST.');
            }
            // verify required parameter 'resources' is not null or undefined
            if (resources === null || resources === undefined) {
                throw new RequiredError('resources','Required parameter resources was null or undefined when calling addResourcesToDraftPackageUsingPOST.');
            }
            const localVarPath = `/archive-packages/{packageId}/resources/draft`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof resources !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(resources !== undefined ? resources : {}) : (resources || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 向归档资料包中添加资源V2
         * @param {string} packageId packageId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchiveResources} resources resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addResourcesToPackage4v2UsingPOST: async (packageId: string, xGdcUserid: string, resources: ArchiveResources, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling addResourcesToPackage4v2UsingPOST.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling addResourcesToPackage4v2UsingPOST.');
            }
            // verify required parameter 'resources' is not null or undefined
            if (resources === null || resources === undefined) {
                throw new RequiredError('resources','Required parameter resources was null or undefined when calling addResourcesToPackage4v2UsingPOST.');
            }
            const localVarPath = `/v2/archive-packages/{packageId}/resources`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof resources !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(resources !== undefined ? resources : {}) : (resources || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 向归档资料包中添加资源
         * @param {string} packageId packageId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<Resource>} resources resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addResourcesToPackageUsingPOST: async (packageId: string, xGdcUserid: string, resources: Array<Resource>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling addResourcesToPackageUsingPOST.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling addResourcesToPackageUsingPOST.');
            }
            // verify required parameter 'resources' is not null or undefined
            if (resources === null || resources === undefined) {
                throw new RequiredError('resources','Required parameter resources was null or undefined when calling addResourcesToPackageUsingPOST.');
            }
            const localVarPath = `/archive-packages/{packageId}/resources`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof resources !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(resources !== undefined ? resources : {}) : (resources || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分配资源包用户
         * @param {string} packageId packageId
         * @param {string} projectId projectId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<string>} recipients recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignArchive2RecipientsUsingPOST: async (packageId: string, projectId: string, version: number, xGdcUserid: string, recipients: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling assignArchive2RecipientsUsingPOST.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling assignArchive2RecipientsUsingPOST.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling assignArchive2RecipientsUsingPOST.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling assignArchive2RecipientsUsingPOST.');
            }
            // verify required parameter 'recipients' is not null or undefined
            if (recipients === null || recipients === undefined) {
                throw new RequiredError('recipients','Required parameter recipients was null or undefined when calling assignArchive2RecipientsUsingPOST.');
            }
            const localVarPath = `/archive-assignment/{projectId}/package/{packageId}/version/{version}`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof recipients !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(recipients !== undefined ? recipients : {}) : (recipients || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 检查用户是否已经在项目中
         * @param {string} projectId projectId
         * @param {string} recipient recipient
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkRecipientInProjectUsingGET: async (projectId: string, recipient: string, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling checkRecipientInProjectUsingGET.');
            }
            // verify required parameter 'recipient' is not null or undefined
            if (recipient === null || recipient === undefined) {
                throw new RequiredError('recipient','Required parameter recipient was null or undefined when calling checkRecipientInProjectUsingGET.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling checkRecipientInProjectUsingGET.');
            }
            const localVarPath = `/archive-assignment/{projectId}/check/user/{recipient}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"recipient"}}`, encodeURIComponent(String(recipient)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建归档资料包
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchivePackageCreation} archivePackageCreation archivePackageCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArchivePackageUsingPOST: async (xGdcUserid: string, archivePackageCreation: ArchivePackageCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling createArchivePackageUsingPOST.');
            }
            // verify required parameter 'archivePackageCreation' is not null or undefined
            if (archivePackageCreation === null || archivePackageCreation === undefined) {
                throw new RequiredError('archivePackageCreation','Required parameter archivePackageCreation was null or undefined when calling createArchivePackageUsingPOST.');
            }
            const localVarPath = `/archive-packages`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof archivePackageCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(archivePackageCreation !== undefined ? archivePackageCreation : {}) : (archivePackageCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 禁用资源包
         * @param {string} packageId packageId
         * @param {string} projectId projectId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<string>} recipients recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disable4RecipientsUsingPUT: async (packageId: string, projectId: string, version: number, xGdcUserid: string, recipients: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling disable4RecipientsUsingPUT.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling disable4RecipientsUsingPUT.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling disable4RecipientsUsingPUT.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling disable4RecipientsUsingPUT.');
            }
            // verify required parameter 'recipients' is not null or undefined
            if (recipients === null || recipients === undefined) {
                throw new RequiredError('recipients','Required parameter recipients was null or undefined when calling disable4RecipientsUsingPUT.');
            }
            const localVarPath = `/archive-assignment/{projectId}/package/{packageId}/version/{version}/disable`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof recipients !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(recipients !== undefined ? recipients : {}) : (recipients || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除未分配的归档资料包
         * @param {string} packageId packageId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dropArchivePackage4VersionUsingDELETE: async (packageId: string, version: number, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling dropArchivePackage4VersionUsingDELETE.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling dropArchivePackage4VersionUsingDELETE.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling dropArchivePackage4VersionUsingDELETE.');
            }
            const localVarPath = `/archive-packages/package/{packageId}/version/{version}`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除未分配的归档资料包
         * @param {string} packageId packageId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dropArchivePackageUsingDELETE: async (packageId: string, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling dropArchivePackageUsingDELETE.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling dropArchivePackageUsingDELETE.');
            }
            const localVarPath = `/archive-packages/package/{packageId}`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 启用已经禁用的资源包
         * @param {string} packageId packageId
         * @param {string} projectId projectId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<string>} recipients recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enable4RecipientsUsingPUT: async (packageId: string, projectId: string, version: number, xGdcUserid: string, recipients: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling enable4RecipientsUsingPUT.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling enable4RecipientsUsingPUT.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling enable4RecipientsUsingPUT.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling enable4RecipientsUsingPUT.');
            }
            // verify required parameter 'recipients' is not null or undefined
            if (recipients === null || recipients === undefined) {
                throw new RequiredError('recipients','Required parameter recipients was null or undefined when calling enable4RecipientsUsingPUT.');
            }
            const localVarPath = `/archive-assignment/{projectId}/package/{packageId}/version/{version}/enable`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof recipients !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(recipients !== undefined ? recipients : {}) : (recipients || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询资源包的分配情况
         * @param {string} packageId packageId
         * @param {string} projectId projectId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRecipients4ResouceUsingGET: async (packageId: string, projectId: string, version: number, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling findRecipients4ResouceUsingGET.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling findRecipients4ResouceUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling findRecipients4ResouceUsingGET.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling findRecipients4ResouceUsingGET.');
            }
            const localVarPath = `/archive-assignment/{projectId}/package/{packageId}/version/{version}`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据id查询归档资料包的详情
         * @param {string} packageId packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchivePackageUsingGET: async (packageId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling getArchivePackageUsingGET.');
            }
            const localVarPath = `/archive-packages/{packageId}`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询项目下的所有归档资料包
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchivePackagesByProjectIdUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getArchivePackagesByProjectIdUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/archive-packages`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询某个归档资料包指定的版本
         * @param {string} packageId packageId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchiveVersionByPackageVersionUsingGET: async (packageId: string, version: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling getArchiveVersionByPackageVersionUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getArchiveVersionByPackageVersionUsingGET.');
            }
            const localVarPath = `/archive-versions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (packageId !== undefined) {
                localVarQueryParameter['packageId'] = packageId;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据id批量查询归档资料包的所有版本(V2)
         * @param {Array<string>} packageIds packageIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchiveVersions4V2UsingPOST: async (packageIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageIds' is not null or undefined
            if (packageIds === null || packageIds === undefined) {
                throw new RequiredError('packageIds','Required parameter packageIds was null or undefined when calling getArchiveVersions4V2UsingPOST.');
            }
            const localVarPath = `/v2/search/archive-packages/versions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof packageIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(packageIds !== undefined ? packageIds : {}) : (packageIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询某个归档资料包的所有版本(V2)
         * @param {string} packageId packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchiveVersionsByPackageId4V2UsingGET: async (packageId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling getArchiveVersionsByPackageId4V2UsingGET.');
            }
            const localVarPath = `/v2/archive-packages/{packageId}/versions`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询某个归档资料包的所有版本
         * @param {string} packageId packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchiveVersionsByPackageIdUsingGET: async (packageId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling getArchiveVersionsByPackageIdUsingGET.');
            }
            const localVarPath = `/archive-packages/{packageId}/versions`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据id批量查询归档资料包的所有版本
         * @param {Array<string>} packageIds packageIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchiveVersionsUsingPOST: async (packageIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageIds' is not null or undefined
            if (packageIds === null || packageIds === undefined) {
                throw new RequiredError('packageIds','Required parameter packageIds was null or undefined when calling getArchiveVersionsUsingPOST.');
            }
            const localVarPath = `/search/archive-packages/versions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof packageIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(packageIds !== undefined ? packageIds : {}) : (packageIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据用户角色获取当前用户在当前项目下存在哪些交付包
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignArchive4CurrentUserByRoleUsingGET: async (projectId: string, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getAssignArchive4CurrentUserByRoleUsingGET.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling getAssignArchive4CurrentUserByRoleUsingGET.');
            }
            const localVarPath = `/archive-assignment/project/{projectId}/packages/role`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取当前用户存在哪些交付包
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignArchive4CurrentUserUsingGET: async (xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling getAssignArchive4CurrentUserUsingGET.');
            }
            const localVarPath = `/archive-assignment/packages/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取当前用户在当前项目下存在哪些交付包
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignArchive4CurrentUserUsingGET1: async (projectId: string, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getAssignArchive4CurrentUserUsingGET1.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling getAssignArchive4CurrentUserUsingGET1.');
            }
            const localVarPath = `/archive-assignment/project/{projectId}/packages`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 将草稿档资料包保存为提交状态资源包
         * @param {string} packageId packageId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchiveResources} resources resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveDraftArchivePackage2CommitStatusUsingPUT: async (packageId: string, version: number, xGdcUserid: string, resources: ArchiveResources, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling saveDraftArchivePackage2CommitStatusUsingPUT.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling saveDraftArchivePackage2CommitStatusUsingPUT.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling saveDraftArchivePackage2CommitStatusUsingPUT.');
            }
            // verify required parameter 'resources' is not null or undefined
            if (resources === null || resources === undefined) {
                throw new RequiredError('resources','Required parameter resources was null or undefined when calling saveDraftArchivePackage2CommitStatusUsingPUT.');
            }
            const localVarPath = `/archive-packages/package/{packageId}/version/{version}/commit`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof resources !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(resources !== undefined ? resources : {}) : (resources || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新交付包/版本的说明
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchivePackageUpdation} archivePackageUpdation archivePackageUpdation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArchivePackageUsingPUT: async (xGdcUserid: string, archivePackageUpdation: ArchivePackageUpdation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling updateArchivePackageUsingPUT.');
            }
            // verify required parameter 'archivePackageUpdation' is not null or undefined
            if (archivePackageUpdation === null || archivePackageUpdation === undefined) {
                throw new RequiredError('archivePackageUpdation','Required parameter archivePackageUpdation was null or undefined when calling updateArchivePackageUsingPUT.');
            }
            const localVarPath = `/archive-packages`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof archivePackageUpdation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(archivePackageUpdation !== undefined ? archivePackageUpdation : {}) : (archivePackageUpdation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 向草稿归档资料包中更新资源
         * @param {string} packageId packageId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchiveResources} resources resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourcesToDraftPackageUsingPUT: async (packageId: string, version: number, xGdcUserid: string, resources: ArchiveResources, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling updateResourcesToDraftPackageUsingPUT.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling updateResourcesToDraftPackageUsingPUT.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling updateResourcesToDraftPackageUsingPUT.');
            }
            // verify required parameter 'resources' is not null or undefined
            if (resources === null || resources === undefined) {
                throw new RequiredError('resources','Required parameter resources was null or undefined when calling updateResourcesToDraftPackageUsingPUT.');
            }
            const localVarPath = `/archive-packages/{packageId}/{version}/resources/draft`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof resources !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(resources !== undefined ? resources : {}) : (resources || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArchiveApi - functional programming interface
 * @export
 */
export const ArchiveApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 向草稿归档资料包中添加资源
         * @param {string} packageId packageId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchiveResources} resources resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addResourcesToDraftPackageUsingPOST(packageId: string, xGdcUserid: string, resources: ArchiveResources, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseArchiveVersionVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).addResourcesToDraftPackageUsingPOST(packageId, xGdcUserid, resources, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 向归档资料包中添加资源V2
         * @param {string} packageId packageId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchiveResources} resources resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addResourcesToPackage4v2UsingPOST(packageId: string, xGdcUserid: string, resources: ArchiveResources, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseArchiveVersionVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).addResourcesToPackage4v2UsingPOST(packageId, xGdcUserid, resources, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 向归档资料包中添加资源
         * @param {string} packageId packageId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<Resource>} resources resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addResourcesToPackageUsingPOST(packageId: string, xGdcUserid: string, resources: Array<Resource>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseArchiveVersionVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).addResourcesToPackageUsingPOST(packageId, xGdcUserid, resources, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 分配资源包用户
         * @param {string} packageId packageId
         * @param {string} projectId projectId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<string>} recipients recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignArchive2RecipientsUsingPOST(packageId: string, projectId: string, version: number, xGdcUserid: string, recipients: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListAssignmentArchiveVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).assignArchive2RecipientsUsingPOST(packageId, projectId, version, xGdcUserid, recipients, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 检查用户是否已经在项目中
         * @param {string} projectId projectId
         * @param {string} recipient recipient
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkRecipientInProjectUsingGET(projectId: string, recipient: string, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseboolean>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).checkRecipientInProjectUsingGET(projectId, recipient, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建归档资料包
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchivePackageCreation} archivePackageCreation archivePackageCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createArchivePackageUsingPOST(xGdcUserid: string, archivePackageCreation: ArchivePackageCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseArchivePackageVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).createArchivePackageUsingPOST(xGdcUserid, archivePackageCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 禁用资源包
         * @param {string} packageId packageId
         * @param {string} projectId projectId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<string>} recipients recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disable4RecipientsUsingPUT(packageId: string, projectId: string, version: number, xGdcUserid: string, recipients: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListAssignmentArchiveVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).disable4RecipientsUsingPUT(packageId, projectId, version, xGdcUserid, recipients, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除未分配的归档资料包
         * @param {string} packageId packageId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dropArchivePackage4VersionUsingDELETE(packageId: string, version: number, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseArchiveVersionVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).dropArchivePackage4VersionUsingDELETE(packageId, version, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除未分配的归档资料包
         * @param {string} packageId packageId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dropArchivePackageUsingDELETE(packageId: string, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseArchivePackageVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).dropArchivePackageUsingDELETE(packageId, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 启用已经禁用的资源包
         * @param {string} packageId packageId
         * @param {string} projectId projectId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<string>} recipients recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enable4RecipientsUsingPUT(packageId: string, projectId: string, version: number, xGdcUserid: string, recipients: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListAssignmentArchiveVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).enable4RecipientsUsingPUT(packageId, projectId, version, xGdcUserid, recipients, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询资源包的分配情况
         * @param {string} packageId packageId
         * @param {string} projectId projectId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findRecipients4ResouceUsingGET(packageId: string, projectId: string, version: number, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListAssignmentArchiveVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).findRecipients4ResouceUsingGET(packageId, projectId, version, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据id查询归档资料包的详情
         * @param {string} packageId packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArchivePackageUsingGET(packageId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseArchivePackageVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).getArchivePackageUsingGET(packageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询项目下的所有归档资料包
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArchivePackagesByProjectIdUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListArchivePackageVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).getArchivePackagesByProjectIdUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询某个归档资料包指定的版本
         * @param {string} packageId packageId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArchiveVersionByPackageVersionUsingGET(packageId: string, version: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseArchiveVersionVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).getArchiveVersionByPackageVersionUsingGET(packageId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据id批量查询归档资料包的所有版本(V2)
         * @param {Array<string>} packageIds packageIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArchiveVersions4V2UsingPOST(packageIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListArchiveVersionVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).getArchiveVersions4V2UsingPOST(packageIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询某个归档资料包的所有版本(V2)
         * @param {string} packageId packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArchiveVersionsByPackageId4V2UsingGET(packageId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListArchiveVersionVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).getArchiveVersionsByPackageId4V2UsingGET(packageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询某个归档资料包的所有版本
         * @param {string} packageId packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArchiveVersionsByPackageIdUsingGET(packageId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListArchiveVersionVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).getArchiveVersionsByPackageIdUsingGET(packageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据id批量查询归档资料包的所有版本
         * @param {Array<string>} packageIds packageIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArchiveVersionsUsingPOST(packageIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListArchiveVersionVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).getArchiveVersionsUsingPOST(packageIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据用户角色获取当前用户在当前项目下存在哪些交付包
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignArchive4CurrentUserByRoleUsingGET(projectId: string, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListAssignmentArchiveResultVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).getAssignArchive4CurrentUserByRoleUsingGET(projectId, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取当前用户存在哪些交付包
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignArchive4CurrentUserUsingGET(xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListAssignmentArchiveResultVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).getAssignArchive4CurrentUserUsingGET(xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取当前用户在当前项目下存在哪些交付包
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignArchive4CurrentUserUsingGET1(projectId: string, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListAssignmentArchiveResultVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).getAssignArchive4CurrentUserUsingGET1(projectId, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 将草稿档资料包保存为提交状态资源包
         * @param {string} packageId packageId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchiveResources} resources resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveDraftArchivePackage2CommitStatusUsingPUT(packageId: string, version: number, xGdcUserid: string, resources: ArchiveResources, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseArchiveVersionVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).saveDraftArchivePackage2CommitStatusUsingPUT(packageId, version, xGdcUserid, resources, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新交付包/版本的说明
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchivePackageUpdation} archivePackageUpdation archivePackageUpdation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateArchivePackageUsingPUT(xGdcUserid: string, archivePackageUpdation: ArchivePackageUpdation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseArchivePackageVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).updateArchivePackageUsingPUT(xGdcUserid, archivePackageUpdation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 向草稿归档资料包中更新资源
         * @param {string} packageId packageId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchiveResources} resources resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateResourcesToDraftPackageUsingPUT(packageId: string, version: number, xGdcUserid: string, resources: ArchiveResources, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseArchiveVersionVO>> {
            const localVarAxiosArgs = await ArchiveApiAxiosParamCreator(configuration).updateResourcesToDraftPackageUsingPUT(packageId, version, xGdcUserid, resources, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ArchiveApi - factory interface
 * @export
 */
export const ArchiveApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 向草稿归档资料包中添加资源
         * @param {string} packageId packageId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchiveResources} resources resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addResourcesToDraftPackageUsingPOST(packageId: string, xGdcUserid: string, resources: ArchiveResources, options?: any): AxiosPromise<ResponseArchiveVersionVO> {
            return ArchiveApiFp(configuration).addResourcesToDraftPackageUsingPOST(packageId, xGdcUserid, resources, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 向归档资料包中添加资源V2
         * @param {string} packageId packageId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchiveResources} resources resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addResourcesToPackage4v2UsingPOST(packageId: string, xGdcUserid: string, resources: ArchiveResources, options?: any): AxiosPromise<ResponseArchiveVersionVO> {
            return ArchiveApiFp(configuration).addResourcesToPackage4v2UsingPOST(packageId, xGdcUserid, resources, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 向归档资料包中添加资源
         * @param {string} packageId packageId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<Resource>} resources resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addResourcesToPackageUsingPOST(packageId: string, xGdcUserid: string, resources: Array<Resource>, options?: any): AxiosPromise<ResponseArchiveVersionVO> {
            return ArchiveApiFp(configuration).addResourcesToPackageUsingPOST(packageId, xGdcUserid, resources, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分配资源包用户
         * @param {string} packageId packageId
         * @param {string} projectId projectId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<string>} recipients recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignArchive2RecipientsUsingPOST(packageId: string, projectId: string, version: number, xGdcUserid: string, recipients: Array<string>, options?: any): AxiosPromise<ResponseListAssignmentArchiveVO> {
            return ArchiveApiFp(configuration).assignArchive2RecipientsUsingPOST(packageId, projectId, version, xGdcUserid, recipients, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 检查用户是否已经在项目中
         * @param {string} projectId projectId
         * @param {string} recipient recipient
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkRecipientInProjectUsingGET(projectId: string, recipient: string, xGdcUserid: string, options?: any): AxiosPromise<Responseboolean> {
            return ArchiveApiFp(configuration).checkRecipientInProjectUsingGET(projectId, recipient, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建归档资料包
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchivePackageCreation} archivePackageCreation archivePackageCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArchivePackageUsingPOST(xGdcUserid: string, archivePackageCreation: ArchivePackageCreation, options?: any): AxiosPromise<ResponseArchivePackageVO> {
            return ArchiveApiFp(configuration).createArchivePackageUsingPOST(xGdcUserid, archivePackageCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 禁用资源包
         * @param {string} packageId packageId
         * @param {string} projectId projectId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<string>} recipients recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disable4RecipientsUsingPUT(packageId: string, projectId: string, version: number, xGdcUserid: string, recipients: Array<string>, options?: any): AxiosPromise<ResponseListAssignmentArchiveVO> {
            return ArchiveApiFp(configuration).disable4RecipientsUsingPUT(packageId, projectId, version, xGdcUserid, recipients, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除未分配的归档资料包
         * @param {string} packageId packageId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dropArchivePackage4VersionUsingDELETE(packageId: string, version: number, xGdcUserid: string, options?: any): AxiosPromise<ResponseArchiveVersionVO> {
            return ArchiveApiFp(configuration).dropArchivePackage4VersionUsingDELETE(packageId, version, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除未分配的归档资料包
         * @param {string} packageId packageId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dropArchivePackageUsingDELETE(packageId: string, xGdcUserid: string, options?: any): AxiosPromise<ResponseArchivePackageVO> {
            return ArchiveApiFp(configuration).dropArchivePackageUsingDELETE(packageId, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 启用已经禁用的资源包
         * @param {string} packageId packageId
         * @param {string} projectId projectId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<string>} recipients recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enable4RecipientsUsingPUT(packageId: string, projectId: string, version: number, xGdcUserid: string, recipients: Array<string>, options?: any): AxiosPromise<ResponseListAssignmentArchiveVO> {
            return ArchiveApiFp(configuration).enable4RecipientsUsingPUT(packageId, projectId, version, xGdcUserid, recipients, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询资源包的分配情况
         * @param {string} packageId packageId
         * @param {string} projectId projectId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findRecipients4ResouceUsingGET(packageId: string, projectId: string, version: number, xGdcUserid: string, options?: any): AxiosPromise<ResponseListAssignmentArchiveVO> {
            return ArchiveApiFp(configuration).findRecipients4ResouceUsingGET(packageId, projectId, version, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据id查询归档资料包的详情
         * @param {string} packageId packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchivePackageUsingGET(packageId: string, options?: any): AxiosPromise<ResponseArchivePackageVO> {
            return ArchiveApiFp(configuration).getArchivePackageUsingGET(packageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询项目下的所有归档资料包
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchivePackagesByProjectIdUsingGET(projectId: string, options?: any): AxiosPromise<ResponseListArchivePackageVO> {
            return ArchiveApiFp(configuration).getArchivePackagesByProjectIdUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询某个归档资料包指定的版本
         * @param {string} packageId packageId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchiveVersionByPackageVersionUsingGET(packageId: string, version: number, options?: any): AxiosPromise<ResponseArchiveVersionVO> {
            return ArchiveApiFp(configuration).getArchiveVersionByPackageVersionUsingGET(packageId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据id批量查询归档资料包的所有版本(V2)
         * @param {Array<string>} packageIds packageIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchiveVersions4V2UsingPOST(packageIds: Array<string>, options?: any): AxiosPromise<ResponseListArchiveVersionVO> {
            return ArchiveApiFp(configuration).getArchiveVersions4V2UsingPOST(packageIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询某个归档资料包的所有版本(V2)
         * @param {string} packageId packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchiveVersionsByPackageId4V2UsingGET(packageId: string, options?: any): AxiosPromise<ResponseListArchiveVersionVO> {
            return ArchiveApiFp(configuration).getArchiveVersionsByPackageId4V2UsingGET(packageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询某个归档资料包的所有版本
         * @param {string} packageId packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchiveVersionsByPackageIdUsingGET(packageId: string, options?: any): AxiosPromise<ResponseListArchiveVersionVO> {
            return ArchiveApiFp(configuration).getArchiveVersionsByPackageIdUsingGET(packageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据id批量查询归档资料包的所有版本
         * @param {Array<string>} packageIds packageIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchiveVersionsUsingPOST(packageIds: Array<string>, options?: any): AxiosPromise<ResponseListArchiveVersionVO> {
            return ArchiveApiFp(configuration).getArchiveVersionsUsingPOST(packageIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据用户角色获取当前用户在当前项目下存在哪些交付包
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignArchive4CurrentUserByRoleUsingGET(projectId: string, xGdcUserid: string, options?: any): AxiosPromise<ResponseListAssignmentArchiveResultVO> {
            return ArchiveApiFp(configuration).getAssignArchive4CurrentUserByRoleUsingGET(projectId, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取当前用户存在哪些交付包
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignArchive4CurrentUserUsingGET(xGdcUserid: string, options?: any): AxiosPromise<ResponseListAssignmentArchiveResultVO> {
            return ArchiveApiFp(configuration).getAssignArchive4CurrentUserUsingGET(xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取当前用户在当前项目下存在哪些交付包
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignArchive4CurrentUserUsingGET1(projectId: string, xGdcUserid: string, options?: any): AxiosPromise<ResponseListAssignmentArchiveResultVO> {
            return ArchiveApiFp(configuration).getAssignArchive4CurrentUserUsingGET1(projectId, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 将草稿档资料包保存为提交状态资源包
         * @param {string} packageId packageId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchiveResources} resources resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveDraftArchivePackage2CommitStatusUsingPUT(packageId: string, version: number, xGdcUserid: string, resources: ArchiveResources, options?: any): AxiosPromise<ResponseArchiveVersionVO> {
            return ArchiveApiFp(configuration).saveDraftArchivePackage2CommitStatusUsingPUT(packageId, version, xGdcUserid, resources, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新交付包/版本的说明
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchivePackageUpdation} archivePackageUpdation archivePackageUpdation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateArchivePackageUsingPUT(xGdcUserid: string, archivePackageUpdation: ArchivePackageUpdation, options?: any): AxiosPromise<ResponseArchivePackageVO> {
            return ArchiveApiFp(configuration).updateArchivePackageUsingPUT(xGdcUserid, archivePackageUpdation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 向草稿归档资料包中更新资源
         * @param {string} packageId packageId
         * @param {number} version version
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ArchiveResources} resources resources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourcesToDraftPackageUsingPUT(packageId: string, version: number, xGdcUserid: string, resources: ArchiveResources, options?: any): AxiosPromise<ResponseArchiveVersionVO> {
            return ArchiveApiFp(configuration).updateResourcesToDraftPackageUsingPUT(packageId, version, xGdcUserid, resources, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArchiveApi - object-oriented interface
 * @export
 * @class ArchiveApi
 * @extends {BaseAPI}
 */
export class ArchiveApi extends BaseAPI {
    /**
     * 
     * @summary 向草稿归档资料包中添加资源
     * @param {string} packageId packageId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {ArchiveResources} resources resources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public addResourcesToDraftPackageUsingPOST(packageId: string, xGdcUserid: string, resources: ArchiveResources, options?: any) {
        return ArchiveApiFp(this.configuration).addResourcesToDraftPackageUsingPOST(packageId, xGdcUserid, resources, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 向归档资料包中添加资源V2
     * @param {string} packageId packageId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {ArchiveResources} resources resources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public addResourcesToPackage4v2UsingPOST(packageId: string, xGdcUserid: string, resources: ArchiveResources, options?: any) {
        return ArchiveApiFp(this.configuration).addResourcesToPackage4v2UsingPOST(packageId, xGdcUserid, resources, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 向归档资料包中添加资源
     * @param {string} packageId packageId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {Array<Resource>} resources resources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public addResourcesToPackageUsingPOST(packageId: string, xGdcUserid: string, resources: Array<Resource>, options?: any) {
        return ArchiveApiFp(this.configuration).addResourcesToPackageUsingPOST(packageId, xGdcUserid, resources, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 分配资源包用户
     * @param {string} packageId packageId
     * @param {string} projectId projectId
     * @param {number} version version
     * @param {string} xGdcUserid x-gdc-userid
     * @param {Array<string>} recipients recipients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public assignArchive2RecipientsUsingPOST(packageId: string, projectId: string, version: number, xGdcUserid: string, recipients: Array<string>, options?: any) {
        return ArchiveApiFp(this.configuration).assignArchive2RecipientsUsingPOST(packageId, projectId, version, xGdcUserid, recipients, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 检查用户是否已经在项目中
     * @param {string} projectId projectId
     * @param {string} recipient recipient
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public checkRecipientInProjectUsingGET(projectId: string, recipient: string, xGdcUserid: string, options?: any) {
        return ArchiveApiFp(this.configuration).checkRecipientInProjectUsingGET(projectId, recipient, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建归档资料包
     * @param {string} xGdcUserid x-gdc-userid
     * @param {ArchivePackageCreation} archivePackageCreation archivePackageCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public createArchivePackageUsingPOST(xGdcUserid: string, archivePackageCreation: ArchivePackageCreation, options?: any) {
        return ArchiveApiFp(this.configuration).createArchivePackageUsingPOST(xGdcUserid, archivePackageCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 禁用资源包
     * @param {string} packageId packageId
     * @param {string} projectId projectId
     * @param {number} version version
     * @param {string} xGdcUserid x-gdc-userid
     * @param {Array<string>} recipients recipients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public disable4RecipientsUsingPUT(packageId: string, projectId: string, version: number, xGdcUserid: string, recipients: Array<string>, options?: any) {
        return ArchiveApiFp(this.configuration).disable4RecipientsUsingPUT(packageId, projectId, version, xGdcUserid, recipients, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除未分配的归档资料包
     * @param {string} packageId packageId
     * @param {number} version version
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public dropArchivePackage4VersionUsingDELETE(packageId: string, version: number, xGdcUserid: string, options?: any) {
        return ArchiveApiFp(this.configuration).dropArchivePackage4VersionUsingDELETE(packageId, version, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除未分配的归档资料包
     * @param {string} packageId packageId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public dropArchivePackageUsingDELETE(packageId: string, xGdcUserid: string, options?: any) {
        return ArchiveApiFp(this.configuration).dropArchivePackageUsingDELETE(packageId, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 启用已经禁用的资源包
     * @param {string} packageId packageId
     * @param {string} projectId projectId
     * @param {number} version version
     * @param {string} xGdcUserid x-gdc-userid
     * @param {Array<string>} recipients recipients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public enable4RecipientsUsingPUT(packageId: string, projectId: string, version: number, xGdcUserid: string, recipients: Array<string>, options?: any) {
        return ArchiveApiFp(this.configuration).enable4RecipientsUsingPUT(packageId, projectId, version, xGdcUserid, recipients, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询资源包的分配情况
     * @param {string} packageId packageId
     * @param {string} projectId projectId
     * @param {number} version version
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public findRecipients4ResouceUsingGET(packageId: string, projectId: string, version: number, xGdcUserid: string, options?: any) {
        return ArchiveApiFp(this.configuration).findRecipients4ResouceUsingGET(packageId, projectId, version, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据id查询归档资料包的详情
     * @param {string} packageId packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public getArchivePackageUsingGET(packageId: string, options?: any) {
        return ArchiveApiFp(this.configuration).getArchivePackageUsingGET(packageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询项目下的所有归档资料包
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public getArchivePackagesByProjectIdUsingGET(projectId: string, options?: any) {
        return ArchiveApiFp(this.configuration).getArchivePackagesByProjectIdUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询某个归档资料包指定的版本
     * @param {string} packageId packageId
     * @param {number} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public getArchiveVersionByPackageVersionUsingGET(packageId: string, version: number, options?: any) {
        return ArchiveApiFp(this.configuration).getArchiveVersionByPackageVersionUsingGET(packageId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据id批量查询归档资料包的所有版本(V2)
     * @param {Array<string>} packageIds packageIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public getArchiveVersions4V2UsingPOST(packageIds: Array<string>, options?: any) {
        return ArchiveApiFp(this.configuration).getArchiveVersions4V2UsingPOST(packageIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询某个归档资料包的所有版本(V2)
     * @param {string} packageId packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public getArchiveVersionsByPackageId4V2UsingGET(packageId: string, options?: any) {
        return ArchiveApiFp(this.configuration).getArchiveVersionsByPackageId4V2UsingGET(packageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询某个归档资料包的所有版本
     * @param {string} packageId packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public getArchiveVersionsByPackageIdUsingGET(packageId: string, options?: any) {
        return ArchiveApiFp(this.configuration).getArchiveVersionsByPackageIdUsingGET(packageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据id批量查询归档资料包的所有版本
     * @param {Array<string>} packageIds packageIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public getArchiveVersionsUsingPOST(packageIds: Array<string>, options?: any) {
        return ArchiveApiFp(this.configuration).getArchiveVersionsUsingPOST(packageIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据用户角色获取当前用户在当前项目下存在哪些交付包
     * @param {string} projectId projectId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public getAssignArchive4CurrentUserByRoleUsingGET(projectId: string, xGdcUserid: string, options?: any) {
        return ArchiveApiFp(this.configuration).getAssignArchive4CurrentUserByRoleUsingGET(projectId, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取当前用户存在哪些交付包
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public getAssignArchive4CurrentUserUsingGET(xGdcUserid: string, options?: any) {
        return ArchiveApiFp(this.configuration).getAssignArchive4CurrentUserUsingGET(xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取当前用户在当前项目下存在哪些交付包
     * @param {string} projectId projectId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public getAssignArchive4CurrentUserUsingGET1(projectId: string, xGdcUserid: string, options?: any) {
        return ArchiveApiFp(this.configuration).getAssignArchive4CurrentUserUsingGET1(projectId, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 将草稿档资料包保存为提交状态资源包
     * @param {string} packageId packageId
     * @param {number} version version
     * @param {string} xGdcUserid x-gdc-userid
     * @param {ArchiveResources} resources resources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public saveDraftArchivePackage2CommitStatusUsingPUT(packageId: string, version: number, xGdcUserid: string, resources: ArchiveResources, options?: any) {
        return ArchiveApiFp(this.configuration).saveDraftArchivePackage2CommitStatusUsingPUT(packageId, version, xGdcUserid, resources, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新交付包/版本的说明
     * @param {string} xGdcUserid x-gdc-userid
     * @param {ArchivePackageUpdation} archivePackageUpdation archivePackageUpdation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public updateArchivePackageUsingPUT(xGdcUserid: string, archivePackageUpdation: ArchivePackageUpdation, options?: any) {
        return ArchiveApiFp(this.configuration).updateArchivePackageUsingPUT(xGdcUserid, archivePackageUpdation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 向草稿归档资料包中更新资源
     * @param {string} packageId packageId
     * @param {number} version version
     * @param {string} xGdcUserid x-gdc-userid
     * @param {ArchiveResources} resources resources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveApi
     */
    public updateResourcesToDraftPackageUsingPUT(packageId: string, version: number, xGdcUserid: string, resources: ArchiveResources, options?: any) {
        return ArchiveApiFp(this.configuration).updateResourcesToDraftPackageUsingPUT(packageId, version, xGdcUserid, resources, options).then((request) => request(this.axios, this.basePath));
    }

}

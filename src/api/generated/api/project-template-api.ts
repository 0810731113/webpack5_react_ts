// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProjectTemplateCreation } from '../model';
// @ts-ignore
import { ResponseListProjectTemplate } from '../model';
// @ts-ignore
import { ResponseProjectTemplate } from '../model';
// @ts-ignore
import { Responseboolean } from '../model';
/**
 * ProjectTemplateApi - axios parameter creator
 * @export
 */
export const ProjectTemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建项目初始化模板
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ProjectTemplateCreation} templateCreation templateCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectTemplateUsingPOST: async (xGdcUserid: string, templateCreation: ProjectTemplateCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling createProjectTemplateUsingPOST.');
            }
            // verify required parameter 'templateCreation' is not null or undefined
            if (templateCreation === null || templateCreation === undefined) {
                throw new RequiredError('templateCreation','Required parameter templateCreation was null or undefined when calling createProjectTemplateUsingPOST.');
            }
            const localVarPath = `/project_templates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof templateCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(templateCreation !== undefined ? templateCreation : {}) : (templateCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除项目初始化列表
         * @param {string} templateId templateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectTemplatesUsingDELETE: async (templateId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            if (templateId === null || templateId === undefined) {
                throw new RequiredError('templateId','Required parameter templateId was null or undefined when calling deleteProjectTemplatesUsingDELETE.');
            }
            const localVarPath = `/project_templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获得用户的初始化模板列表
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectTemplatesUsingGET: async (xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling getProjectTemplatesUsingGET.');
            }
            const localVarPath = `/project_templates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectTemplateApi - functional programming interface
 * @export
 */
export const ProjectTemplateApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建项目初始化模板
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ProjectTemplateCreation} templateCreation templateCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectTemplateUsingPOST(xGdcUserid: string, templateCreation: ProjectTemplateCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProjectTemplate>> {
            const localVarAxiosArgs = await ProjectTemplateApiAxiosParamCreator(configuration).createProjectTemplateUsingPOST(xGdcUserid, templateCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除项目初始化列表
         * @param {string} templateId templateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectTemplatesUsingDELETE(templateId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseboolean>> {
            const localVarAxiosArgs = await ProjectTemplateApiAxiosParamCreator(configuration).deleteProjectTemplatesUsingDELETE(templateId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获得用户的初始化模板列表
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectTemplatesUsingGET(xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListProjectTemplate>> {
            const localVarAxiosArgs = await ProjectTemplateApiAxiosParamCreator(configuration).getProjectTemplatesUsingGET(xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProjectTemplateApi - factory interface
 * @export
 */
export const ProjectTemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 创建项目初始化模板
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ProjectTemplateCreation} templateCreation templateCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectTemplateUsingPOST(xGdcUserid: string, templateCreation: ProjectTemplateCreation, options?: any): AxiosPromise<ResponseProjectTemplate> {
            return ProjectTemplateApiFp(configuration).createProjectTemplateUsingPOST(xGdcUserid, templateCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除项目初始化列表
         * @param {string} templateId templateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectTemplatesUsingDELETE(templateId: string, options?: any): AxiosPromise<Responseboolean> {
            return ProjectTemplateApiFp(configuration).deleteProjectTemplatesUsingDELETE(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获得用户的初始化模板列表
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectTemplatesUsingGET(xGdcUserid: string, options?: any): AxiosPromise<ResponseListProjectTemplate> {
            return ProjectTemplateApiFp(configuration).getProjectTemplatesUsingGET(xGdcUserid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectTemplateApi - object-oriented interface
 * @export
 * @class ProjectTemplateApi
 * @extends {BaseAPI}
 */
export class ProjectTemplateApi extends BaseAPI {
    /**
     * 
     * @summary 创建项目初始化模板
     * @param {string} xGdcUserid x-gdc-userid
     * @param {ProjectTemplateCreation} templateCreation templateCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTemplateApi
     */
    public createProjectTemplateUsingPOST(xGdcUserid: string, templateCreation: ProjectTemplateCreation, options?: any) {
        return ProjectTemplateApiFp(this.configuration).createProjectTemplateUsingPOST(xGdcUserid, templateCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除项目初始化列表
     * @param {string} templateId templateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTemplateApi
     */
    public deleteProjectTemplatesUsingDELETE(templateId: string, options?: any) {
        return ProjectTemplateApiFp(this.configuration).deleteProjectTemplatesUsingDELETE(templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获得用户的初始化模板列表
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTemplateApi
     */
    public getProjectTemplatesUsingGET(xGdcUserid: string, options?: any) {
        return ProjectTemplateApiFp(this.configuration).getProjectTemplatesUsingGET(xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

}

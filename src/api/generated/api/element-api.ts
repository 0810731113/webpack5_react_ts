// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Element } from '../model';
// @ts-ignore
import { ElementFilterCondition } from '../model';
// @ts-ignore
import { ElementQuery } from '../model';
// @ts-ignore
import { GetFilteredElements } from '../model';
// @ts-ignore
import { GetFilteredIncrementElements } from '../model';
// @ts-ignore
import { ResponseCollectionElement } from '../model';
// @ts-ignore
import { ResponseCollectionElementStatusVO } from '../model';
// @ts-ignore
import { ResponseCollectionElementVO } from '../model';
// @ts-ignore
import { Responseint } from '../model';
// @ts-ignore
import { Responseobject } from '../model';
// @ts-ignore
import { Responsestring } from '../model';
// @ts-ignore
import { UploadElementDto } from '../model';
/**
 * ElementApi - axios parameter creator
 * @export
 */
export const ElementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 接收压缩后的数据
         * @param {string} uploadId 上传id
         * @param {number} [failIndex] failIndex
         * @param {number} [index] 当前数据片的编号，编号大于等于0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cacheCompressElementDataUsingPOST: async (uploadId: string, failIndex?: number, index?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadId' is not null or undefined
            if (uploadId === null || uploadId === undefined) {
                throw new RequiredError('uploadId','Required parameter uploadId was null or undefined when calling cacheCompressElementDataUsingPOST.');
            }
            const localVarPath = `/elements/compress/upload`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (failIndex !== undefined) {
                localVarQueryParameter['failIndex'] = failIndex;
            }

            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }

            if (uploadId !== undefined) {
                localVarQueryParameter['uploadId'] = uploadId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 接收上传的数据
         * @param {UploadElementDto} dto dto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cacheElementDataUsingPOST: async (dto: UploadElementDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dto' is not null or undefined
            if (dto === null || dto === undefined) {
                throw new RequiredError('dto','Required parameter dto was null or undefined when calling cacheElementDataUsingPOST.');
            }
            const localVarPath = `/elements/upload`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dto !== undefined ? dto : {}) : (dto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取指定工作单元的构件数据，具备过滤指定属性值，过滤构件等的功能
         * @param {ElementFilterCondition} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetElements4GzipUsingPOST: async (condition: ElementFilterCondition, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'condition' is not null or undefined
            if (condition === null || condition === undefined) {
                throw new RequiredError('condition','Required parameter condition was null or undefined when calling getDataSetElements4GzipUsingPOST.');
            }
            const localVarPath = `/elements/condition/filter`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof condition !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(condition !== undefined ? condition : {}) : (condition || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getDataSetElementsByMvd
         * @param {number} versionId versionId
         * @param {string} [mvd] mvd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetElementsByMvdUsingGET: async (versionId: number, mvd?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'versionId' is not null or undefined
            if (versionId === null || versionId === undefined) {
                throw new RequiredError('versionId','Required parameter versionId was null or undefined when calling getDataSetElementsByMvdUsingGET.');
            }
            const localVarPath = `/v2/elements/byversionidandmvd`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mvd !== undefined) {
                localVarQueryParameter['mvd'] = mvd;
            }

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 按mvd获取elements
         * @param {string} dsId dsId
         * @param {number} version version
         * @param {string} [mvd] mvd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetElementsByMvdUsingGET1: async (dsId: string, version: number, mvd?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling getDataSetElementsByMvdUsingGET1.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getDataSetElementsByMvdUsingGET1.');
            }
            const localVarPath = `/v2/elements`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dsId !== undefined) {
                localVarQueryParameter['dsId'] = dsId;
            }

            if (mvd !== undefined) {
                localVarQueryParameter['mvd'] = mvd;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getDataSetElements
         * @param {number} versionId versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetElementsUsingGET: async (versionId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'versionId' is not null or undefined
            if (versionId === null || versionId === undefined) {
                throw new RequiredError('versionId','Required parameter versionId was null or undefined when calling getDataSetElementsUsingGET.');
            }
            const localVarPath = `/elements/byversionid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getDataSetElements
         * @param {string} [dsId] 数据集Id
         * @param {number} [version] 版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetElementsUsingGET1: async (dsId?: string, version?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/elements`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dsId !== undefined) {
                localVarQueryParameter['dsId'] = dsId;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getFilteredDataSetElementIds
         * @param {GetFilteredElements} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredDataSetElementIdsUsingPOST: async (args: GetFilteredElements, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'args' is not null or undefined
            if (args === null || args === undefined) {
                throw new RequiredError('args','Required parameter args was null or undefined when calling getFilteredDataSetElementIdsUsingPOST.');
            }
            const localVarPath = `/elements/filter/ids`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof args !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(args !== undefined ? args : {}) : (args || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getFilteredDataSetElementsByMvd
         * @param {GetFilteredElements} args args
         * @param {string} [mvd] mvd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredDataSetElementsByMvdUsingPOST: async (args: GetFilteredElements, mvd?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'args' is not null or undefined
            if (args === null || args === undefined) {
                throw new RequiredError('args','Required parameter args was null or undefined when calling getFilteredDataSetElementsByMvdUsingPOST.');
            }
            const localVarPath = `/v2/elements/filter`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mvd !== undefined) {
                localVarQueryParameter['mvd'] = mvd;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof args !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(args !== undefined ? args : {}) : (args || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getFilteredDataSetElements
         * @param {GetFilteredElements} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredDataSetElementsUsingPOST: async (args: GetFilteredElements, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'args' is not null or undefined
            if (args === null || args === undefined) {
                throw new RequiredError('args','Required parameter args was null or undefined when calling getFilteredDataSetElementsUsingPOST.');
            }
            const localVarPath = `/elements/filter`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof args !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(args !== undefined ? args : {}) : (args || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 按mvd方式获取增量构件
         * @param {GetFilteredIncrementElements} args args
         * @param {string} [mvd] mvd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredIncrementElementsByMvdUsingPOST: async (args: GetFilteredIncrementElements, mvd?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'args' is not null or undefined
            if (args === null || args === undefined) {
                throw new RequiredError('args','Required parameter args was null or undefined when calling getFilteredIncrementElementsByMvdUsingPOST.');
            }
            const localVarPath = `/v2/elements/increment/filter`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mvd !== undefined) {
                localVarQueryParameter['mvd'] = mvd;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof args !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(args !== undefined ? args : {}) : (args || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getFilteredIncrementElements
         * @param {GetFilteredIncrementElements} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredIncrementElementsUsingPOST: async (args: GetFilteredIncrementElements, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'args' is not null or undefined
            if (args === null || args === undefined) {
                throw new RequiredError('args','Required parameter args was null or undefined when calling getFilteredIncrementElementsUsingPOST.');
            }
            const localVarPath = `/elements/increment/filter`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof args !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(args !== undefined ? args : {}) : (args || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据版本获取相比最新版本的增量数据的状态
         * @param {string} datasetId 数据集Id
         * @param {number} version 客户端数据版本号
         * @param {number} [endVersion] 带比较的版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncrementElementStatusUsingGET: async (datasetId: string, version: number, endVersion?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling getIncrementElementStatusUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getIncrementElementStatusUsingGET.');
            }
            const localVarPath = `/elements/increment/status`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (datasetId !== undefined) {
                localVarQueryParameter['datasetId'] = datasetId;
            }

            if (endVersion !== undefined) {
                localVarQueryParameter['endVersion'] = endVersion;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据版本获取相比最新版本的增量数据
         * @param {string} datasetId 数据集Id
         * @param {number} version 客户端数据版本号
         * @param {number} [endVersion] 带比较的版本号
         * @param {string} [mvd] mvd字符串
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncrementElementsByMvdUsingGET: async (datasetId: string, version: number, endVersion?: number, mvd?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling getIncrementElementsByMvdUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getIncrementElementsByMvdUsingGET.');
            }
            const localVarPath = `/v2/elements/increment`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (datasetId !== undefined) {
                localVarQueryParameter['datasetId'] = datasetId;
            }

            if (endVersion !== undefined) {
                localVarQueryParameter['endVersion'] = endVersion;
            }

            if (mvd !== undefined) {
                localVarQueryParameter['mvd'] = mvd;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据版本获取相比最新版本的增量数据
         * @param {string} datasetId 数据集Id
         * @param {number} version 客户端数据版本号
         * @param {number} [endVersion] 带比较的版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncrementElementsUsingGET: async (datasetId: string, version: number, endVersion?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling getIncrementElementsUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getIncrementElementsUsingGET.');
            }
            const localVarPath = `/elements/increment`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (datasetId !== undefined) {
                localVarQueryParameter['datasetId'] = datasetId;
            }

            if (endVersion !== undefined) {
                localVarQueryParameter['endVersion'] = endVersion;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary insertElements
         * @param {number} newModelVersion newModelVersion
         * @param {Array<Element>} elements elements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertElementsUsingPUT: async (newModelVersion: number, elements: Array<Element>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'newModelVersion' is not null or undefined
            if (newModelVersion === null || newModelVersion === undefined) {
                throw new RequiredError('newModelVersion','Required parameter newModelVersion was null or undefined when calling insertElementsUsingPUT.');
            }
            // verify required parameter 'elements' is not null or undefined
            if (elements === null || elements === undefined) {
                throw new RequiredError('elements','Required parameter elements was null or undefined when calling insertElementsUsingPUT.');
            }
            const localVarPath = `/elements`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (newModelVersion !== undefined) {
                localVarQueryParameter['newModelVersion'] = newModelVersion;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof elements !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(elements !== undefined ? elements : {}) : (elements || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary queryElements
         * @param {string} datasetId datasetId
         * @param {ElementQuery} elementQuery elementQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryElementsUsingPOST: async (datasetId: string, elementQuery: ElementQuery, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling queryElementsUsingPOST.');
            }
            // verify required parameter 'elementQuery' is not null or undefined
            if (elementQuery === null || elementQuery === undefined) {
                throw new RequiredError('elementQuery','Required parameter elementQuery was null or undefined when calling queryElementsUsingPOST.');
            }
            const localVarPath = `/datasets/{datasetId}/elements/query`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof elementQuery !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(elementQuery !== undefined ? elementQuery : {}) : (elementQuery || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary testIdea
         * @param {number} begin begin
         * @param {number} size size
         * @param {string} table table
         * @param {string} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testIdeaUsingGET: async (begin: number, size: number, table: string, type: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'begin' is not null or undefined
            if (begin === null || begin === undefined) {
                throw new RequiredError('begin','Required parameter begin was null or undefined when calling testIdeaUsingGET.');
            }
            // verify required parameter 'size' is not null or undefined
            if (size === null || size === undefined) {
                throw new RequiredError('size','Required parameter size was null or undefined when calling testIdeaUsingGET.');
            }
            // verify required parameter 'table' is not null or undefined
            if (table === null || table === undefined) {
                throw new RequiredError('table','Required parameter table was null or undefined when calling testIdeaUsingGET.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling testIdeaUsingGET.');
            }
            const localVarPath = `/idea`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (begin !== undefined) {
                localVarQueryParameter['begin'] = begin;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (table !== undefined) {
                localVarQueryParameter['table'] = table;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary testVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testVersionUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/elements/testversion`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateDataset
         * @param {string} dsId dsId
         * @param {boolean} [forceUpdate] forceUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDatasetUsingGET: async (dsId: string, forceUpdate?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling updateDatasetUsingGET.');
            }
            const localVarPath = `/elements/update/{dsId}/bydatasetId`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (forceUpdate !== undefined) {
                localVarQueryParameter['forceUpdate'] = forceUpdate;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateDatasets
         * @param {Array<string>} dsIds dsIds
         * @param {boolean} [forceUpdate] forceUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDatasetsUsingPOST: async (dsIds: Array<string>, forceUpdate?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsIds' is not null or undefined
            if (dsIds === null || dsIds === undefined) {
                throw new RequiredError('dsIds','Required parameter dsIds was null or undefined when calling updateDatasetsUsingPOST.');
            }
            const localVarPath = `/elements/update/bydatasetId`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (forceUpdate !== undefined) {
                localVarQueryParameter['forceUpdate'] = forceUpdate;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dsIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dsIds !== undefined ? dsIds : {}) : (dsIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ElementApi - functional programming interface
 * @export
 */
export const ElementApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 接收压缩后的数据
         * @param {string} uploadId 上传id
         * @param {number} [failIndex] failIndex
         * @param {number} [index] 当前数据片的编号，编号大于等于0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cacheCompressElementDataUsingPOST(uploadId: string, failIndex?: number, index?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).cacheCompressElementDataUsingPOST(uploadId, failIndex, index, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 接收上传的数据
         * @param {UploadElementDto} dto dto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cacheElementDataUsingPOST(dto: UploadElementDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responsestring>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).cacheElementDataUsingPOST(dto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取指定工作单元的构件数据，具备过滤指定属性值，过滤构件等的功能
         * @param {ElementFilterCondition} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetElements4GzipUsingPOST(condition: ElementFilterCondition, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).getDataSetElements4GzipUsingPOST(condition, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getDataSetElementsByMvd
         * @param {number} versionId versionId
         * @param {string} [mvd] mvd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetElementsByMvdUsingGET(versionId: number, mvd?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).getDataSetElementsByMvdUsingGET(versionId, mvd, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 按mvd获取elements
         * @param {string} dsId dsId
         * @param {number} version version
         * @param {string} [mvd] mvd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetElementsByMvdUsingGET1(dsId: string, version: number, mvd?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).getDataSetElementsByMvdUsingGET1(dsId, version, mvd, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getDataSetElements
         * @param {number} versionId versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetElementsUsingGET(versionId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Element>>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).getDataSetElementsUsingGET(versionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getDataSetElements
         * @param {string} [dsId] 数据集Id
         * @param {number} [version] 版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetElementsUsingGET1(dsId?: string, version?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).getDataSetElementsUsingGET1(dsId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getFilteredDataSetElementIds
         * @param {GetFilteredElements} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilteredDataSetElementIdsUsingPOST(args: GetFilteredElements, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).getFilteredDataSetElementIdsUsingPOST(args, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getFilteredDataSetElementsByMvd
         * @param {GetFilteredElements} args args
         * @param {string} [mvd] mvd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilteredDataSetElementsByMvdUsingPOST(args: GetFilteredElements, mvd?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).getFilteredDataSetElementsByMvdUsingPOST(args, mvd, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getFilteredDataSetElements
         * @param {GetFilteredElements} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilteredDataSetElementsUsingPOST(args: GetFilteredElements, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).getFilteredDataSetElementsUsingPOST(args, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 按mvd方式获取增量构件
         * @param {GetFilteredIncrementElements} args args
         * @param {string} [mvd] mvd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilteredIncrementElementsByMvdUsingPOST(args: GetFilteredIncrementElements, mvd?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCollectionElementVO>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).getFilteredIncrementElementsByMvdUsingPOST(args, mvd, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getFilteredIncrementElements
         * @param {GetFilteredIncrementElements} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilteredIncrementElementsUsingPOST(args: GetFilteredIncrementElements, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCollectionElement>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).getFilteredIncrementElementsUsingPOST(args, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据版本获取相比最新版本的增量数据的状态
         * @param {string} datasetId 数据集Id
         * @param {number} version 客户端数据版本号
         * @param {number} [endVersion] 带比较的版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIncrementElementStatusUsingGET(datasetId: string, version: number, endVersion?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCollectionElementStatusVO>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).getIncrementElementStatusUsingGET(datasetId, version, endVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据版本获取相比最新版本的增量数据
         * @param {string} datasetId 数据集Id
         * @param {number} version 客户端数据版本号
         * @param {number} [endVersion] 带比较的版本号
         * @param {string} [mvd] mvd字符串
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIncrementElementsByMvdUsingGET(datasetId: string, version: number, endVersion?: number, mvd?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCollectionElement>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).getIncrementElementsByMvdUsingGET(datasetId, version, endVersion, mvd, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据版本获取相比最新版本的增量数据
         * @param {string} datasetId 数据集Id
         * @param {number} version 客户端数据版本号
         * @param {number} [endVersion] 带比较的版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIncrementElementsUsingGET(datasetId: string, version: number, endVersion?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCollectionElement>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).getIncrementElementsUsingGET(datasetId, version, endVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary insertElements
         * @param {number} newModelVersion newModelVersion
         * @param {Array<Element>} elements elements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertElementsUsingPUT(newModelVersion: number, elements: Array<Element>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).insertElementsUsingPUT(newModelVersion, elements, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary queryElements
         * @param {string} datasetId datasetId
         * @param {ElementQuery} elementQuery elementQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryElementsUsingPOST(datasetId: string, elementQuery: ElementQuery, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responsestring>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).queryElementsUsingPOST(datasetId, elementQuery, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary testIdea
         * @param {number} begin begin
         * @param {number} size size
         * @param {string} table table
         * @param {string} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testIdeaUsingGET(begin: number, size: number, table: string, type: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).testIdeaUsingGET(begin, size, table, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary testVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testVersionUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).testVersionUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateDataset
         * @param {string} dsId dsId
         * @param {boolean} [forceUpdate] forceUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDatasetUsingGET(dsId: string, forceUpdate?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseobject>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).updateDatasetUsingGET(dsId, forceUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateDatasets
         * @param {Array<string>} dsIds dsIds
         * @param {boolean} [forceUpdate] forceUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDatasetsUsingPOST(dsIds: Array<string>, forceUpdate?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseobject>> {
            const localVarAxiosArgs = await ElementApiAxiosParamCreator(configuration).updateDatasetsUsingPOST(dsIds, forceUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ElementApi - factory interface
 * @export
 */
export const ElementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 接收压缩后的数据
         * @param {string} uploadId 上传id
         * @param {number} [failIndex] failIndex
         * @param {number} [index] 当前数据片的编号，编号大于等于0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cacheCompressElementDataUsingPOST(uploadId: string, failIndex?: number, index?: number, options?: any): AxiosPromise<Responseint> {
            return ElementApiFp(configuration).cacheCompressElementDataUsingPOST(uploadId, failIndex, index, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 接收上传的数据
         * @param {UploadElementDto} dto dto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cacheElementDataUsingPOST(dto: UploadElementDto, options?: any): AxiosPromise<Responsestring> {
            return ElementApiFp(configuration).cacheElementDataUsingPOST(dto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取指定工作单元的构件数据，具备过滤指定属性值，过滤构件等的功能
         * @param {ElementFilterCondition} condition condition
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetElements4GzipUsingPOST(condition: ElementFilterCondition, options?: any): AxiosPromise<void> {
            return ElementApiFp(configuration).getDataSetElements4GzipUsingPOST(condition, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getDataSetElementsByMvd
         * @param {number} versionId versionId
         * @param {string} [mvd] mvd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetElementsByMvdUsingGET(versionId: number, mvd?: string, options?: any): AxiosPromise<void> {
            return ElementApiFp(configuration).getDataSetElementsByMvdUsingGET(versionId, mvd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 按mvd获取elements
         * @param {string} dsId dsId
         * @param {number} version version
         * @param {string} [mvd] mvd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetElementsByMvdUsingGET1(dsId: string, version: number, mvd?: string, options?: any): AxiosPromise<void> {
            return ElementApiFp(configuration).getDataSetElementsByMvdUsingGET1(dsId, version, mvd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getDataSetElements
         * @param {number} versionId versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetElementsUsingGET(versionId: number, options?: any): AxiosPromise<Array<Element>> {
            return ElementApiFp(configuration).getDataSetElementsUsingGET(versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getDataSetElements
         * @param {string} [dsId] 数据集Id
         * @param {number} [version] 版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetElementsUsingGET1(dsId?: string, version?: number, options?: any): AxiosPromise<void> {
            return ElementApiFp(configuration).getDataSetElementsUsingGET1(dsId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getFilteredDataSetElementIds
         * @param {GetFilteredElements} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredDataSetElementIdsUsingPOST(args: GetFilteredElements, options?: any): AxiosPromise<Array<string>> {
            return ElementApiFp(configuration).getFilteredDataSetElementIdsUsingPOST(args, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getFilteredDataSetElementsByMvd
         * @param {GetFilteredElements} args args
         * @param {string} [mvd] mvd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredDataSetElementsByMvdUsingPOST(args: GetFilteredElements, mvd?: string, options?: any): AxiosPromise<void> {
            return ElementApiFp(configuration).getFilteredDataSetElementsByMvdUsingPOST(args, mvd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getFilteredDataSetElements
         * @param {GetFilteredElements} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredDataSetElementsUsingPOST(args: GetFilteredElements, options?: any): AxiosPromise<void> {
            return ElementApiFp(configuration).getFilteredDataSetElementsUsingPOST(args, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 按mvd方式获取增量构件
         * @param {GetFilteredIncrementElements} args args
         * @param {string} [mvd] mvd
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredIncrementElementsByMvdUsingPOST(args: GetFilteredIncrementElements, mvd?: string, options?: any): AxiosPromise<ResponseCollectionElementVO> {
            return ElementApiFp(configuration).getFilteredIncrementElementsByMvdUsingPOST(args, mvd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getFilteredIncrementElements
         * @param {GetFilteredIncrementElements} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilteredIncrementElementsUsingPOST(args: GetFilteredIncrementElements, options?: any): AxiosPromise<ResponseCollectionElement> {
            return ElementApiFp(configuration).getFilteredIncrementElementsUsingPOST(args, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据版本获取相比最新版本的增量数据的状态
         * @param {string} datasetId 数据集Id
         * @param {number} version 客户端数据版本号
         * @param {number} [endVersion] 带比较的版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncrementElementStatusUsingGET(datasetId: string, version: number, endVersion?: number, options?: any): AxiosPromise<ResponseCollectionElementStatusVO> {
            return ElementApiFp(configuration).getIncrementElementStatusUsingGET(datasetId, version, endVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据版本获取相比最新版本的增量数据
         * @param {string} datasetId 数据集Id
         * @param {number} version 客户端数据版本号
         * @param {number} [endVersion] 带比较的版本号
         * @param {string} [mvd] mvd字符串
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncrementElementsByMvdUsingGET(datasetId: string, version: number, endVersion?: number, mvd?: string, options?: any): AxiosPromise<ResponseCollectionElement> {
            return ElementApiFp(configuration).getIncrementElementsByMvdUsingGET(datasetId, version, endVersion, mvd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据版本获取相比最新版本的增量数据
         * @param {string} datasetId 数据集Id
         * @param {number} version 客户端数据版本号
         * @param {number} [endVersion] 带比较的版本号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncrementElementsUsingGET(datasetId: string, version: number, endVersion?: number, options?: any): AxiosPromise<ResponseCollectionElement> {
            return ElementApiFp(configuration).getIncrementElementsUsingGET(datasetId, version, endVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary insertElements
         * @param {number} newModelVersion newModelVersion
         * @param {Array<Element>} elements elements
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertElementsUsingPUT(newModelVersion: number, elements: Array<Element>, options?: any): AxiosPromise<boolean> {
            return ElementApiFp(configuration).insertElementsUsingPUT(newModelVersion, elements, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary queryElements
         * @param {string} datasetId datasetId
         * @param {ElementQuery} elementQuery elementQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryElementsUsingPOST(datasetId: string, elementQuery: ElementQuery, options?: any): AxiosPromise<Responsestring> {
            return ElementApiFp(configuration).queryElementsUsingPOST(datasetId, elementQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary testIdea
         * @param {number} begin begin
         * @param {number} size size
         * @param {string} table table
         * @param {string} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testIdeaUsingGET(begin: number, size: number, table: string, type: string, options?: any): AxiosPromise<string> {
            return ElementApiFp(configuration).testIdeaUsingGET(begin, size, table, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary testVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testVersionUsingGET(options?: any): AxiosPromise<void> {
            return ElementApiFp(configuration).testVersionUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateDataset
         * @param {string} dsId dsId
         * @param {boolean} [forceUpdate] forceUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDatasetUsingGET(dsId: string, forceUpdate?: boolean, options?: any): AxiosPromise<Responseobject> {
            return ElementApiFp(configuration).updateDatasetUsingGET(dsId, forceUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateDatasets
         * @param {Array<string>} dsIds dsIds
         * @param {boolean} [forceUpdate] forceUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDatasetsUsingPOST(dsIds: Array<string>, forceUpdate?: boolean, options?: any): AxiosPromise<Responseobject> {
            return ElementApiFp(configuration).updateDatasetsUsingPOST(dsIds, forceUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ElementApi - object-oriented interface
 * @export
 * @class ElementApi
 * @extends {BaseAPI}
 */
export class ElementApi extends BaseAPI {
    /**
     * 
     * @summary 接收压缩后的数据
     * @param {string} uploadId 上传id
     * @param {number} [failIndex] failIndex
     * @param {number} [index] 当前数据片的编号，编号大于等于0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public cacheCompressElementDataUsingPOST(uploadId: string, failIndex?: number, index?: number, options?: any) {
        return ElementApiFp(this.configuration).cacheCompressElementDataUsingPOST(uploadId, failIndex, index, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 接收上传的数据
     * @param {UploadElementDto} dto dto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public cacheElementDataUsingPOST(dto: UploadElementDto, options?: any) {
        return ElementApiFp(this.configuration).cacheElementDataUsingPOST(dto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取指定工作单元的构件数据，具备过滤指定属性值，过滤构件等的功能
     * @param {ElementFilterCondition} condition condition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public getDataSetElements4GzipUsingPOST(condition: ElementFilterCondition, options?: any) {
        return ElementApiFp(this.configuration).getDataSetElements4GzipUsingPOST(condition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getDataSetElementsByMvd
     * @param {number} versionId versionId
     * @param {string} [mvd] mvd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public getDataSetElementsByMvdUsingGET(versionId: number, mvd?: string, options?: any) {
        return ElementApiFp(this.configuration).getDataSetElementsByMvdUsingGET(versionId, mvd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 按mvd获取elements
     * @param {string} dsId dsId
     * @param {number} version version
     * @param {string} [mvd] mvd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public getDataSetElementsByMvdUsingGET1(dsId: string, version: number, mvd?: string, options?: any) {
        return ElementApiFp(this.configuration).getDataSetElementsByMvdUsingGET1(dsId, version, mvd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getDataSetElements
     * @param {number} versionId versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public getDataSetElementsUsingGET(versionId: number, options?: any) {
        return ElementApiFp(this.configuration).getDataSetElementsUsingGET(versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getDataSetElements
     * @param {string} [dsId] 数据集Id
     * @param {number} [version] 版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public getDataSetElementsUsingGET1(dsId?: string, version?: number, options?: any) {
        return ElementApiFp(this.configuration).getDataSetElementsUsingGET1(dsId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getFilteredDataSetElementIds
     * @param {GetFilteredElements} args args
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public getFilteredDataSetElementIdsUsingPOST(args: GetFilteredElements, options?: any) {
        return ElementApiFp(this.configuration).getFilteredDataSetElementIdsUsingPOST(args, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getFilteredDataSetElementsByMvd
     * @param {GetFilteredElements} args args
     * @param {string} [mvd] mvd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public getFilteredDataSetElementsByMvdUsingPOST(args: GetFilteredElements, mvd?: string, options?: any) {
        return ElementApiFp(this.configuration).getFilteredDataSetElementsByMvdUsingPOST(args, mvd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getFilteredDataSetElements
     * @param {GetFilteredElements} args args
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public getFilteredDataSetElementsUsingPOST(args: GetFilteredElements, options?: any) {
        return ElementApiFp(this.configuration).getFilteredDataSetElementsUsingPOST(args, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 按mvd方式获取增量构件
     * @param {GetFilteredIncrementElements} args args
     * @param {string} [mvd] mvd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public getFilteredIncrementElementsByMvdUsingPOST(args: GetFilteredIncrementElements, mvd?: string, options?: any) {
        return ElementApiFp(this.configuration).getFilteredIncrementElementsByMvdUsingPOST(args, mvd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getFilteredIncrementElements
     * @param {GetFilteredIncrementElements} args args
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public getFilteredIncrementElementsUsingPOST(args: GetFilteredIncrementElements, options?: any) {
        return ElementApiFp(this.configuration).getFilteredIncrementElementsUsingPOST(args, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据版本获取相比最新版本的增量数据的状态
     * @param {string} datasetId 数据集Id
     * @param {number} version 客户端数据版本号
     * @param {number} [endVersion] 带比较的版本号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public getIncrementElementStatusUsingGET(datasetId: string, version: number, endVersion?: number, options?: any) {
        return ElementApiFp(this.configuration).getIncrementElementStatusUsingGET(datasetId, version, endVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据版本获取相比最新版本的增量数据
     * @param {string} datasetId 数据集Id
     * @param {number} version 客户端数据版本号
     * @param {number} [endVersion] 带比较的版本号
     * @param {string} [mvd] mvd字符串
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public getIncrementElementsByMvdUsingGET(datasetId: string, version: number, endVersion?: number, mvd?: string, options?: any) {
        return ElementApiFp(this.configuration).getIncrementElementsByMvdUsingGET(datasetId, version, endVersion, mvd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据版本获取相比最新版本的增量数据
     * @param {string} datasetId 数据集Id
     * @param {number} version 客户端数据版本号
     * @param {number} [endVersion] 带比较的版本号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public getIncrementElementsUsingGET(datasetId: string, version: number, endVersion?: number, options?: any) {
        return ElementApiFp(this.configuration).getIncrementElementsUsingGET(datasetId, version, endVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary insertElements
     * @param {number} newModelVersion newModelVersion
     * @param {Array<Element>} elements elements
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public insertElementsUsingPUT(newModelVersion: number, elements: Array<Element>, options?: any) {
        return ElementApiFp(this.configuration).insertElementsUsingPUT(newModelVersion, elements, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary queryElements
     * @param {string} datasetId datasetId
     * @param {ElementQuery} elementQuery elementQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public queryElementsUsingPOST(datasetId: string, elementQuery: ElementQuery, options?: any) {
        return ElementApiFp(this.configuration).queryElementsUsingPOST(datasetId, elementQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary testIdea
     * @param {number} begin begin
     * @param {number} size size
     * @param {string} table table
     * @param {string} type type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public testIdeaUsingGET(begin: number, size: number, table: string, type: string, options?: any) {
        return ElementApiFp(this.configuration).testIdeaUsingGET(begin, size, table, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary testVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public testVersionUsingGET(options?: any) {
        return ElementApiFp(this.configuration).testVersionUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateDataset
     * @param {string} dsId dsId
     * @param {boolean} [forceUpdate] forceUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public updateDatasetUsingGET(dsId: string, forceUpdate?: boolean, options?: any) {
        return ElementApiFp(this.configuration).updateDatasetUsingGET(dsId, forceUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateDatasets
     * @param {Array<string>} dsIds dsIds
     * @param {boolean} [forceUpdate] forceUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementApi
     */
    public updateDatasetsUsingPOST(dsIds: Array<string>, forceUpdate?: boolean, options?: any) {
        return ElementApiFp(this.configuration).updateDatasetsUsingPOST(dsIds, forceUpdate, options).then((request) => request(this.axios, this.basePath));
    }

}

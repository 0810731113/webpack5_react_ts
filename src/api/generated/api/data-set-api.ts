// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DataSet } from '../model';
// @ts-ignore
import { DataSetCreation } from '../model';
// @ts-ignore
import { DataSetVO } from '../model';
// @ts-ignore
import { DatasetPushRequest } from '../model';
// @ts-ignore
import { DatasetUploadBeginRequest } from '../model';
// @ts-ignore
import { DatasetUploadEndRequest } from '../model';
// @ts-ignore
import { ResponseDataSet } from '../model';
// @ts-ignore
import { ResponseDataSetVO } from '../model';
// @ts-ignore
import { ResponseDatasetTask } from '../model';
// @ts-ignore
import { ResponseDatasetUploadBeginResponse } from '../model';
// @ts-ignore
import { ResponseListCommittedDataSet } from '../model';
// @ts-ignore
import { ResponseListDataSet } from '../model';
// @ts-ignore
import { ResponseListDataSetMonitorVO } from '../model';
// @ts-ignore
import { ResponseListDataSetOfOwner } from '../model';
// @ts-ignore
import { ResponseListDataSetVO } from '../model';
// @ts-ignore
import { ResponseListDatasetBlockFile } from '../model';
// @ts-ignore
import { ResponseListStandardCodeVO } from '../model';
// @ts-ignore
import { ResponseListVersionVO } from '../model';
// @ts-ignore
import { ResponseMonitorResultVO } from '../model';
// @ts-ignore
import { ResponseTreeNode } from '../model';
// @ts-ignore
import { ResponseVersionVO } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
// @ts-ignore
import { Responseboolean } from '../model';
// @ts-ignore
import { Responseint } from '../model';
// @ts-ignore
import { Responselong } from '../model';
// @ts-ignore
import { Responsestring } from '../model';
// @ts-ignore
import { Version } from '../model';
// @ts-ignore
import { VersionVO } from '../model';
/**
 * DataSetApi - axios parameter creator
 * @export
 */
export const DataSetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 对接受到的Token信息进行ACK确认
         * @param {string} dataSetId dataSetId
         * @param {string} token token
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackMonitorUsingPUT: async (dataSetId: string, token: string, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new RequiredError('dataSetId','Required parameter dataSetId was null or undefined when calling ackMonitorUsingPUT.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling ackMonitorUsingPUT.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling ackMonitorUsingPUT.');
            }
            const localVarPath = `/dataset/{dataSetId}/monitor/ack`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据DataSetId申请读权限的Token
         * @param {string} dataSetId dataSetId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {boolean} [ack] ack
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyDataSetSMonitorByDSIdUsingPOST: async (dataSetId: string, xGdcUserid: string, ack?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new RequiredError('dataSetId','Required parameter dataSetId was null or undefined when calling applyDataSetSMonitorByDSIdUsingPOST.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling applyDataSetSMonitorByDSIdUsingPOST.');
            }
            const localVarPath = `/dataset/{dataSetId}/smonitor/apply`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ack !== undefined) {
                localVarQueryParameter['ack'] = ack;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据DataSetId和用户的身份标识申请编辑权限的Token
         * @param {string} dataSetId dataSetId
         * @param {string} uuid uuid
         * @param {string} xGdcUserid x-gdc-userid
         * @param {boolean} [ack] ack
         * @param {number} [expire] expire
         * @param {string} [token] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyDataSetXMonitorByDSIdHolderUserInfoUsingPOST: async (dataSetId: string, uuid: string, xGdcUserid: string, ack?: boolean, expire?: number, token?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new RequiredError('dataSetId','Required parameter dataSetId was null or undefined when calling applyDataSetXMonitorByDSIdHolderUserInfoUsingPOST.');
            }
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling applyDataSetXMonitorByDSIdHolderUserInfoUsingPOST.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling applyDataSetXMonitorByDSIdHolderUserInfoUsingPOST.');
            }
            const localVarPath = `/dataset/{dataSetId}/xmonitor/with/double/identity/apply`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ack !== undefined) {
                localVarQueryParameter['ack'] = ack;
            }

            if (expire !== undefined) {
                localVarQueryParameter['expire'] = expire;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据DataSetId申请编辑权限的Token
         * @param {string} dataSetId dataSetId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {boolean} [ack] ack
         * @param {number} [expire] expire
         * @param {string} [token] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyDataSetXMonitorByDSIdUsingPOST: async (dataSetId: string, xGdcUserid: string, ack?: boolean, expire?: number, token?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new RequiredError('dataSetId','Required parameter dataSetId was null or undefined when calling applyDataSetXMonitorByDSIdUsingPOST.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling applyDataSetXMonitorByDSIdUsingPOST.');
            }
            const localVarPath = `/dataset/{dataSetId}/xmonitor/apply`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ack !== undefined) {
                localVarQueryParameter['ack'] = ack;
            }

            if (expire !== undefined) {
                localVarQueryParameter['expire'] = expire;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据DataSetId申请编辑权限的Token
         * @param {string} dataSetId dataSetId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {boolean} [ack] ack
         * @param {number} [expire] expire
         * @param {string} [token] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyDataSetXMonitorByDSIdV2UsingPOST: async (dataSetId: string, xGdcUserid: string, ack?: boolean, expire?: number, token?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new RequiredError('dataSetId','Required parameter dataSetId was null or undefined when calling applyDataSetXMonitorByDSIdV2UsingPOST.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling applyDataSetXMonitorByDSIdV2UsingPOST.');
            }
            const localVarPath = `/v2/dataset/{dataSetId}/xmonitor/apply`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ack !== undefined) {
                localVarQueryParameter['ack'] = ack;
            }

            if (expire !== undefined) {
                localVarQueryParameter['expire'] = expire;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据DataSetId申请编辑权或者更新权的Token
         * @param {string} dataSetId dataSetId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {boolean} [ack] ack
         * @param {number} [expire] expire
         * @param {string} [token] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyDataSetXOrUMonitorByDSIdUsingPOST: async (dataSetId: string, xGdcUserid: string, ack?: boolean, expire?: number, token?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new RequiredError('dataSetId','Required parameter dataSetId was null or undefined when calling applyDataSetXOrUMonitorByDSIdUsingPOST.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling applyDataSetXOrUMonitorByDSIdUsingPOST.');
            }
            const localVarPath = `/v3/dataset/{dataSetId}/xmonitor/apply`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ack !== undefined) {
                localVarQueryParameter['ack'] = ack;
            }

            if (expire !== undefined) {
                localVarQueryParameter['expire'] = expire;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取上传操作的id
         * @param {string} [dsId] 数据集Id
         * @param {string} [tag] 数据标记
         * @param {string} [token] Token
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beginUploadIdUsingGET: async (dsId?: string, tag?: string, token?: string, xGdcUserid?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/dataset/upload/begin`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dsId !== undefined) {
                localVarQueryParameter['dsId'] = dsId;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取上传操作的id
         * @param {string} dsId 数据集Id
         * @param {string} token Token
         * @param {string} xGdcUserid x-gdc-userid
         * @param {string} [tag] 数据标记
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beginUploadIdV2UsingGET: async (dsId: string, token: string, xGdcUserid: string, tag?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling beginUploadIdV2UsingGET.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling beginUploadIdV2UsingGET.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling beginUploadIdV2UsingGET.');
            }
            const localVarPath = `/v2/dataset/upload/begin`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dsId !== undefined) {
                localVarQueryParameter['dsId'] = dsId;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 数据版本检查
         * @param {string} datasetId datasetId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDataSetVersionUsingGET: async (datasetId: string, version: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling checkDataSetVersionUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling checkDataSetVersionUsingGET.');
            }
            const localVarPath = `/dataset/version/check`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (datasetId !== undefined) {
                localVarQueryParameter['datasetId'] = datasetId;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 完成工作单元某版本的上传流程
         * @param {string} dsId dsId
         * @param {number} version version
         * @param {boolean} [force] 强制关闭，运营需要。工作单元上传不应该使用该参数
         * @param {boolean} [success] success
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeUploadUsingPOST: async (dsId: string, version: number, force?: boolean, success?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling closeUploadUsingPOST.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling closeUploadUsingPOST.');
            }
            const localVarPath = `/datasets/{dsId}/versions/{version}/closeupload`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            if (success !== undefined) {
                localVarQueryParameter['success'] = success;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建数据集
         * @param {DataSetCreation} dataSetCreation dataSetCreation
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDataSetUsingPOST: async (dataSetCreation: DataSetCreation, xGdcUserid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetCreation' is not null or undefined
            if (dataSetCreation === null || dataSetCreation === undefined) {
                throw new RequiredError('dataSetCreation','Required parameter dataSetCreation was null or undefined when calling createDataSetUsingPOST.');
            }
            const localVarPath = `/v2/dataSets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dataSetCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dataSetCreation !== undefined ? dataSetCreation : {}) : (dataSetCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createDataSetV0
         * @param {DataSetCreation} ds ds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDataSetV0UsingPUT: async (ds: DataSetCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ds' is not null or undefined
            if (ds === null || ds === undefined) {
                throw new RequiredError('ds','Required parameter ds was null or undefined when calling createDataSetV0UsingPUT.');
            }
            const localVarPath = `/dataset`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof ds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(ds !== undefined ? ds : {}) : (ds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建数据集v3,不设置默认owner
         * @param {DataSetCreation} dataSetCreation dataSetCreation
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDataSetV3UsingPOST: async (dataSetCreation: DataSetCreation, xGdcUserid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetCreation' is not null or undefined
            if (dataSetCreation === null || dataSetCreation === undefined) {
                throw new RequiredError('dataSetCreation','Required parameter dataSetCreation was null or undefined when calling createDataSetV3UsingPOST.');
            }
            const localVarPath = `/v3/dataSets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dataSetCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dataSetCreation !== undefined ? dataSetCreation : {}) : (dataSetCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createVersion
         * @param {string} dsId dsId
         * @param {object} metaInfoMap metaInfoMap
         * @param {string} [sourceFile] sourceFile
         * @param {string} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVersionUsingPUT: async (dsId: string, metaInfoMap: object, sourceFile?: string, status?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling createVersionUsingPUT.');
            }
            // verify required parameter 'metaInfoMap' is not null or undefined
            if (metaInfoMap === null || metaInfoMap === undefined) {
                throw new RequiredError('metaInfoMap','Required parameter metaInfoMap was null or undefined when calling createVersionUsingPUT.');
            }
            const localVarPath = `/dataset/{dsId}/version`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sourceFile !== undefined) {
                localVarQueryParameter['sourceFile'] = sourceFile;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof metaInfoMap !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(metaInfoMap !== undefined ? metaInfoMap : {}) : (metaInfoMap || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary datasetCheckAsyncTaskStatus
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetCheckAsyncTaskStatusUsingGET: async (taskId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling datasetCheckAsyncTaskStatusUsingGET.');
            }
            const localVarPath = `/dataset/async-tasks/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary datasetPushAsyncBegin
         * @param {string} datasetId datasetId
         * @param {string} token token
         * @param {DatasetUploadBeginRequest} pushRequest pushRequest
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetPushAsyncBeginUsingPOST: async (datasetId: string, token: string, pushRequest: DatasetUploadBeginRequest, xGdcUserid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling datasetPushAsyncBeginUsingPOST.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling datasetPushAsyncBeginUsingPOST.');
            }
            // verify required parameter 'pushRequest' is not null or undefined
            if (pushRequest === null || pushRequest === undefined) {
                throw new RequiredError('pushRequest','Required parameter pushRequest was null or undefined when calling datasetPushAsyncBeginUsingPOST.');
            }
            const localVarPath = `/dataset/{datasetId}/upload/begin`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof pushRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pushRequest !== undefined ? pushRequest : {}) : (pushRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary datasetPushAsyncEnd
         * @param {string} datasetId datasetId
         * @param {string} token token
         * @param {string} xGdcUserid x-gdc-userid
         * @param {DatasetUploadEndRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetPushAsyncEndUsingPOST: async (datasetId: string, token: string, xGdcUserid: string, pushRequest: DatasetUploadEndRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling datasetPushAsyncEndUsingPOST.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling datasetPushAsyncEndUsingPOST.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling datasetPushAsyncEndUsingPOST.');
            }
            // verify required parameter 'pushRequest' is not null or undefined
            if (pushRequest === null || pushRequest === undefined) {
                throw new RequiredError('pushRequest','Required parameter pushRequest was null or undefined when calling datasetPushAsyncEndUsingPOST.');
            }
            const localVarPath = `/dataset/{datasetId}/upload/end`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof pushRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pushRequest !== undefined ? pushRequest : {}) : (pushRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary datasetPushAsync
         * @param {string} datasetId datasetId
         * @param {DatasetPushRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetPushAsyncUsingPUT: async (datasetId: string, pushRequest: DatasetPushRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling datasetPushAsyncUsingPUT.');
            }
            // verify required parameter 'pushRequest' is not null or undefined
            if (pushRequest === null || pushRequest === undefined) {
                throw new RequiredError('pushRequest','Required parameter pushRequest was null or undefined when calling datasetPushAsyncUsingPUT.');
            }
            const localVarPath = `/dataset/{datasetId}/upload/push/async`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof pushRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pushRequest !== undefined ? pushRequest : {}) : (pushRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除指定的工作单元
         * @param {string} dataSetId dataSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataSetUsingDELETE: async (dataSetId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new RequiredError('dataSetId','Required parameter dataSetId was null or undefined when calling deleteDataSetUsingDELETE.');
            }
            const localVarPath = `/dataSets/{dataSetId}`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 逻辑删除目录
         * @param {string} datasetId 数据集Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectUsingDELETE: async (datasetId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling deleteProjectUsingDELETE.');
            }
            const localVarPath = `/dataset`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (datasetId !== undefined) {
                localVarQueryParameter['datasetId'] = datasetId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 提交上传操作
         * @param {number} count 元素总数
         * @param {string} datasetId 关联的数据集
         * @param {string} uploadId 上传id
         * @param {string} version 客户端数据版本号
         * @param {string} [verify] 验证文件标识
         * @param {string} [metaInfoMap] 元数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endUploadIdUsingPUT: async (count: number, datasetId: string, uploadId: string, version: string, verify?: string, metaInfoMap?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling endUploadIdUsingPUT.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling endUploadIdUsingPUT.');
            }
            // verify required parameter 'uploadId' is not null or undefined
            if (uploadId === null || uploadId === undefined) {
                throw new RequiredError('uploadId','Required parameter uploadId was null or undefined when calling endUploadIdUsingPUT.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling endUploadIdUsingPUT.');
            }
            const localVarPath = `/dataset/upload/end`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (datasetId !== undefined) {
                localVarQueryParameter['datasetId'] = datasetId;
            }

            if (uploadId !== undefined) {
                localVarQueryParameter['uploadId'] = uploadId;
            }

            if (verify !== undefined) {
                localVarQueryParameter['verify'] = verify;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof metaInfoMap !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(metaInfoMap !== undefined ? metaInfoMap : {}) : (metaInfoMap || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 提交上传操作
         * @param {number} count 元素总数
         * @param {string} datasetId 关联的数据集
         * @param {string} uploadId 上传id
         * @param {string} version 客户端数据版本号
         * @param {number} [suiteCount] 构件的数量
         * @param {string} [verify] 验证文件标识
         * @param {string} [metaInfoMap] 元数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endUploadIdV2UsingPUT: async (count: number, datasetId: string, uploadId: string, version: string, suiteCount?: number, verify?: string, metaInfoMap?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling endUploadIdV2UsingPUT.');
            }
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling endUploadIdV2UsingPUT.');
            }
            // verify required parameter 'uploadId' is not null or undefined
            if (uploadId === null || uploadId === undefined) {
                throw new RequiredError('uploadId','Required parameter uploadId was null or undefined when calling endUploadIdV2UsingPUT.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling endUploadIdV2UsingPUT.');
            }
            const localVarPath = `/v2/dataset/upload/end`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (datasetId !== undefined) {
                localVarQueryParameter['datasetId'] = datasetId;
            }

            if (suiteCount !== undefined) {
                localVarQueryParameter['suiteCount'] = suiteCount;
            }

            if (uploadId !== undefined) {
                localVarQueryParameter['uploadId'] = uploadId;
            }

            if (verify !== undefined) {
                localVarQueryParameter['verify'] = verify;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof metaInfoMap !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(metaInfoMap !== undefined ? metaInfoMap : {}) : (metaInfoMap || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量获取团队下指定状态的所有工作单元
         * @param {Array<string>} teamIds teamIds
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDataSetsInTeamsUsingPOST: async (teamIds: Array<string>, status?: 'draft' | 'committed', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamIds' is not null or undefined
            if (teamIds === null || teamIds === undefined) {
                throw new RequiredError('teamIds','Required parameter teamIds was null or undefined when calling getAllDataSetsInTeamsUsingPOST.');
            }
            const localVarPath = `/search/teams/dataSets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof teamIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(teamIds !== undefined ? teamIds : {}) : (teamIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量获取草稿对应的过程工作单元
         * @param {Array<string>} draftDataSetIds draftDataSetIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommittedDataSetsUsingPOST: async (draftDataSetIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'draftDataSetIds' is not null or undefined
            if (draftDataSetIds === null || draftDataSetIds === undefined) {
                throw new RequiredError('draftDataSetIds','Required parameter draftDataSetIds was null or undefined when calling getCommittedDataSetsUsingPOST.');
            }
            const localVarPath = `/search/committed-datasets/byDataSets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof draftDataSetIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(draftDataSetIds !== undefined ? draftDataSetIds : {}) : (draftDataSetIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据id获取dataset
         * @param {string} dataSetId dataSetId
         * @param {boolean} [ignoreDeleted] ignoreDeleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetByIdUsingGET: async (dataSetId: string, ignoreDeleted?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new RequiredError('dataSetId','Required parameter dataSetId was null or undefined when calling getDataSetByIdUsingGET.');
            }
            const localVarPath = `/v2/dataSets/{dataSetId}`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ignoreDeleted !== undefined) {
                localVarQueryParameter['ignoreDeleted'] = ignoreDeleted;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据id列表批量获取工作单元
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetByIdsUsingPOST: async (dataSetIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetIds' is not null or undefined
            if (dataSetIds === null || dataSetIds === undefined) {
                throw new RequiredError('dataSetIds','Required parameter dataSetIds was null or undefined when calling getDataSetByIdsUsingPOST.');
            }
            const localVarPath = `/search/dataSets/byIds`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dataSetIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dataSetIds !== undefined ? dataSetIds : {}) : (dataSetIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取团队下指定类型的工作单元
         * @param {string} teamId teamId
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetInTeamByTypeUsingGET: async (teamId: string, type?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getDataSetInTeamByTypeUsingGET.');
            }
            const localVarPath = `/teams/{teamId}/dataSets/byType`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getDataSetProjectSubId
         * @param {string} datasetId datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetProjectSubIdUsingGET: async (datasetId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling getDataSetProjectSubIdUsingGET.');
            }
            const localVarPath = `/dataset/project-sub-id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (datasetId !== undefined) {
                localVarQueryParameter['datasetId'] = datasetId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getDataSetVersions
         * @param {string} dsId dsId
         * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetVersionsUsingGET: async (dsId: string, onlySuccess?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling getDataSetVersionsUsingGET.');
            }
            const localVarPath = `/dataset/{dsId}/versions`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (onlySuccess !== undefined) {
                localVarQueryParameter['onlySuccess'] = onlySuccess;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getDataSetVersionsWithDefaultColumns
         * @param {string} dsId dsId
         * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetVersionsWithDefaultColumnsUsingGET: async (dsId: string, onlySuccess?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling getDataSetVersionsWithDefaultColumnsUsingGET.');
            }
            const localVarPath = `/v2/dataset/{dsId}/versions`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (onlySuccess !== undefined) {
                localVarQueryParameter['onlySuccess'] = onlySuccess;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getDataSetsByFolder
         * @param {string} folderId folderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsByFolderUsingGET: async (folderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            if (folderId === null || folderId === undefined) {
                throw new RequiredError('folderId','Required parameter folderId was null or undefined when calling getDataSetsByFolderUsingGET.');
            }
            const localVarPath = `/dataset/byfolder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据id列表批量获取工作单元
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsByIdsUsingPOST: async (dataSetIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetIds' is not null or undefined
            if (dataSetIds === null || dataSetIds === undefined) {
                throw new RequiredError('dataSetIds','Required parameter dataSetIds was null or undefined when calling getDataSetsByIdsUsingPOST.');
            }
            const localVarPath = `/dataSets/ids/batch`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dataSetIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dataSetIds !== undefined ? dataSetIds : {}) : (dataSetIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取个人设计下的工作单元
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsByProjectAndOwnerUsingGET: async (projectId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getDataSetsByProjectAndOwnerUsingGET.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getDataSetsByProjectAndOwnerUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/dataSets/byOwner`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取个人设计下的工作单元v2
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsByProjectAndOwnerV2UsingGET: async (projectId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getDataSetsByProjectAndOwnerV2UsingGET.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getDataSetsByProjectAndOwnerV2UsingGET.');
            }
            const localVarPath = `/v2/projects/{projectId}/dataSets/byOwner`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 按照专业获取工作单元
         * @param {string} specialtyId specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsBySpecialtyUsingGET: async (specialtyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new RequiredError('specialtyId','Required parameter specialtyId was null or undefined when calling getDataSetsBySpecialtyUsingGET.');
            }
            const localVarPath = `/dataSets/bySpecialty`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (specialtyId !== undefined) {
                localVarQueryParameter['specialtyId'] = specialtyId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目下指定类型的数据集
         * @param {string} projectId projectId
         * @param {string} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsByTypeUsingGET: async (projectId: string, type: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getDataSetsByTypeUsingGET.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling getDataSetsByTypeUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/datasets`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目下指定状态的工作单元
         * @param {string} projectId projectId
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsInProjectByStatusUsingGET: async (projectId: string, status?: 'draft' | 'committed', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getDataSetsInProjectByStatusUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/dataSets/byStatus`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取团队下指定状态的工作单元
         * @param {string} teamId teamId
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsInTeamByStatusUsingGET: async (teamId: string, status?: 'draft' | 'committed', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getDataSetsInTeamByStatusUsingGET.');
            }
            const localVarPath = `/teams/{teamId}/dataSets/byStatus`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取团队下指定类型的工作单元
         * @param {string} teamId teamId
         * @param {'std' | 'cloudify' | 'gap' | 'rvt' | 'bmv' | 'pdf' | 'dwg' | 'docx' | 'jpg' | 'gac' | 'all'} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsInTeamByTypeUsingGET: async (teamId: string, type?: 'std' | 'cloudify' | 'gap' | 'rvt' | 'bmv' | 'pdf' | 'dwg' | 'docx' | 'jpg' | 'gac' | 'all', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getDataSetsInTeamByTypeUsingGET.');
            }
            const localVarPath = `/teams/{teamId}/dataSets`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量获取团队下指定状态的工作单元
         * @param {Array<string>} teamIds teamIds
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsInTeamsUsingPOST: async (teamIds: Array<string>, status?: 'draft' | 'committed', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamIds' is not null or undefined
            if (teamIds === null || teamIds === undefined) {
                throw new RequiredError('teamIds','Required parameter teamIds was null or undefined when calling getDataSetsInTeamsUsingPOST.');
            }
            const localVarPath = `/search/dataSets/byTeams`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof teamIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(teamIds !== undefined ? teamIds : {}) : (teamIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量获取团队下指定状态自己负责的工作单元v2
         * @param {Array<string>} teamIds teamIds
         * @param {'draft' | 'committed'} [status] status
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsInTeamsV2UsingPOST: async (teamIds: Array<string>, status?: 'draft' | 'committed', xGdcUserid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamIds' is not null or undefined
            if (teamIds === null || teamIds === undefined) {
                throw new RequiredError('teamIds','Required parameter teamIds was null or undefined when calling getDataSetsInTeamsV2UsingPOST.');
            }
            const localVarPath = `/v2/search/dataSets/byTeams`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof teamIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(teamIds !== undefined ? teamIds : {}) : (teamIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目下所有工作单元的使用空间
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsSizeByProjectUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getDataSetsSizeByProjectUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/dataSetsSize`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getDataSets
         * @param {string} specialtyId specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsUsingGET: async (specialtyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new RequiredError('specialtyId','Required parameter specialtyId was null or undefined when calling getDataSetsUsingGET.');
            }
            const localVarPath = `/datasets/specialty`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (specialtyId !== undefined) {
                localVarQueryParameter['specialtyId'] = specialtyId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取最工作单元的指定版本Version信息并按mvd来过滤字段
         * @param {string} dsId dsId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetStandardCodeVersionUsingGET: async (dsId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling getDatasetStandardCodeVersionUsingGET.');
            }
            const localVarPath = `/datasets/{dsId}/standardcodeversion`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取Dataset
         * @param {string} datasetId 获取数据集信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetUsingGET: async (datasetId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling getDatasetUsingGET.');
            }
            const localVarPath = `/dataset`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (datasetId !== undefined) {
                localVarQueryParameter['datasetId'] = datasetId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取工作单元的指定状态的版本
         * @param {string} dataSetId dataSetId
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetVersionsByStatusUsingGET: async (dataSetId: string, onlySuccess?: boolean, status?: 'draft' | 'committed', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new RequiredError('dataSetId','Required parameter dataSetId was null or undefined when calling getDatasetVersionsByStatusUsingGET.');
            }
            const localVarPath = `/dataSets/{dataSetId}/versions/byStatus`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (onlySuccess !== undefined) {
                localVarQueryParameter['onlySuccess'] = onlySuccess;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量获取工作单元的指定状态的版本
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetsVersionsByStatusAndColumnsUsingPOST: async (dataSetIds: Array<string>, onlySuccess?: boolean, status?: 'draft' | 'committed', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetIds' is not null or undefined
            if (dataSetIds === null || dataSetIds === undefined) {
                throw new RequiredError('dataSetIds','Required parameter dataSetIds was null or undefined when calling getDatasetsVersionsByStatusAndColumnsUsingPOST.');
            }
            const localVarPath = `/v2/dataSets/versions/byStatus`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (onlySuccess !== undefined) {
                localVarQueryParameter['onlySuccess'] = onlySuccess;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dataSetIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dataSetIds !== undefined ? dataSetIds : {}) : (dataSetIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 按照mvd方式，批量获取工作单元的指定状态的版本
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {string} [mvd] mvd
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetsVersionsByStatusMVDUsingPOST: async (dataSetIds: Array<string>, mvd?: string, onlySuccess?: boolean, status?: 'draft' | 'committed', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetIds' is not null or undefined
            if (dataSetIds === null || dataSetIds === undefined) {
                throw new RequiredError('dataSetIds','Required parameter dataSetIds was null or undefined when calling getDatasetsVersionsByStatusMVDUsingPOST.');
            }
            const localVarPath = `/v3/dataSets/versions/byStatus`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mvd !== undefined) {
                localVarQueryParameter['mvd'] = mvd;
            }

            if (onlySuccess !== undefined) {
                localVarQueryParameter['onlySuccess'] = onlySuccess;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dataSetIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dataSetIds !== undefined ? dataSetIds : {}) : (dataSetIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量获取工作单元的指定状态的版本
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetsVersionsByStatusUsingPOST: async (dataSetIds: Array<string>, onlySuccess?: boolean, status?: 'draft' | 'committed', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetIds' is not null or undefined
            if (dataSetIds === null || dataSetIds === undefined) {
                throw new RequiredError('dataSetIds','Required parameter dataSetIds was null or undefined when calling getDatasetsVersionsByStatusUsingPOST.');
            }
            const localVarPath = `/dataSets/versions/byStatus`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (onlySuccess !== undefined) {
                localVarQueryParameter['onlySuccess'] = onlySuccess;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dataSetIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dataSetIds !== undefined ? dataSetIds : {}) : (dataSetIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getLatestVersion
         * @param {string} dsId dsId
         * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestVersionUsingGET: async (dsId: string, onlySuccess?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling getLatestVersionUsingGET.');
            }
            const localVarPath = `/dataset/{dsId}/version/latest`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (onlySuccess !== undefined) {
                localVarQueryParameter['onlySuccess'] = onlySuccess;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取最新的工作单元的Version信息并按mvd来过滤字段(Deprecated，被v3版本替换)
         * @param {string} dsId dsId
         * @param {string} [mvd] mvd
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestVersionWithMvdUsingGET: async (dsId: string, mvd?: string, onlySuccess?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling getLatestVersionWithMvdUsingGET.');
            }
            const localVarPath = `/v2/datasets/{dsId}/version/latest`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mvd !== undefined) {
                localVarQueryParameter['mvd'] = mvd;
            }

            if (onlySuccess !== undefined) {
                localVarQueryParameter['onlySuccess'] = onlySuccess;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取最新的工作单元的Version信息并按mvd来过滤字段(不会填充RawData和RefInfo字段)
         * @param {string} dsId dsId
         * @param {string} [mvd] mvd
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestVersionWithMvdWithoutRawDataAndRefInfoUsingGET: async (dsId: string, mvd?: string, onlySuccess?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling getLatestVersionWithMvdWithoutRawDataAndRefInfoUsingGET.');
            }
            const localVarPath = `/v3/datasets/{dsId}/version/latest`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mvd !== undefined) {
                localVarQueryParameter['mvd'] = mvd;
            }

            if (onlySuccess !== undefined) {
                localVarQueryParameter['onlySuccess'] = onlySuccess;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获得Version的Block数据的MD5
         * @param {string} datasetId datasetId
         * @param {Array<string>} datasetFilePaths datasetFilePaths
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMD5OfVersionBlockFilesUsingPOST: async (datasetId: string, datasetFilePaths: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling getMD5OfVersionBlockFilesUsingPOST.');
            }
            // verify required parameter 'datasetFilePaths' is not null or undefined
            if (datasetFilePaths === null || datasetFilePaths === undefined) {
                throw new RequiredError('datasetFilePaths','Required parameter datasetFilePaths was null or undefined when calling getMD5OfVersionBlockFilesUsingPOST.');
            }
            const localVarPath = `/datasets/{datasetId}/blockFiles/queryMD5`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof datasetFilePaths !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(datasetFilePaths !== undefined ? datasetFilePaths : {}) : (datasetFilePaths || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取数据集指定版本的目录树
         * @param {string} dataSetId dataSetId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelTreeUsingGET: async (dataSetId: string, version: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new RequiredError('dataSetId','Required parameter dataSetId was null or undefined when calling getModelTreeUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getModelTreeUsingGET.');
            }
            const localVarPath = `/dataSets/{dataSetId}/versions/{version}/tree`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 产生可供下载的version的Block数据的签名URL
         * @param {string} datasetId datasetId
         * @param {Array<string>} datasetFilePaths datasetFilePaths
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSASOfVersionBlockFilesUsingPOST: async (datasetId: string, datasetFilePaths: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling getSASOfVersionBlockFilesUsingPOST.');
            }
            // verify required parameter 'datasetFilePaths' is not null or undefined
            if (datasetFilePaths === null || datasetFilePaths === undefined) {
                throw new RequiredError('datasetFilePaths','Required parameter datasetFilePaths was null or undefined when calling getSASOfVersionBlockFilesUsingPOST.');
            }
            const localVarPath = `/datasets/{datasetId}/blockFiles/readSAS`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof datasetFilePaths !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(datasetFilePaths !== undefined ? datasetFilePaths : {}) : (datasetFilePaths || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取数据集指定版本中的标准编码列表
         * @param {number} versionId versionId
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStandardCodeCollUsingGET: async (versionId: number, xGdcUserid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'versionId' is not null or undefined
            if (versionId === null || versionId === undefined) {
                throw new RequiredError('versionId','Required parameter versionId was null or undefined when calling getStandardCodeCollUsingGET.');
            }
            const localVarPath = `/dataSets/version/{versionId}/standard/code`
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getVersion
         * @param {string} dsId dsId
         * @param {number} dsVersion dsVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersionUsingGET: async (dsId: string, dsVersion: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling getVersionUsingGET.');
            }
            // verify required parameter 'dsVersion' is not null or undefined
            if (dsVersion === null || dsVersion === undefined) {
                throw new RequiredError('dsVersion','Required parameter dsVersion was null or undefined when calling getVersionUsingGET.');
            }
            const localVarPath = `/dataset/{dsId}/version/{dsVersion}`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)))
                .replace(`{${"dsVersion"}}`, encodeURIComponent(String(dsVersion)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取最工作单元的指定版本Version信息并按mvd来过滤字段(Deprecated，被v3版本替换)
         * @param {string} dsId dsId
         * @param {number} dsVersion dsVersion
         * @param {string} [mvd] mvd
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersionWithMvdUsingGET: async (dsId: string, dsVersion: number, mvd?: string, onlySuccess?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling getVersionWithMvdUsingGET.');
            }
            // verify required parameter 'dsVersion' is not null or undefined
            if (dsVersion === null || dsVersion === undefined) {
                throw new RequiredError('dsVersion','Required parameter dsVersion was null or undefined when calling getVersionWithMvdUsingGET.');
            }
            const localVarPath = `/v2/datasets/{dsId}/version/{dsVersion}`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)))
                .replace(`{${"dsVersion"}}`, encodeURIComponent(String(dsVersion)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mvd !== undefined) {
                localVarQueryParameter['mvd'] = mvd;
            }

            if (onlySuccess !== undefined) {
                localVarQueryParameter['onlySuccess'] = onlySuccess;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取最工作单元的指定版本Version信息并按mvd来过滤字段(不会填充RawData和RefInfo字段)
         * @param {string} dsId dsId
         * @param {number} dsVersion dsVersion
         * @param {string} [mvd] mvd
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersionWithMvdWithoutRawDataAndRefInfoUsingGET: async (dsId: string, dsVersion: number, mvd?: string, onlySuccess?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling getVersionWithMvdWithoutRawDataAndRefInfoUsingGET.');
            }
            // verify required parameter 'dsVersion' is not null or undefined
            if (dsVersion === null || dsVersion === undefined) {
                throw new RequiredError('dsVersion','Required parameter dsVersion was null or undefined when calling getVersionWithMvdWithoutRawDataAndRefInfoUsingGET.');
            }
            const localVarPath = `/v3/datasets/{dsId}/version/{dsVersion}`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)))
                .replace(`{${"dsVersion"}}`, encodeURIComponent(String(dsVersion)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mvd !== undefined) {
                localVarQueryParameter['mvd'] = mvd;
            }

            if (onlySuccess !== undefined) {
                localVarQueryParameter['onlySuccess'] = onlySuccess;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取工作单元上的编辑Token
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDataSetXMonitorByDSIdsUsingPOST: async (dataSetIds: Array<string>, xGdcUserid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetIds' is not null or undefined
            if (dataSetIds === null || dataSetIds === undefined) {
                throw new RequiredError('dataSetIds','Required parameter dataSetIds was null or undefined when calling listDataSetXMonitorByDSIdsUsingPOST.');
            }
            const localVarPath = `/dataset/xmonitor/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dataSetIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dataSetIds !== undefined ? dataSetIds : {}) : (dataSetIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 将指定版本的指定的version的状态设置为publish
         * @param {string} dsId dsId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markPublishUsingPOST: async (dsId: string, version: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling markPublishUsingPOST.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling markPublishUsingPOST.');
            }
            const localVarPath = `/datasets/{dsId}/{version}/markPublish`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary moveToFolder
         * @param {string} dsId dsId
         * @param {string} newFolderId newFolderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveToFolderUsingPOST: async (dsId: string, newFolderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling moveToFolderUsingPOST.');
            }
            // verify required parameter 'newFolderId' is not null or undefined
            if (newFolderId === null || newFolderId === undefined) {
                throw new RequiredError('newFolderId','Required parameter newFolderId was null or undefined when calling moveToFolderUsingPOST.');
            }
            const localVarPath = `/dataset/{dsId}/movetonewfolder`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (newFolderId !== undefined) {
                localVarQueryParameter['newFolderId'] = newFolderId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 产生可供上传的version的Block数据的签名URL
         * @param {string} datasetId datasetId
         * @param {Array<string>} datasetFilePaths datasetFilePaths
         * @param {boolean} [force] 是否强制覆盖，默认false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newVersionBlockFilesUsingPUT: async (datasetId: string, datasetFilePaths: Array<string>, force?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling newVersionBlockFilesUsingPUT.');
            }
            // verify required parameter 'datasetFilePaths' is not null or undefined
            if (datasetFilePaths === null || datasetFilePaths === undefined) {
                throw new RequiredError('datasetFilePaths','Required parameter datasetFilePaths was null or undefined when calling newVersionBlockFilesUsingPUT.');
            }
            const localVarPath = `/datasets/{datasetId}/blockFiles/new`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof datasetFilePaths !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(datasetFilePaths !== undefined ? datasetFilePaths : {}) : (datasetFilePaths || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 提升工作单元指定版本为最新版
         * @param {string} dsId dsId
         * @param {number} version version
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoteVersion2UsingPOST: async (dsId: string, version: number, xGdcUserid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling promoteVersion2UsingPOST.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling promoteVersion2UsingPOST.');
            }
            const localVarPath = `/datasets/{dsId}/versions/{version}/promote`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 提升工作单元指定版本为最新版
         * @param {string} dsId dsId
         * @param {number} version version
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoteVersionUsingPOST: async (dsId: string, version: number, xGdcUserid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling promoteVersionUsingPOST.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling promoteVersionUsingPOST.');
            }
            const localVarPath = `/datasets/{dsId}/versions{version}/promote`
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 释放Token资源(客户端使用)
         * @param {string} token 后台分配的Token
         * @param {string} xGdcUserid x-gdc-userid
         * @param {string} [force] false表示如果关联的数据版本存在修改操作尚未完成，不执行释放操作
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releaseDataSetMonitorByTokenUsingPUT: async (token: string, xGdcUserid: string, force?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling releaseDataSetMonitorByTokenUsingPUT.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling releaseDataSetMonitorByTokenUsingPUT.');
            }
            const localVarPath = `/dataset/monitor/{token}/release`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据DataSet释放Token资源(运维使用)
         * @param {string} dataSetId dataSetId
         * @param {boolean} [force] force
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releaseDataSetXMonitorByDSIdUsingPUT: async (dataSetId: string, force?: boolean, xGdcUserid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new RequiredError('dataSetId','Required parameter dataSetId was null or undefined when calling releaseDataSetXMonitorByDSIdUsingPUT.');
            }
            const localVarPath = `/dataset/{dataSetId}/xmonitor/release`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Token续签
         * @param {number} expire expire
         * @param {string} token token
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renewalDataSetXMonitorByTokenUsingPOST: async (expire: number, token: string, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'expire' is not null or undefined
            if (expire === null || expire === undefined) {
                throw new RequiredError('expire','Required parameter expire was null or undefined when calling renewalDataSetXMonitorByTokenUsingPOST.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling renewalDataSetXMonitorByTokenUsingPOST.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling renewalDataSetXMonitorByTokenUsingPOST.');
            }
            const localVarPath = `/dataset/xmonitor/{token}/{expire}/renewal`
                .replace(`{${"expire"}}`, encodeURIComponent(String(expire)))
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 为工作单元设置一个版本号
         * @param {string} appVersion appVersion
         * @param {string} dsId dsId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAppVersionForDatasetUsingPUT: async (appVersion: string, dsId: string, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appVersion' is not null or undefined
            if (appVersion === null || appVersion === undefined) {
                throw new RequiredError('appVersion','Required parameter appVersion was null or undefined when calling setAppVersionForDatasetUsingPUT.');
            }
            // verify required parameter 'dsId' is not null or undefined
            if (dsId === null || dsId === undefined) {
                throw new RequiredError('dsId','Required parameter dsId was null or undefined when calling setAppVersionForDatasetUsingPUT.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling setAppVersionForDatasetUsingPUT.');
            }
            const localVarPath = `/datasets/{dsId}/appversion/{appVersion}`
                .replace(`{${"appVersion"}}`, encodeURIComponent(String(appVersion)))
                .replace(`{${"dsId"}}`, encodeURIComponent(String(dsId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateDatSetOwner
         * @param {string} dataSetId dataSetId
         * @param {string} [ownerId] ownerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDatSetOwnerUsingPUT: async (dataSetId: string, ownerId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new RequiredError('dataSetId','Required parameter dataSetId was null or undefined when calling updateDatSetOwnerUsingPUT.');
            }
            const localVarPath = `/dataSets/{dataSetId}`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ownerId !== undefined) {
                localVarQueryParameter['ownerId'] = ownerId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新工作单元
         * @param {string} dataSetId dataSetId
         * @param {DataSetCreation} dataset dataset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDataSetByIdUsingPUT: async (dataSetId: string, dataset: DataSetCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new RequiredError('dataSetId','Required parameter dataSetId was null or undefined when calling updateDataSetByIdUsingPUT.');
            }
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling updateDataSetByIdUsingPUT.');
            }
            const localVarPath = `/datasets/{dataSetId}`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dataset !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dataset !== undefined ? dataset : {}) : (dataset || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateDataSet
         * @param {string} datasetId datasetId
         * @param {DataSet} dataSet dataSet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDataSetUsingPUT: async (datasetId: string, dataSet: DataSet, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling updateDataSetUsingPUT.');
            }
            // verify required parameter 'dataSet' is not null or undefined
            if (dataSet === null || dataSet === undefined) {
                throw new RequiredError('dataSet','Required parameter dataSet was null or undefined when calling updateDataSetUsingPUT.');
            }
            const localVarPath = `/dataset/{datasetId}`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dataSet !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dataSet !== undefined ? dataSet : {}) : (dataSet || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改数据集名称
         * @param {string} datasetId 数据集Id
         * @param {string} name 数据集新名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectUsingPOST: async (datasetId: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling updateProjectUsingPOST.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling updateProjectUsingPOST.');
            }
            const localVarPath = `/dataset`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (datasetId !== undefined) {
                localVarQueryParameter['datasetId'] = datasetId;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataSetApi - functional programming interface
 * @export
 */
export const DataSetApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 对接受到的Token信息进行ACK确认
         * @param {string} dataSetId dataSetId
         * @param {string} token token
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ackMonitorUsingPUT(dataSetId: string, token: string, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMonitorResultVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).ackMonitorUsingPUT(dataSetId, token, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据DataSetId申请读权限的Token
         * @param {string} dataSetId dataSetId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {boolean} [ack] ack
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyDataSetSMonitorByDSIdUsingPOST(dataSetId: string, xGdcUserid: string, ack?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMonitorResultVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).applyDataSetSMonitorByDSIdUsingPOST(dataSetId, xGdcUserid, ack, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据DataSetId和用户的身份标识申请编辑权限的Token
         * @param {string} dataSetId dataSetId
         * @param {string} uuid uuid
         * @param {string} xGdcUserid x-gdc-userid
         * @param {boolean} [ack] ack
         * @param {number} [expire] expire
         * @param {string} [token] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyDataSetXMonitorByDSIdHolderUserInfoUsingPOST(dataSetId: string, uuid: string, xGdcUserid: string, ack?: boolean, expire?: number, token?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMonitorResultVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).applyDataSetXMonitorByDSIdHolderUserInfoUsingPOST(dataSetId, uuid, xGdcUserid, ack, expire, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据DataSetId申请编辑权限的Token
         * @param {string} dataSetId dataSetId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {boolean} [ack] ack
         * @param {number} [expire] expire
         * @param {string} [token] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyDataSetXMonitorByDSIdUsingPOST(dataSetId: string, xGdcUserid: string, ack?: boolean, expire?: number, token?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMonitorResultVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).applyDataSetXMonitorByDSIdUsingPOST(dataSetId, xGdcUserid, ack, expire, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据DataSetId申请编辑权限的Token
         * @param {string} dataSetId dataSetId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {boolean} [ack] ack
         * @param {number} [expire] expire
         * @param {string} [token] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyDataSetXMonitorByDSIdV2UsingPOST(dataSetId: string, xGdcUserid: string, ack?: boolean, expire?: number, token?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMonitorResultVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).applyDataSetXMonitorByDSIdV2UsingPOST(dataSetId, xGdcUserid, ack, expire, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据DataSetId申请编辑权或者更新权的Token
         * @param {string} dataSetId dataSetId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {boolean} [ack] ack
         * @param {number} [expire] expire
         * @param {string} [token] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyDataSetXOrUMonitorByDSIdUsingPOST(dataSetId: string, xGdcUserid: string, ack?: boolean, expire?: number, token?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMonitorResultVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).applyDataSetXOrUMonitorByDSIdUsingPOST(dataSetId, xGdcUserid, ack, expire, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取上传操作的id
         * @param {string} [dsId] 数据集Id
         * @param {string} [tag] 数据标记
         * @param {string} [token] Token
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async beginUploadIdUsingGET(dsId?: string, tag?: string, token?: string, xGdcUserid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responsestring>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).beginUploadIdUsingGET(dsId, tag, token, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取上传操作的id
         * @param {string} dsId 数据集Id
         * @param {string} token Token
         * @param {string} xGdcUserid x-gdc-userid
         * @param {string} [tag] 数据标记
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async beginUploadIdV2UsingGET(dsId: string, token: string, xGdcUserid: string, tag?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responsestring>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).beginUploadIdV2UsingGET(dsId, token, xGdcUserid, tag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 数据版本检查
         * @param {string} datasetId datasetId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkDataSetVersionUsingGET(datasetId: string, version: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).checkDataSetVersionUsingGET(datasetId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 完成工作单元某版本的上传流程
         * @param {string} dsId dsId
         * @param {number} version version
         * @param {boolean} [force] 强制关闭，运营需要。工作单元上传不应该使用该参数
         * @param {boolean} [success] success
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async closeUploadUsingPOST(dsId: string, version: number, force?: boolean, success?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseboolean>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).closeUploadUsingPOST(dsId, version, force, success, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建数据集
         * @param {DataSetCreation} dataSetCreation dataSetCreation
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDataSetUsingPOST(dataSetCreation: DataSetCreation, xGdcUserid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseDataSetVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).createDataSetUsingPOST(dataSetCreation, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary createDataSetV0
         * @param {DataSetCreation} ds ds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDataSetV0UsingPUT(ds: DataSetCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSetVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).createDataSetV0UsingPUT(ds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建数据集v3,不设置默认owner
         * @param {DataSetCreation} dataSetCreation dataSetCreation
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDataSetV3UsingPOST(dataSetCreation: DataSetCreation, xGdcUserid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseDataSetVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).createDataSetV3UsingPOST(dataSetCreation, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary createVersion
         * @param {string} dsId dsId
         * @param {object} metaInfoMap metaInfoMap
         * @param {string} [sourceFile] sourceFile
         * @param {string} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVersionUsingPUT(dsId: string, metaInfoMap: object, sourceFile?: string, status?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).createVersionUsingPUT(dsId, metaInfoMap, sourceFile, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary datasetCheckAsyncTaskStatus
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datasetCheckAsyncTaskStatusUsingGET(taskId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseDatasetTask>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).datasetCheckAsyncTaskStatusUsingGET(taskId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary datasetPushAsyncBegin
         * @param {string} datasetId datasetId
         * @param {string} token token
         * @param {DatasetUploadBeginRequest} pushRequest pushRequest
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datasetPushAsyncBeginUsingPOST(datasetId: string, token: string, pushRequest: DatasetUploadBeginRequest, xGdcUserid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseDatasetUploadBeginResponse>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).datasetPushAsyncBeginUsingPOST(datasetId, token, pushRequest, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary datasetPushAsyncEnd
         * @param {string} datasetId datasetId
         * @param {string} token token
         * @param {string} xGdcUserid x-gdc-userid
         * @param {DatasetUploadEndRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datasetPushAsyncEndUsingPOST(datasetId: string, token: string, xGdcUserid: string, pushRequest: DatasetUploadEndRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responsestring>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).datasetPushAsyncEndUsingPOST(datasetId, token, xGdcUserid, pushRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary datasetPushAsync
         * @param {string} datasetId datasetId
         * @param {DatasetPushRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async datasetPushAsyncUsingPUT(datasetId: string, pushRequest: DatasetPushRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responsestring>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).datasetPushAsyncUsingPUT(datasetId, pushRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除指定的工作单元
         * @param {string} dataSetId dataSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDataSetUsingDELETE(dataSetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).deleteDataSetUsingDELETE(dataSetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 逻辑删除目录
         * @param {string} datasetId 数据集Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectUsingDELETE(datasetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).deleteProjectUsingDELETE(datasetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 提交上传操作
         * @param {number} count 元素总数
         * @param {string} datasetId 关联的数据集
         * @param {string} uploadId 上传id
         * @param {string} version 客户端数据版本号
         * @param {string} [verify] 验证文件标识
         * @param {string} [metaInfoMap] 元数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endUploadIdUsingPUT(count: number, datasetId: string, uploadId: string, version: string, verify?: string, metaInfoMap?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).endUploadIdUsingPUT(count, datasetId, uploadId, version, verify, metaInfoMap, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 提交上传操作
         * @param {number} count 元素总数
         * @param {string} datasetId 关联的数据集
         * @param {string} uploadId 上传id
         * @param {string} version 客户端数据版本号
         * @param {number} [suiteCount] 构件的数量
         * @param {string} [verify] 验证文件标识
         * @param {string} [metaInfoMap] 元数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endUploadIdV2UsingPUT(count: number, datasetId: string, uploadId: string, version: string, suiteCount?: number, verify?: string, metaInfoMap?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).endUploadIdV2UsingPUT(count, datasetId, uploadId, version, suiteCount, verify, metaInfoMap, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量获取团队下指定状态的所有工作单元
         * @param {Array<string>} teamIds teamIds
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDataSetsInTeamsUsingPOST(teamIds: Array<string>, status?: 'draft' | 'committed', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataSetVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getAllDataSetsInTeamsUsingPOST(teamIds, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量获取草稿对应的过程工作单元
         * @param {Array<string>} draftDataSetIds draftDataSetIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommittedDataSetsUsingPOST(draftDataSetIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListCommittedDataSet>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getCommittedDataSetsUsingPOST(draftDataSetIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据id获取dataset
         * @param {string} dataSetId dataSetId
         * @param {boolean} [ignoreDeleted] ignoreDeleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetByIdUsingGET(dataSetId: string, ignoreDeleted?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseDataSetVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetByIdUsingGET(dataSetId, ignoreDeleted, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据id列表批量获取工作单元
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetByIdsUsingPOST(dataSetIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataSetVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetByIdsUsingPOST(dataSetIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取团队下指定类型的工作单元
         * @param {string} teamId teamId
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetInTeamByTypeUsingGET(teamId: string, type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataSetVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetInTeamByTypeUsingGET(teamId, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getDataSetProjectSubId
         * @param {string} datasetId datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetProjectSubIdUsingGET(datasetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetProjectSubIdUsingGET(datasetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getDataSetVersions
         * @param {string} dsId dsId
         * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetVersionsUsingGET(dsId: string, onlySuccess?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VersionVO>>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetVersionsUsingGET(dsId, onlySuccess, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getDataSetVersionsWithDefaultColumns
         * @param {string} dsId dsId
         * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetVersionsWithDefaultColumnsUsingGET(dsId: string, onlySuccess?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VersionVO>>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetVersionsWithDefaultColumnsUsingGET(dsId, onlySuccess, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getDataSetsByFolder
         * @param {string} folderId folderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetsByFolderUsingGET(folderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DataSetVO>>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetsByFolderUsingGET(folderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据id列表批量获取工作单元
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetsByIdsUsingPOST(dataSetIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataSetVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetsByIdsUsingPOST(dataSetIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取个人设计下的工作单元
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetsByProjectAndOwnerUsingGET(projectId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataSetOfOwner>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetsByProjectAndOwnerUsingGET(projectId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取个人设计下的工作单元v2
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetsByProjectAndOwnerV2UsingGET(projectId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataSetVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetsByProjectAndOwnerV2UsingGET(projectId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 按照专业获取工作单元
         * @param {string} specialtyId specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetsBySpecialtyUsingGET(specialtyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataSetVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetsBySpecialtyUsingGET(specialtyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目下指定类型的数据集
         * @param {string} projectId projectId
         * @param {string} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetsByTypeUsingGET(projectId: string, type: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataSetVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetsByTypeUsingGET(projectId, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目下指定状态的工作单元
         * @param {string} projectId projectId
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetsInProjectByStatusUsingGET(projectId: string, status?: 'draft' | 'committed', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataSetVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetsInProjectByStatusUsingGET(projectId, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取团队下指定状态的工作单元
         * @param {string} teamId teamId
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetsInTeamByStatusUsingGET(teamId: string, status?: 'draft' | 'committed', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataSetVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetsInTeamByStatusUsingGET(teamId, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取团队下指定类型的工作单元
         * @param {string} teamId teamId
         * @param {'std' | 'cloudify' | 'gap' | 'rvt' | 'bmv' | 'pdf' | 'dwg' | 'docx' | 'jpg' | 'gac' | 'all'} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetsInTeamByTypeUsingGET(teamId: string, type?: 'std' | 'cloudify' | 'gap' | 'rvt' | 'bmv' | 'pdf' | 'dwg' | 'docx' | 'jpg' | 'gac' | 'all', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataSetVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetsInTeamByTypeUsingGET(teamId, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量获取团队下指定状态的工作单元
         * @param {Array<string>} teamIds teamIds
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetsInTeamsUsingPOST(teamIds: Array<string>, status?: 'draft' | 'committed', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataSetVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetsInTeamsUsingPOST(teamIds, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量获取团队下指定状态自己负责的工作单元v2
         * @param {Array<string>} teamIds teamIds
         * @param {'draft' | 'committed'} [status] status
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetsInTeamsV2UsingPOST(teamIds: Array<string>, status?: 'draft' | 'committed', xGdcUserid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataSetVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetsInTeamsV2UsingPOST(teamIds, status, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目下所有工作单元的使用空间
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetsSizeByProjectUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responselong>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetsSizeByProjectUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getDataSets
         * @param {string} specialtyId specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSetsUsingGET(specialtyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataSet>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDataSetsUsingGET(specialtyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取最工作单元的指定版本Version信息并按mvd来过滤字段
         * @param {string} dsId dsId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetStandardCodeVersionUsingGET(dsId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDatasetStandardCodeVersionUsingGET(dsId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取Dataset
         * @param {string} datasetId 获取数据集信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetUsingGET(datasetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseDataSet>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDatasetUsingGET(datasetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取工作单元的指定状态的版本
         * @param {string} dataSetId dataSetId
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetVersionsByStatusUsingGET(dataSetId: string, onlySuccess?: boolean, status?: 'draft' | 'committed', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListVersionVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDatasetVersionsByStatusUsingGET(dataSetId, onlySuccess, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量获取工作单元的指定状态的版本
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetsVersionsByStatusAndColumnsUsingPOST(dataSetIds: Array<string>, onlySuccess?: boolean, status?: 'draft' | 'committed', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListVersionVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDatasetsVersionsByStatusAndColumnsUsingPOST(dataSetIds, onlySuccess, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 按照mvd方式，批量获取工作单元的指定状态的版本
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {string} [mvd] mvd
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetsVersionsByStatusMVDUsingPOST(dataSetIds: Array<string>, mvd?: string, onlySuccess?: boolean, status?: 'draft' | 'committed', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListVersionVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDatasetsVersionsByStatusMVDUsingPOST(dataSetIds, mvd, onlySuccess, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量获取工作单元的指定状态的版本
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetsVersionsByStatusUsingPOST(dataSetIds: Array<string>, onlySuccess?: boolean, status?: 'draft' | 'committed', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListVersionVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getDatasetsVersionsByStatusUsingPOST(dataSetIds, onlySuccess, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getLatestVersion
         * @param {string} dsId dsId
         * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestVersionUsingGET(dsId: string, onlySuccess?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getLatestVersionUsingGET(dsId, onlySuccess, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取最新的工作单元的Version信息并按mvd来过滤字段(Deprecated，被v3版本替换)
         * @param {string} dsId dsId
         * @param {string} [mvd] mvd
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestVersionWithMvdUsingGET(dsId: string, mvd?: string, onlySuccess?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getLatestVersionWithMvdUsingGET(dsId, mvd, onlySuccess, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取最新的工作单元的Version信息并按mvd来过滤字段(不会填充RawData和RefInfo字段)
         * @param {string} dsId dsId
         * @param {string} [mvd] mvd
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestVersionWithMvdWithoutRawDataAndRefInfoUsingGET(dsId: string, mvd?: string, onlySuccess?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getLatestVersionWithMvdWithoutRawDataAndRefInfoUsingGET(dsId, mvd, onlySuccess, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获得Version的Block数据的MD5
         * @param {string} datasetId datasetId
         * @param {Array<string>} datasetFilePaths datasetFilePaths
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMD5OfVersionBlockFilesUsingPOST(datasetId: string, datasetFilePaths: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDatasetBlockFile>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getMD5OfVersionBlockFilesUsingPOST(datasetId, datasetFilePaths, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取数据集指定版本的目录树
         * @param {string} dataSetId dataSetId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModelTreeUsingGET(dataSetId: string, version: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTreeNode>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getModelTreeUsingGET(dataSetId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 产生可供下载的version的Block数据的签名URL
         * @param {string} datasetId datasetId
         * @param {Array<string>} datasetFilePaths datasetFilePaths
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSASOfVersionBlockFilesUsingPOST(datasetId: string, datasetFilePaths: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDatasetBlockFile>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getSASOfVersionBlockFilesUsingPOST(datasetId, datasetFilePaths, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取数据集指定版本中的标准编码列表
         * @param {number} versionId versionId
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStandardCodeCollUsingGET(versionId: number, xGdcUserid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListStandardCodeVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getStandardCodeCollUsingGET(versionId, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getVersion
         * @param {string} dsId dsId
         * @param {number} dsVersion dsVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVersionUsingGET(dsId: string, dsVersion: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Version>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getVersionUsingGET(dsId, dsVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取最工作单元的指定版本Version信息并按mvd来过滤字段(Deprecated，被v3版本替换)
         * @param {string} dsId dsId
         * @param {number} dsVersion dsVersion
         * @param {string} [mvd] mvd
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVersionWithMvdUsingGET(dsId: string, dsVersion: number, mvd?: string, onlySuccess?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getVersionWithMvdUsingGET(dsId, dsVersion, mvd, onlySuccess, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取最工作单元的指定版本Version信息并按mvd来过滤字段(不会填充RawData和RefInfo字段)
         * @param {string} dsId dsId
         * @param {number} dsVersion dsVersion
         * @param {string} [mvd] mvd
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVersionWithMvdWithoutRawDataAndRefInfoUsingGET(dsId: string, dsVersion: number, mvd?: string, onlySuccess?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).getVersionWithMvdWithoutRawDataAndRefInfoUsingGET(dsId, dsVersion, mvd, onlySuccess, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取工作单元上的编辑Token
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDataSetXMonitorByDSIdsUsingPOST(dataSetIds: Array<string>, xGdcUserid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDataSetMonitorVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).listDataSetXMonitorByDSIdsUsingPOST(dataSetIds, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 将指定版本的指定的version的状态设置为publish
         * @param {string} dsId dsId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markPublishUsingPOST(dsId: string, version: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseboolean>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).markPublishUsingPOST(dsId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary moveToFolder
         * @param {string} dsId dsId
         * @param {string} newFolderId newFolderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveToFolderUsingPOST(dsId: string, newFolderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).moveToFolderUsingPOST(dsId, newFolderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 产生可供上传的version的Block数据的签名URL
         * @param {string} datasetId datasetId
         * @param {Array<string>} datasetFilePaths datasetFilePaths
         * @param {boolean} [force] 是否强制覆盖，默认false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newVersionBlockFilesUsingPUT(datasetId: string, datasetFilePaths: Array<string>, force?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListDatasetBlockFile>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).newVersionBlockFilesUsingPUT(datasetId, datasetFilePaths, force, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 提升工作单元指定版本为最新版
         * @param {string} dsId dsId
         * @param {number} version version
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promoteVersion2UsingPOST(dsId: string, version: number, xGdcUserid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVersionVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).promoteVersion2UsingPOST(dsId, version, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 提升工作单元指定版本为最新版
         * @param {string} dsId dsId
         * @param {number} version version
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promoteVersionUsingPOST(dsId: string, version: number, xGdcUserid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVersionVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).promoteVersionUsingPOST(dsId, version, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 释放Token资源(客户端使用)
         * @param {string} token 后台分配的Token
         * @param {string} xGdcUserid x-gdc-userid
         * @param {string} [force] false表示如果关联的数据版本存在修改操作尚未完成，不执行释放操作
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releaseDataSetMonitorByTokenUsingPUT(token: string, xGdcUserid: string, force?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMonitorResultVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).releaseDataSetMonitorByTokenUsingPUT(token, xGdcUserid, force, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据DataSet释放Token资源(运维使用)
         * @param {string} dataSetId dataSetId
         * @param {boolean} [force] force
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async releaseDataSetXMonitorByDSIdUsingPUT(dataSetId: string, force?: boolean, xGdcUserid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMonitorResultVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).releaseDataSetXMonitorByDSIdUsingPUT(dataSetId, force, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Token续签
         * @param {number} expire expire
         * @param {string} token token
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async renewalDataSetXMonitorByTokenUsingPOST(expire: number, token: string, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMonitorResultVO>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).renewalDataSetXMonitorByTokenUsingPOST(expire, token, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 为工作单元设置一个版本号
         * @param {string} appVersion appVersion
         * @param {string} dsId dsId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAppVersionForDatasetUsingPUT(appVersion: string, dsId: string, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).setAppVersionForDatasetUsingPUT(appVersion, dsId, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateDatSetOwner
         * @param {string} dataSetId dataSetId
         * @param {string} [ownerId] ownerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDatSetOwnerUsingPUT(dataSetId: string, ownerId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).updateDatSetOwnerUsingPUT(dataSetId, ownerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新工作单元
         * @param {string} dataSetId dataSetId
         * @param {DataSetCreation} dataset dataset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDataSetByIdUsingPUT(dataSetId: string, dataset: DataSetCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).updateDataSetByIdUsingPUT(dataSetId, dataset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateDataSet
         * @param {string} datasetId datasetId
         * @param {DataSet} dataSet dataSet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDataSetUsingPUT(datasetId: string, dataSet: DataSet, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).updateDataSetUsingPUT(datasetId, dataSet, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改数据集名称
         * @param {string} datasetId 数据集Id
         * @param {string} name 数据集新名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectUsingPOST(datasetId: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await DataSetApiAxiosParamCreator(configuration).updateProjectUsingPOST(datasetId, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DataSetApi - factory interface
 * @export
 */
export const DataSetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 对接受到的Token信息进行ACK确认
         * @param {string} dataSetId dataSetId
         * @param {string} token token
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackMonitorUsingPUT(dataSetId: string, token: string, xGdcUserid: string, options?: any): AxiosPromise<ResponseMonitorResultVO> {
            return DataSetApiFp(configuration).ackMonitorUsingPUT(dataSetId, token, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据DataSetId申请读权限的Token
         * @param {string} dataSetId dataSetId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {boolean} [ack] ack
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyDataSetSMonitorByDSIdUsingPOST(dataSetId: string, xGdcUserid: string, ack?: boolean, options?: any): AxiosPromise<ResponseMonitorResultVO> {
            return DataSetApiFp(configuration).applyDataSetSMonitorByDSIdUsingPOST(dataSetId, xGdcUserid, ack, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据DataSetId和用户的身份标识申请编辑权限的Token
         * @param {string} dataSetId dataSetId
         * @param {string} uuid uuid
         * @param {string} xGdcUserid x-gdc-userid
         * @param {boolean} [ack] ack
         * @param {number} [expire] expire
         * @param {string} [token] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyDataSetXMonitorByDSIdHolderUserInfoUsingPOST(dataSetId: string, uuid: string, xGdcUserid: string, ack?: boolean, expire?: number, token?: string, options?: any): AxiosPromise<ResponseMonitorResultVO> {
            return DataSetApiFp(configuration).applyDataSetXMonitorByDSIdHolderUserInfoUsingPOST(dataSetId, uuid, xGdcUserid, ack, expire, token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据DataSetId申请编辑权限的Token
         * @param {string} dataSetId dataSetId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {boolean} [ack] ack
         * @param {number} [expire] expire
         * @param {string} [token] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyDataSetXMonitorByDSIdUsingPOST(dataSetId: string, xGdcUserid: string, ack?: boolean, expire?: number, token?: string, options?: any): AxiosPromise<ResponseMonitorResultVO> {
            return DataSetApiFp(configuration).applyDataSetXMonitorByDSIdUsingPOST(dataSetId, xGdcUserid, ack, expire, token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据DataSetId申请编辑权限的Token
         * @param {string} dataSetId dataSetId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {boolean} [ack] ack
         * @param {number} [expire] expire
         * @param {string} [token] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyDataSetXMonitorByDSIdV2UsingPOST(dataSetId: string, xGdcUserid: string, ack?: boolean, expire?: number, token?: string, options?: any): AxiosPromise<ResponseMonitorResultVO> {
            return DataSetApiFp(configuration).applyDataSetXMonitorByDSIdV2UsingPOST(dataSetId, xGdcUserid, ack, expire, token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据DataSetId申请编辑权或者更新权的Token
         * @param {string} dataSetId dataSetId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {boolean} [ack] ack
         * @param {number} [expire] expire
         * @param {string} [token] token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyDataSetXOrUMonitorByDSIdUsingPOST(dataSetId: string, xGdcUserid: string, ack?: boolean, expire?: number, token?: string, options?: any): AxiosPromise<ResponseMonitorResultVO> {
            return DataSetApiFp(configuration).applyDataSetXOrUMonitorByDSIdUsingPOST(dataSetId, xGdcUserid, ack, expire, token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取上传操作的id
         * @param {string} [dsId] 数据集Id
         * @param {string} [tag] 数据标记
         * @param {string} [token] Token
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beginUploadIdUsingGET(dsId?: string, tag?: string, token?: string, xGdcUserid?: string, options?: any): AxiosPromise<Responsestring> {
            return DataSetApiFp(configuration).beginUploadIdUsingGET(dsId, tag, token, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取上传操作的id
         * @param {string} dsId 数据集Id
         * @param {string} token Token
         * @param {string} xGdcUserid x-gdc-userid
         * @param {string} [tag] 数据标记
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beginUploadIdV2UsingGET(dsId: string, token: string, xGdcUserid: string, tag?: string, options?: any): AxiosPromise<Responsestring> {
            return DataSetApiFp(configuration).beginUploadIdV2UsingGET(dsId, token, xGdcUserid, tag, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 数据版本检查
         * @param {string} datasetId datasetId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDataSetVersionUsingGET(datasetId: string, version: number, options?: any): AxiosPromise<ResponseVoid> {
            return DataSetApiFp(configuration).checkDataSetVersionUsingGET(datasetId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 完成工作单元某版本的上传流程
         * @param {string} dsId dsId
         * @param {number} version version
         * @param {boolean} [force] 强制关闭，运营需要。工作单元上传不应该使用该参数
         * @param {boolean} [success] success
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeUploadUsingPOST(dsId: string, version: number, force?: boolean, success?: boolean, options?: any): AxiosPromise<Responseboolean> {
            return DataSetApiFp(configuration).closeUploadUsingPOST(dsId, version, force, success, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建数据集
         * @param {DataSetCreation} dataSetCreation dataSetCreation
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDataSetUsingPOST(dataSetCreation: DataSetCreation, xGdcUserid?: string, options?: any): AxiosPromise<ResponseDataSetVO> {
            return DataSetApiFp(configuration).createDataSetUsingPOST(dataSetCreation, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createDataSetV0
         * @param {DataSetCreation} ds ds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDataSetV0UsingPUT(ds: DataSetCreation, options?: any): AxiosPromise<DataSetVO> {
            return DataSetApiFp(configuration).createDataSetV0UsingPUT(ds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建数据集v3,不设置默认owner
         * @param {DataSetCreation} dataSetCreation dataSetCreation
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDataSetV3UsingPOST(dataSetCreation: DataSetCreation, xGdcUserid?: string, options?: any): AxiosPromise<ResponseDataSetVO> {
            return DataSetApiFp(configuration).createDataSetV3UsingPOST(dataSetCreation, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createVersion
         * @param {string} dsId dsId
         * @param {object} metaInfoMap metaInfoMap
         * @param {string} [sourceFile] sourceFile
         * @param {string} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVersionUsingPUT(dsId: string, metaInfoMap: object, sourceFile?: string, status?: string, options?: any): AxiosPromise<VersionVO> {
            return DataSetApiFp(configuration).createVersionUsingPUT(dsId, metaInfoMap, sourceFile, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary datasetCheckAsyncTaskStatus
         * @param {string} taskId taskId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetCheckAsyncTaskStatusUsingGET(taskId: string, options?: any): AxiosPromise<ResponseDatasetTask> {
            return DataSetApiFp(configuration).datasetCheckAsyncTaskStatusUsingGET(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary datasetPushAsyncBegin
         * @param {string} datasetId datasetId
         * @param {string} token token
         * @param {DatasetUploadBeginRequest} pushRequest pushRequest
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetPushAsyncBeginUsingPOST(datasetId: string, token: string, pushRequest: DatasetUploadBeginRequest, xGdcUserid?: string, options?: any): AxiosPromise<ResponseDatasetUploadBeginResponse> {
            return DataSetApiFp(configuration).datasetPushAsyncBeginUsingPOST(datasetId, token, pushRequest, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary datasetPushAsyncEnd
         * @param {string} datasetId datasetId
         * @param {string} token token
         * @param {string} xGdcUserid x-gdc-userid
         * @param {DatasetUploadEndRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetPushAsyncEndUsingPOST(datasetId: string, token: string, xGdcUserid: string, pushRequest: DatasetUploadEndRequest, options?: any): AxiosPromise<Responsestring> {
            return DataSetApiFp(configuration).datasetPushAsyncEndUsingPOST(datasetId, token, xGdcUserid, pushRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary datasetPushAsync
         * @param {string} datasetId datasetId
         * @param {DatasetPushRequest} pushRequest pushRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetPushAsyncUsingPUT(datasetId: string, pushRequest: DatasetPushRequest, options?: any): AxiosPromise<Responsestring> {
            return DataSetApiFp(configuration).datasetPushAsyncUsingPUT(datasetId, pushRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除指定的工作单元
         * @param {string} dataSetId dataSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataSetUsingDELETE(dataSetId: string, options?: any): AxiosPromise<ResponseVoid> {
            return DataSetApiFp(configuration).deleteDataSetUsingDELETE(dataSetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 逻辑删除目录
         * @param {string} datasetId 数据集Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectUsingDELETE(datasetId: string, options?: any): AxiosPromise<ResponseVoid> {
            return DataSetApiFp(configuration).deleteProjectUsingDELETE(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 提交上传操作
         * @param {number} count 元素总数
         * @param {string} datasetId 关联的数据集
         * @param {string} uploadId 上传id
         * @param {string} version 客户端数据版本号
         * @param {string} [verify] 验证文件标识
         * @param {string} [metaInfoMap] 元数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endUploadIdUsingPUT(count: number, datasetId: string, uploadId: string, version: string, verify?: string, metaInfoMap?: string, options?: any): AxiosPromise<Responseint> {
            return DataSetApiFp(configuration).endUploadIdUsingPUT(count, datasetId, uploadId, version, verify, metaInfoMap, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 提交上传操作
         * @param {number} count 元素总数
         * @param {string} datasetId 关联的数据集
         * @param {string} uploadId 上传id
         * @param {string} version 客户端数据版本号
         * @param {number} [suiteCount] 构件的数量
         * @param {string} [verify] 验证文件标识
         * @param {string} [metaInfoMap] 元数据
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endUploadIdV2UsingPUT(count: number, datasetId: string, uploadId: string, version: string, suiteCount?: number, verify?: string, metaInfoMap?: string, options?: any): AxiosPromise<Responseint> {
            return DataSetApiFp(configuration).endUploadIdV2UsingPUT(count, datasetId, uploadId, version, suiteCount, verify, metaInfoMap, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量获取团队下指定状态的所有工作单元
         * @param {Array<string>} teamIds teamIds
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDataSetsInTeamsUsingPOST(teamIds: Array<string>, status?: 'draft' | 'committed', options?: any): AxiosPromise<ResponseListDataSetVO> {
            return DataSetApiFp(configuration).getAllDataSetsInTeamsUsingPOST(teamIds, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量获取草稿对应的过程工作单元
         * @param {Array<string>} draftDataSetIds draftDataSetIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommittedDataSetsUsingPOST(draftDataSetIds: Array<string>, options?: any): AxiosPromise<ResponseListCommittedDataSet> {
            return DataSetApiFp(configuration).getCommittedDataSetsUsingPOST(draftDataSetIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据id获取dataset
         * @param {string} dataSetId dataSetId
         * @param {boolean} [ignoreDeleted] ignoreDeleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetByIdUsingGET(dataSetId: string, ignoreDeleted?: boolean, options?: any): AxiosPromise<ResponseDataSetVO> {
            return DataSetApiFp(configuration).getDataSetByIdUsingGET(dataSetId, ignoreDeleted, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据id列表批量获取工作单元
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetByIdsUsingPOST(dataSetIds: Array<string>, options?: any): AxiosPromise<ResponseListDataSetVO> {
            return DataSetApiFp(configuration).getDataSetByIdsUsingPOST(dataSetIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取团队下指定类型的工作单元
         * @param {string} teamId teamId
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetInTeamByTypeUsingGET(teamId: string, type?: string, options?: any): AxiosPromise<ResponseListDataSetVO> {
            return DataSetApiFp(configuration).getDataSetInTeamByTypeUsingGET(teamId, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getDataSetProjectSubId
         * @param {string} datasetId datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetProjectSubIdUsingGET(datasetId: string, options?: any): AxiosPromise<number> {
            return DataSetApiFp(configuration).getDataSetProjectSubIdUsingGET(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getDataSetVersions
         * @param {string} dsId dsId
         * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetVersionsUsingGET(dsId: string, onlySuccess?: boolean, options?: any): AxiosPromise<Array<VersionVO>> {
            return DataSetApiFp(configuration).getDataSetVersionsUsingGET(dsId, onlySuccess, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getDataSetVersionsWithDefaultColumns
         * @param {string} dsId dsId
         * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetVersionsWithDefaultColumnsUsingGET(dsId: string, onlySuccess?: boolean, options?: any): AxiosPromise<Array<VersionVO>> {
            return DataSetApiFp(configuration).getDataSetVersionsWithDefaultColumnsUsingGET(dsId, onlySuccess, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getDataSetsByFolder
         * @param {string} folderId folderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsByFolderUsingGET(folderId: string, options?: any): AxiosPromise<Array<DataSetVO>> {
            return DataSetApiFp(configuration).getDataSetsByFolderUsingGET(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据id列表批量获取工作单元
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsByIdsUsingPOST(dataSetIds: Array<string>, options?: any): AxiosPromise<ResponseListDataSetVO> {
            return DataSetApiFp(configuration).getDataSetsByIdsUsingPOST(dataSetIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取个人设计下的工作单元
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsByProjectAndOwnerUsingGET(projectId: string, userId: string, options?: any): AxiosPromise<ResponseListDataSetOfOwner> {
            return DataSetApiFp(configuration).getDataSetsByProjectAndOwnerUsingGET(projectId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取个人设计下的工作单元v2
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsByProjectAndOwnerV2UsingGET(projectId: string, userId: string, options?: any): AxiosPromise<ResponseListDataSetVO> {
            return DataSetApiFp(configuration).getDataSetsByProjectAndOwnerV2UsingGET(projectId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 按照专业获取工作单元
         * @param {string} specialtyId specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsBySpecialtyUsingGET(specialtyId: string, options?: any): AxiosPromise<ResponseListDataSetVO> {
            return DataSetApiFp(configuration).getDataSetsBySpecialtyUsingGET(specialtyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目下指定类型的数据集
         * @param {string} projectId projectId
         * @param {string} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsByTypeUsingGET(projectId: string, type: string, options?: any): AxiosPromise<ResponseListDataSetVO> {
            return DataSetApiFp(configuration).getDataSetsByTypeUsingGET(projectId, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目下指定状态的工作单元
         * @param {string} projectId projectId
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsInProjectByStatusUsingGET(projectId: string, status?: 'draft' | 'committed', options?: any): AxiosPromise<ResponseListDataSetVO> {
            return DataSetApiFp(configuration).getDataSetsInProjectByStatusUsingGET(projectId, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取团队下指定状态的工作单元
         * @param {string} teamId teamId
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsInTeamByStatusUsingGET(teamId: string, status?: 'draft' | 'committed', options?: any): AxiosPromise<ResponseListDataSetVO> {
            return DataSetApiFp(configuration).getDataSetsInTeamByStatusUsingGET(teamId, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取团队下指定类型的工作单元
         * @param {string} teamId teamId
         * @param {'std' | 'cloudify' | 'gap' | 'rvt' | 'bmv' | 'pdf' | 'dwg' | 'docx' | 'jpg' | 'gac' | 'all'} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsInTeamByTypeUsingGET(teamId: string, type?: 'std' | 'cloudify' | 'gap' | 'rvt' | 'bmv' | 'pdf' | 'dwg' | 'docx' | 'jpg' | 'gac' | 'all', options?: any): AxiosPromise<ResponseListDataSetVO> {
            return DataSetApiFp(configuration).getDataSetsInTeamByTypeUsingGET(teamId, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量获取团队下指定状态的工作单元
         * @param {Array<string>} teamIds teamIds
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsInTeamsUsingPOST(teamIds: Array<string>, status?: 'draft' | 'committed', options?: any): AxiosPromise<ResponseListDataSetVO> {
            return DataSetApiFp(configuration).getDataSetsInTeamsUsingPOST(teamIds, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量获取团队下指定状态自己负责的工作单元v2
         * @param {Array<string>} teamIds teamIds
         * @param {'draft' | 'committed'} [status] status
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsInTeamsV2UsingPOST(teamIds: Array<string>, status?: 'draft' | 'committed', xGdcUserid?: string, options?: any): AxiosPromise<ResponseListDataSetVO> {
            return DataSetApiFp(configuration).getDataSetsInTeamsV2UsingPOST(teamIds, status, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目下所有工作单元的使用空间
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsSizeByProjectUsingGET(projectId: string, options?: any): AxiosPromise<Responselong> {
            return DataSetApiFp(configuration).getDataSetsSizeByProjectUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getDataSets
         * @param {string} specialtyId specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSetsUsingGET(specialtyId: string, options?: any): AxiosPromise<ResponseListDataSet> {
            return DataSetApiFp(configuration).getDataSetsUsingGET(specialtyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取最工作单元的指定版本Version信息并按mvd来过滤字段
         * @param {string} dsId dsId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetStandardCodeVersionUsingGET(dsId: string, options?: any): AxiosPromise<number> {
            return DataSetApiFp(configuration).getDatasetStandardCodeVersionUsingGET(dsId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取Dataset
         * @param {string} datasetId 获取数据集信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetUsingGET(datasetId: string, options?: any): AxiosPromise<ResponseDataSet> {
            return DataSetApiFp(configuration).getDatasetUsingGET(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取工作单元的指定状态的版本
         * @param {string} dataSetId dataSetId
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetVersionsByStatusUsingGET(dataSetId: string, onlySuccess?: boolean, status?: 'draft' | 'committed', options?: any): AxiosPromise<ResponseListVersionVO> {
            return DataSetApiFp(configuration).getDatasetVersionsByStatusUsingGET(dataSetId, onlySuccess, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量获取工作单元的指定状态的版本
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetsVersionsByStatusAndColumnsUsingPOST(dataSetIds: Array<string>, onlySuccess?: boolean, status?: 'draft' | 'committed', options?: any): AxiosPromise<ResponseListVersionVO> {
            return DataSetApiFp(configuration).getDatasetsVersionsByStatusAndColumnsUsingPOST(dataSetIds, onlySuccess, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 按照mvd方式，批量获取工作单元的指定状态的版本
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {string} [mvd] mvd
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetsVersionsByStatusMVDUsingPOST(dataSetIds: Array<string>, mvd?: string, onlySuccess?: boolean, status?: 'draft' | 'committed', options?: any): AxiosPromise<ResponseListVersionVO> {
            return DataSetApiFp(configuration).getDatasetsVersionsByStatusMVDUsingPOST(dataSetIds, mvd, onlySuccess, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量获取工作单元的指定状态的版本
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {'draft' | 'committed'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetsVersionsByStatusUsingPOST(dataSetIds: Array<string>, onlySuccess?: boolean, status?: 'draft' | 'committed', options?: any): AxiosPromise<ResponseListVersionVO> {
            return DataSetApiFp(configuration).getDatasetsVersionsByStatusUsingPOST(dataSetIds, onlySuccess, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getLatestVersion
         * @param {string} dsId dsId
         * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestVersionUsingGET(dsId: string, onlySuccess?: boolean, options?: any): AxiosPromise<VersionVO> {
            return DataSetApiFp(configuration).getLatestVersionUsingGET(dsId, onlySuccess, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取最新的工作单元的Version信息并按mvd来过滤字段(Deprecated，被v3版本替换)
         * @param {string} dsId dsId
         * @param {string} [mvd] mvd
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestVersionWithMvdUsingGET(dsId: string, mvd?: string, onlySuccess?: boolean, options?: any): AxiosPromise<VersionVO> {
            return DataSetApiFp(configuration).getLatestVersionWithMvdUsingGET(dsId, mvd, onlySuccess, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取最新的工作单元的Version信息并按mvd来过滤字段(不会填充RawData和RefInfo字段)
         * @param {string} dsId dsId
         * @param {string} [mvd] mvd
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestVersionWithMvdWithoutRawDataAndRefInfoUsingGET(dsId: string, mvd?: string, onlySuccess?: boolean, options?: any): AxiosPromise<VersionVO> {
            return DataSetApiFp(configuration).getLatestVersionWithMvdWithoutRawDataAndRefInfoUsingGET(dsId, mvd, onlySuccess, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获得Version的Block数据的MD5
         * @param {string} datasetId datasetId
         * @param {Array<string>} datasetFilePaths datasetFilePaths
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMD5OfVersionBlockFilesUsingPOST(datasetId: string, datasetFilePaths: Array<string>, options?: any): AxiosPromise<ResponseListDatasetBlockFile> {
            return DataSetApiFp(configuration).getMD5OfVersionBlockFilesUsingPOST(datasetId, datasetFilePaths, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取数据集指定版本的目录树
         * @param {string} dataSetId dataSetId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelTreeUsingGET(dataSetId: string, version: number, options?: any): AxiosPromise<ResponseTreeNode> {
            return DataSetApiFp(configuration).getModelTreeUsingGET(dataSetId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 产生可供下载的version的Block数据的签名URL
         * @param {string} datasetId datasetId
         * @param {Array<string>} datasetFilePaths datasetFilePaths
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSASOfVersionBlockFilesUsingPOST(datasetId: string, datasetFilePaths: Array<string>, options?: any): AxiosPromise<ResponseListDatasetBlockFile> {
            return DataSetApiFp(configuration).getSASOfVersionBlockFilesUsingPOST(datasetId, datasetFilePaths, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取数据集指定版本中的标准编码列表
         * @param {number} versionId versionId
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStandardCodeCollUsingGET(versionId: number, xGdcUserid?: string, options?: any): AxiosPromise<ResponseListStandardCodeVO> {
            return DataSetApiFp(configuration).getStandardCodeCollUsingGET(versionId, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getVersion
         * @param {string} dsId dsId
         * @param {number} dsVersion dsVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersionUsingGET(dsId: string, dsVersion: number, options?: any): AxiosPromise<Version> {
            return DataSetApiFp(configuration).getVersionUsingGET(dsId, dsVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取最工作单元的指定版本Version信息并按mvd来过滤字段(Deprecated，被v3版本替换)
         * @param {string} dsId dsId
         * @param {number} dsVersion dsVersion
         * @param {string} [mvd] mvd
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersionWithMvdUsingGET(dsId: string, dsVersion: number, mvd?: string, onlySuccess?: boolean, options?: any): AxiosPromise<VersionVO> {
            return DataSetApiFp(configuration).getVersionWithMvdUsingGET(dsId, dsVersion, mvd, onlySuccess, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取最工作单元的指定版本Version信息并按mvd来过滤字段(不会填充RawData和RefInfo字段)
         * @param {string} dsId dsId
         * @param {number} dsVersion dsVersion
         * @param {string} [mvd] mvd
         * @param {boolean} [onlySuccess] onlySuccess
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersionWithMvdWithoutRawDataAndRefInfoUsingGET(dsId: string, dsVersion: number, mvd?: string, onlySuccess?: boolean, options?: any): AxiosPromise<VersionVO> {
            return DataSetApiFp(configuration).getVersionWithMvdWithoutRawDataAndRefInfoUsingGET(dsId, dsVersion, mvd, onlySuccess, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取工作单元上的编辑Token
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDataSetXMonitorByDSIdsUsingPOST(dataSetIds: Array<string>, xGdcUserid?: string, options?: any): AxiosPromise<ResponseListDataSetMonitorVO> {
            return DataSetApiFp(configuration).listDataSetXMonitorByDSIdsUsingPOST(dataSetIds, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 将指定版本的指定的version的状态设置为publish
         * @param {string} dsId dsId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markPublishUsingPOST(dsId: string, version: number, options?: any): AxiosPromise<Responseboolean> {
            return DataSetApiFp(configuration).markPublishUsingPOST(dsId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary moveToFolder
         * @param {string} dsId dsId
         * @param {string} newFolderId newFolderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveToFolderUsingPOST(dsId: string, newFolderId: string, options?: any): AxiosPromise<boolean> {
            return DataSetApiFp(configuration).moveToFolderUsingPOST(dsId, newFolderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 产生可供上传的version的Block数据的签名URL
         * @param {string} datasetId datasetId
         * @param {Array<string>} datasetFilePaths datasetFilePaths
         * @param {boolean} [force] 是否强制覆盖，默认false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newVersionBlockFilesUsingPUT(datasetId: string, datasetFilePaths: Array<string>, force?: boolean, options?: any): AxiosPromise<ResponseListDatasetBlockFile> {
            return DataSetApiFp(configuration).newVersionBlockFilesUsingPUT(datasetId, datasetFilePaths, force, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 提升工作单元指定版本为最新版
         * @param {string} dsId dsId
         * @param {number} version version
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoteVersion2UsingPOST(dsId: string, version: number, xGdcUserid?: string, options?: any): AxiosPromise<ResponseVersionVO> {
            return DataSetApiFp(configuration).promoteVersion2UsingPOST(dsId, version, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 提升工作单元指定版本为最新版
         * @param {string} dsId dsId
         * @param {number} version version
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoteVersionUsingPOST(dsId: string, version: number, xGdcUserid?: string, options?: any): AxiosPromise<ResponseVersionVO> {
            return DataSetApiFp(configuration).promoteVersionUsingPOST(dsId, version, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 释放Token资源(客户端使用)
         * @param {string} token 后台分配的Token
         * @param {string} xGdcUserid x-gdc-userid
         * @param {string} [force] false表示如果关联的数据版本存在修改操作尚未完成，不执行释放操作
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releaseDataSetMonitorByTokenUsingPUT(token: string, xGdcUserid: string, force?: string, options?: any): AxiosPromise<ResponseMonitorResultVO> {
            return DataSetApiFp(configuration).releaseDataSetMonitorByTokenUsingPUT(token, xGdcUserid, force, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据DataSet释放Token资源(运维使用)
         * @param {string} dataSetId dataSetId
         * @param {boolean} [force] force
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releaseDataSetXMonitorByDSIdUsingPUT(dataSetId: string, force?: boolean, xGdcUserid?: string, options?: any): AxiosPromise<ResponseMonitorResultVO> {
            return DataSetApiFp(configuration).releaseDataSetXMonitorByDSIdUsingPUT(dataSetId, force, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Token续签
         * @param {number} expire expire
         * @param {string} token token
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renewalDataSetXMonitorByTokenUsingPOST(expire: number, token: string, xGdcUserid: string, options?: any): AxiosPromise<ResponseMonitorResultVO> {
            return DataSetApiFp(configuration).renewalDataSetXMonitorByTokenUsingPOST(expire, token, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 为工作单元设置一个版本号
         * @param {string} appVersion appVersion
         * @param {string} dsId dsId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAppVersionForDatasetUsingPUT(appVersion: string, dsId: string, xGdcUserid: string, options?: any): AxiosPromise<ResponseVoid> {
            return DataSetApiFp(configuration).setAppVersionForDatasetUsingPUT(appVersion, dsId, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateDatSetOwner
         * @param {string} dataSetId dataSetId
         * @param {string} [ownerId] ownerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDatSetOwnerUsingPUT(dataSetId: string, ownerId?: string, options?: any): AxiosPromise<ResponseVoid> {
            return DataSetApiFp(configuration).updateDatSetOwnerUsingPUT(dataSetId, ownerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新工作单元
         * @param {string} dataSetId dataSetId
         * @param {DataSetCreation} dataset dataset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDataSetByIdUsingPUT(dataSetId: string, dataset: DataSetCreation, options?: any): AxiosPromise<ResponseVoid> {
            return DataSetApiFp(configuration).updateDataSetByIdUsingPUT(dataSetId, dataset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateDataSet
         * @param {string} datasetId datasetId
         * @param {DataSet} dataSet dataSet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDataSetUsingPUT(datasetId: string, dataSet: DataSet, options?: any): AxiosPromise<ResponseVoid> {
            return DataSetApiFp(configuration).updateDataSetUsingPUT(datasetId, dataSet, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改数据集名称
         * @param {string} datasetId 数据集Id
         * @param {string} name 数据集新名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectUsingPOST(datasetId: string, name: string, options?: any): AxiosPromise<ResponseVoid> {
            return DataSetApiFp(configuration).updateProjectUsingPOST(datasetId, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataSetApi - object-oriented interface
 * @export
 * @class DataSetApi
 * @extends {BaseAPI}
 */
export class DataSetApi extends BaseAPI {
    /**
     * 
     * @summary 对接受到的Token信息进行ACK确认
     * @param {string} dataSetId dataSetId
     * @param {string} token token
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public ackMonitorUsingPUT(dataSetId: string, token: string, xGdcUserid: string, options?: any) {
        return DataSetApiFp(this.configuration).ackMonitorUsingPUT(dataSetId, token, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据DataSetId申请读权限的Token
     * @param {string} dataSetId dataSetId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {boolean} [ack] ack
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public applyDataSetSMonitorByDSIdUsingPOST(dataSetId: string, xGdcUserid: string, ack?: boolean, options?: any) {
        return DataSetApiFp(this.configuration).applyDataSetSMonitorByDSIdUsingPOST(dataSetId, xGdcUserid, ack, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据DataSetId和用户的身份标识申请编辑权限的Token
     * @param {string} dataSetId dataSetId
     * @param {string} uuid uuid
     * @param {string} xGdcUserid x-gdc-userid
     * @param {boolean} [ack] ack
     * @param {number} [expire] expire
     * @param {string} [token] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public applyDataSetXMonitorByDSIdHolderUserInfoUsingPOST(dataSetId: string, uuid: string, xGdcUserid: string, ack?: boolean, expire?: number, token?: string, options?: any) {
        return DataSetApiFp(this.configuration).applyDataSetXMonitorByDSIdHolderUserInfoUsingPOST(dataSetId, uuid, xGdcUserid, ack, expire, token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据DataSetId申请编辑权限的Token
     * @param {string} dataSetId dataSetId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {boolean} [ack] ack
     * @param {number} [expire] expire
     * @param {string} [token] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public applyDataSetXMonitorByDSIdUsingPOST(dataSetId: string, xGdcUserid: string, ack?: boolean, expire?: number, token?: string, options?: any) {
        return DataSetApiFp(this.configuration).applyDataSetXMonitorByDSIdUsingPOST(dataSetId, xGdcUserid, ack, expire, token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据DataSetId申请编辑权限的Token
     * @param {string} dataSetId dataSetId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {boolean} [ack] ack
     * @param {number} [expire] expire
     * @param {string} [token] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public applyDataSetXMonitorByDSIdV2UsingPOST(dataSetId: string, xGdcUserid: string, ack?: boolean, expire?: number, token?: string, options?: any) {
        return DataSetApiFp(this.configuration).applyDataSetXMonitorByDSIdV2UsingPOST(dataSetId, xGdcUserid, ack, expire, token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据DataSetId申请编辑权或者更新权的Token
     * @param {string} dataSetId dataSetId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {boolean} [ack] ack
     * @param {number} [expire] expire
     * @param {string} [token] token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public applyDataSetXOrUMonitorByDSIdUsingPOST(dataSetId: string, xGdcUserid: string, ack?: boolean, expire?: number, token?: string, options?: any) {
        return DataSetApiFp(this.configuration).applyDataSetXOrUMonitorByDSIdUsingPOST(dataSetId, xGdcUserid, ack, expire, token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取上传操作的id
     * @param {string} [dsId] 数据集Id
     * @param {string} [tag] 数据标记
     * @param {string} [token] Token
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public beginUploadIdUsingGET(dsId?: string, tag?: string, token?: string, xGdcUserid?: string, options?: any) {
        return DataSetApiFp(this.configuration).beginUploadIdUsingGET(dsId, tag, token, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取上传操作的id
     * @param {string} dsId 数据集Id
     * @param {string} token Token
     * @param {string} xGdcUserid x-gdc-userid
     * @param {string} [tag] 数据标记
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public beginUploadIdV2UsingGET(dsId: string, token: string, xGdcUserid: string, tag?: string, options?: any) {
        return DataSetApiFp(this.configuration).beginUploadIdV2UsingGET(dsId, token, xGdcUserid, tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 数据版本检查
     * @param {string} datasetId datasetId
     * @param {number} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public checkDataSetVersionUsingGET(datasetId: string, version: number, options?: any) {
        return DataSetApiFp(this.configuration).checkDataSetVersionUsingGET(datasetId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 完成工作单元某版本的上传流程
     * @param {string} dsId dsId
     * @param {number} version version
     * @param {boolean} [force] 强制关闭，运营需要。工作单元上传不应该使用该参数
     * @param {boolean} [success] success
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public closeUploadUsingPOST(dsId: string, version: number, force?: boolean, success?: boolean, options?: any) {
        return DataSetApiFp(this.configuration).closeUploadUsingPOST(dsId, version, force, success, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建数据集
     * @param {DataSetCreation} dataSetCreation dataSetCreation
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public createDataSetUsingPOST(dataSetCreation: DataSetCreation, xGdcUserid?: string, options?: any) {
        return DataSetApiFp(this.configuration).createDataSetUsingPOST(dataSetCreation, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createDataSetV0
     * @param {DataSetCreation} ds ds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public createDataSetV0UsingPUT(ds: DataSetCreation, options?: any) {
        return DataSetApiFp(this.configuration).createDataSetV0UsingPUT(ds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建数据集v3,不设置默认owner
     * @param {DataSetCreation} dataSetCreation dataSetCreation
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public createDataSetV3UsingPOST(dataSetCreation: DataSetCreation, xGdcUserid?: string, options?: any) {
        return DataSetApiFp(this.configuration).createDataSetV3UsingPOST(dataSetCreation, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createVersion
     * @param {string} dsId dsId
     * @param {object} metaInfoMap metaInfoMap
     * @param {string} [sourceFile] sourceFile
     * @param {string} [status] status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public createVersionUsingPUT(dsId: string, metaInfoMap: object, sourceFile?: string, status?: string, options?: any) {
        return DataSetApiFp(this.configuration).createVersionUsingPUT(dsId, metaInfoMap, sourceFile, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary datasetCheckAsyncTaskStatus
     * @param {string} taskId taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public datasetCheckAsyncTaskStatusUsingGET(taskId: string, options?: any) {
        return DataSetApiFp(this.configuration).datasetCheckAsyncTaskStatusUsingGET(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary datasetPushAsyncBegin
     * @param {string} datasetId datasetId
     * @param {string} token token
     * @param {DatasetUploadBeginRequest} pushRequest pushRequest
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public datasetPushAsyncBeginUsingPOST(datasetId: string, token: string, pushRequest: DatasetUploadBeginRequest, xGdcUserid?: string, options?: any) {
        return DataSetApiFp(this.configuration).datasetPushAsyncBeginUsingPOST(datasetId, token, pushRequest, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary datasetPushAsyncEnd
     * @param {string} datasetId datasetId
     * @param {string} token token
     * @param {string} xGdcUserid x-gdc-userid
     * @param {DatasetUploadEndRequest} pushRequest pushRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public datasetPushAsyncEndUsingPOST(datasetId: string, token: string, xGdcUserid: string, pushRequest: DatasetUploadEndRequest, options?: any) {
        return DataSetApiFp(this.configuration).datasetPushAsyncEndUsingPOST(datasetId, token, xGdcUserid, pushRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary datasetPushAsync
     * @param {string} datasetId datasetId
     * @param {DatasetPushRequest} pushRequest pushRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public datasetPushAsyncUsingPUT(datasetId: string, pushRequest: DatasetPushRequest, options?: any) {
        return DataSetApiFp(this.configuration).datasetPushAsyncUsingPUT(datasetId, pushRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除指定的工作单元
     * @param {string} dataSetId dataSetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public deleteDataSetUsingDELETE(dataSetId: string, options?: any) {
        return DataSetApiFp(this.configuration).deleteDataSetUsingDELETE(dataSetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 逻辑删除目录
     * @param {string} datasetId 数据集Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public deleteProjectUsingDELETE(datasetId: string, options?: any) {
        return DataSetApiFp(this.configuration).deleteProjectUsingDELETE(datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 提交上传操作
     * @param {number} count 元素总数
     * @param {string} datasetId 关联的数据集
     * @param {string} uploadId 上传id
     * @param {string} version 客户端数据版本号
     * @param {string} [verify] 验证文件标识
     * @param {string} [metaInfoMap] 元数据
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public endUploadIdUsingPUT(count: number, datasetId: string, uploadId: string, version: string, verify?: string, metaInfoMap?: string, options?: any) {
        return DataSetApiFp(this.configuration).endUploadIdUsingPUT(count, datasetId, uploadId, version, verify, metaInfoMap, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 提交上传操作
     * @param {number} count 元素总数
     * @param {string} datasetId 关联的数据集
     * @param {string} uploadId 上传id
     * @param {string} version 客户端数据版本号
     * @param {number} [suiteCount] 构件的数量
     * @param {string} [verify] 验证文件标识
     * @param {string} [metaInfoMap] 元数据
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public endUploadIdV2UsingPUT(count: number, datasetId: string, uploadId: string, version: string, suiteCount?: number, verify?: string, metaInfoMap?: string, options?: any) {
        return DataSetApiFp(this.configuration).endUploadIdV2UsingPUT(count, datasetId, uploadId, version, suiteCount, verify, metaInfoMap, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量获取团队下指定状态的所有工作单元
     * @param {Array<string>} teamIds teamIds
     * @param {'draft' | 'committed'} [status] status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getAllDataSetsInTeamsUsingPOST(teamIds: Array<string>, status?: 'draft' | 'committed', options?: any) {
        return DataSetApiFp(this.configuration).getAllDataSetsInTeamsUsingPOST(teamIds, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量获取草稿对应的过程工作单元
     * @param {Array<string>} draftDataSetIds draftDataSetIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getCommittedDataSetsUsingPOST(draftDataSetIds: Array<string>, options?: any) {
        return DataSetApiFp(this.configuration).getCommittedDataSetsUsingPOST(draftDataSetIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据id获取dataset
     * @param {string} dataSetId dataSetId
     * @param {boolean} [ignoreDeleted] ignoreDeleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetByIdUsingGET(dataSetId: string, ignoreDeleted?: boolean, options?: any) {
        return DataSetApiFp(this.configuration).getDataSetByIdUsingGET(dataSetId, ignoreDeleted, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据id列表批量获取工作单元
     * @param {Array<string>} dataSetIds dataSetIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetByIdsUsingPOST(dataSetIds: Array<string>, options?: any) {
        return DataSetApiFp(this.configuration).getDataSetByIdsUsingPOST(dataSetIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取团队下指定类型的工作单元
     * @param {string} teamId teamId
     * @param {string} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetInTeamByTypeUsingGET(teamId: string, type?: string, options?: any) {
        return DataSetApiFp(this.configuration).getDataSetInTeamByTypeUsingGET(teamId, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getDataSetProjectSubId
     * @param {string} datasetId datasetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetProjectSubIdUsingGET(datasetId: string, options?: any) {
        return DataSetApiFp(this.configuration).getDataSetProjectSubIdUsingGET(datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getDataSetVersions
     * @param {string} dsId dsId
     * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetVersionsUsingGET(dsId: string, onlySuccess?: boolean, options?: any) {
        return DataSetApiFp(this.configuration).getDataSetVersionsUsingGET(dsId, onlySuccess, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getDataSetVersionsWithDefaultColumns
     * @param {string} dsId dsId
     * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetVersionsWithDefaultColumnsUsingGET(dsId: string, onlySuccess?: boolean, options?: any) {
        return DataSetApiFp(this.configuration).getDataSetVersionsWithDefaultColumnsUsingGET(dsId, onlySuccess, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getDataSetsByFolder
     * @param {string} folderId folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetsByFolderUsingGET(folderId: string, options?: any) {
        return DataSetApiFp(this.configuration).getDataSetsByFolderUsingGET(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据id列表批量获取工作单元
     * @param {Array<string>} dataSetIds dataSetIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetsByIdsUsingPOST(dataSetIds: Array<string>, options?: any) {
        return DataSetApiFp(this.configuration).getDataSetsByIdsUsingPOST(dataSetIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取个人设计下的工作单元
     * @param {string} projectId projectId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetsByProjectAndOwnerUsingGET(projectId: string, userId: string, options?: any) {
        return DataSetApiFp(this.configuration).getDataSetsByProjectAndOwnerUsingGET(projectId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取个人设计下的工作单元v2
     * @param {string} projectId projectId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetsByProjectAndOwnerV2UsingGET(projectId: string, userId: string, options?: any) {
        return DataSetApiFp(this.configuration).getDataSetsByProjectAndOwnerV2UsingGET(projectId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 按照专业获取工作单元
     * @param {string} specialtyId specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetsBySpecialtyUsingGET(specialtyId: string, options?: any) {
        return DataSetApiFp(this.configuration).getDataSetsBySpecialtyUsingGET(specialtyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目下指定类型的数据集
     * @param {string} projectId projectId
     * @param {string} type type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetsByTypeUsingGET(projectId: string, type: string, options?: any) {
        return DataSetApiFp(this.configuration).getDataSetsByTypeUsingGET(projectId, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目下指定状态的工作单元
     * @param {string} projectId projectId
     * @param {'draft' | 'committed'} [status] status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetsInProjectByStatusUsingGET(projectId: string, status?: 'draft' | 'committed', options?: any) {
        return DataSetApiFp(this.configuration).getDataSetsInProjectByStatusUsingGET(projectId, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取团队下指定状态的工作单元
     * @param {string} teamId teamId
     * @param {'draft' | 'committed'} [status] status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetsInTeamByStatusUsingGET(teamId: string, status?: 'draft' | 'committed', options?: any) {
        return DataSetApiFp(this.configuration).getDataSetsInTeamByStatusUsingGET(teamId, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取团队下指定类型的工作单元
     * @param {string} teamId teamId
     * @param {'std' | 'cloudify' | 'gap' | 'rvt' | 'bmv' | 'pdf' | 'dwg' | 'docx' | 'jpg' | 'gac' | 'all'} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetsInTeamByTypeUsingGET(teamId: string, type?: 'std' | 'cloudify' | 'gap' | 'rvt' | 'bmv' | 'pdf' | 'dwg' | 'docx' | 'jpg' | 'gac' | 'all', options?: any) {
        return DataSetApiFp(this.configuration).getDataSetsInTeamByTypeUsingGET(teamId, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量获取团队下指定状态的工作单元
     * @param {Array<string>} teamIds teamIds
     * @param {'draft' | 'committed'} [status] status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetsInTeamsUsingPOST(teamIds: Array<string>, status?: 'draft' | 'committed', options?: any) {
        return DataSetApiFp(this.configuration).getDataSetsInTeamsUsingPOST(teamIds, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量获取团队下指定状态自己负责的工作单元v2
     * @param {Array<string>} teamIds teamIds
     * @param {'draft' | 'committed'} [status] status
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetsInTeamsV2UsingPOST(teamIds: Array<string>, status?: 'draft' | 'committed', xGdcUserid?: string, options?: any) {
        return DataSetApiFp(this.configuration).getDataSetsInTeamsV2UsingPOST(teamIds, status, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目下所有工作单元的使用空间
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetsSizeByProjectUsingGET(projectId: string, options?: any) {
        return DataSetApiFp(this.configuration).getDataSetsSizeByProjectUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getDataSets
     * @param {string} specialtyId specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDataSetsUsingGET(specialtyId: string, options?: any) {
        return DataSetApiFp(this.configuration).getDataSetsUsingGET(specialtyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取最工作单元的指定版本Version信息并按mvd来过滤字段
     * @param {string} dsId dsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDatasetStandardCodeVersionUsingGET(dsId: string, options?: any) {
        return DataSetApiFp(this.configuration).getDatasetStandardCodeVersionUsingGET(dsId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取Dataset
     * @param {string} datasetId 获取数据集信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDatasetUsingGET(datasetId: string, options?: any) {
        return DataSetApiFp(this.configuration).getDatasetUsingGET(datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取工作单元的指定状态的版本
     * @param {string} dataSetId dataSetId
     * @param {boolean} [onlySuccess] onlySuccess
     * @param {'draft' | 'committed'} [status] status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDatasetVersionsByStatusUsingGET(dataSetId: string, onlySuccess?: boolean, status?: 'draft' | 'committed', options?: any) {
        return DataSetApiFp(this.configuration).getDatasetVersionsByStatusUsingGET(dataSetId, onlySuccess, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量获取工作单元的指定状态的版本
     * @param {Array<string>} dataSetIds dataSetIds
     * @param {boolean} [onlySuccess] onlySuccess
     * @param {'draft' | 'committed'} [status] status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDatasetsVersionsByStatusAndColumnsUsingPOST(dataSetIds: Array<string>, onlySuccess?: boolean, status?: 'draft' | 'committed', options?: any) {
        return DataSetApiFp(this.configuration).getDatasetsVersionsByStatusAndColumnsUsingPOST(dataSetIds, onlySuccess, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 按照mvd方式，批量获取工作单元的指定状态的版本
     * @param {Array<string>} dataSetIds dataSetIds
     * @param {string} [mvd] mvd
     * @param {boolean} [onlySuccess] onlySuccess
     * @param {'draft' | 'committed'} [status] status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDatasetsVersionsByStatusMVDUsingPOST(dataSetIds: Array<string>, mvd?: string, onlySuccess?: boolean, status?: 'draft' | 'committed', options?: any) {
        return DataSetApiFp(this.configuration).getDatasetsVersionsByStatusMVDUsingPOST(dataSetIds, mvd, onlySuccess, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量获取工作单元的指定状态的版本
     * @param {Array<string>} dataSetIds dataSetIds
     * @param {boolean} [onlySuccess] onlySuccess
     * @param {'draft' | 'committed'} [status] status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getDatasetsVersionsByStatusUsingPOST(dataSetIds: Array<string>, onlySuccess?: boolean, status?: 'draft' | 'committed', options?: any) {
        return DataSetApiFp(this.configuration).getDatasetsVersionsByStatusUsingPOST(dataSetIds, onlySuccess, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getLatestVersion
     * @param {string} dsId dsId
     * @param {boolean} [onlySuccess] 是否只查成功版本。默认为true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getLatestVersionUsingGET(dsId: string, onlySuccess?: boolean, options?: any) {
        return DataSetApiFp(this.configuration).getLatestVersionUsingGET(dsId, onlySuccess, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取最新的工作单元的Version信息并按mvd来过滤字段(Deprecated，被v3版本替换)
     * @param {string} dsId dsId
     * @param {string} [mvd] mvd
     * @param {boolean} [onlySuccess] onlySuccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getLatestVersionWithMvdUsingGET(dsId: string, mvd?: string, onlySuccess?: boolean, options?: any) {
        return DataSetApiFp(this.configuration).getLatestVersionWithMvdUsingGET(dsId, mvd, onlySuccess, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取最新的工作单元的Version信息并按mvd来过滤字段(不会填充RawData和RefInfo字段)
     * @param {string} dsId dsId
     * @param {string} [mvd] mvd
     * @param {boolean} [onlySuccess] onlySuccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getLatestVersionWithMvdWithoutRawDataAndRefInfoUsingGET(dsId: string, mvd?: string, onlySuccess?: boolean, options?: any) {
        return DataSetApiFp(this.configuration).getLatestVersionWithMvdWithoutRawDataAndRefInfoUsingGET(dsId, mvd, onlySuccess, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获得Version的Block数据的MD5
     * @param {string} datasetId datasetId
     * @param {Array<string>} datasetFilePaths datasetFilePaths
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getMD5OfVersionBlockFilesUsingPOST(datasetId: string, datasetFilePaths: Array<string>, options?: any) {
        return DataSetApiFp(this.configuration).getMD5OfVersionBlockFilesUsingPOST(datasetId, datasetFilePaths, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取数据集指定版本的目录树
     * @param {string} dataSetId dataSetId
     * @param {number} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getModelTreeUsingGET(dataSetId: string, version: number, options?: any) {
        return DataSetApiFp(this.configuration).getModelTreeUsingGET(dataSetId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 产生可供下载的version的Block数据的签名URL
     * @param {string} datasetId datasetId
     * @param {Array<string>} datasetFilePaths datasetFilePaths
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getSASOfVersionBlockFilesUsingPOST(datasetId: string, datasetFilePaths: Array<string>, options?: any) {
        return DataSetApiFp(this.configuration).getSASOfVersionBlockFilesUsingPOST(datasetId, datasetFilePaths, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取数据集指定版本中的标准编码列表
     * @param {number} versionId versionId
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getStandardCodeCollUsingGET(versionId: number, xGdcUserid?: string, options?: any) {
        return DataSetApiFp(this.configuration).getStandardCodeCollUsingGET(versionId, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getVersion
     * @param {string} dsId dsId
     * @param {number} dsVersion dsVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getVersionUsingGET(dsId: string, dsVersion: number, options?: any) {
        return DataSetApiFp(this.configuration).getVersionUsingGET(dsId, dsVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取最工作单元的指定版本Version信息并按mvd来过滤字段(Deprecated，被v3版本替换)
     * @param {string} dsId dsId
     * @param {number} dsVersion dsVersion
     * @param {string} [mvd] mvd
     * @param {boolean} [onlySuccess] onlySuccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getVersionWithMvdUsingGET(dsId: string, dsVersion: number, mvd?: string, onlySuccess?: boolean, options?: any) {
        return DataSetApiFp(this.configuration).getVersionWithMvdUsingGET(dsId, dsVersion, mvd, onlySuccess, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取最工作单元的指定版本Version信息并按mvd来过滤字段(不会填充RawData和RefInfo字段)
     * @param {string} dsId dsId
     * @param {number} dsVersion dsVersion
     * @param {string} [mvd] mvd
     * @param {boolean} [onlySuccess] onlySuccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public getVersionWithMvdWithoutRawDataAndRefInfoUsingGET(dsId: string, dsVersion: number, mvd?: string, onlySuccess?: boolean, options?: any) {
        return DataSetApiFp(this.configuration).getVersionWithMvdWithoutRawDataAndRefInfoUsingGET(dsId, dsVersion, mvd, onlySuccess, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取工作单元上的编辑Token
     * @param {Array<string>} dataSetIds dataSetIds
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public listDataSetXMonitorByDSIdsUsingPOST(dataSetIds: Array<string>, xGdcUserid?: string, options?: any) {
        return DataSetApiFp(this.configuration).listDataSetXMonitorByDSIdsUsingPOST(dataSetIds, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 将指定版本的指定的version的状态设置为publish
     * @param {string} dsId dsId
     * @param {number} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public markPublishUsingPOST(dsId: string, version: number, options?: any) {
        return DataSetApiFp(this.configuration).markPublishUsingPOST(dsId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary moveToFolder
     * @param {string} dsId dsId
     * @param {string} newFolderId newFolderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public moveToFolderUsingPOST(dsId: string, newFolderId: string, options?: any) {
        return DataSetApiFp(this.configuration).moveToFolderUsingPOST(dsId, newFolderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 产生可供上传的version的Block数据的签名URL
     * @param {string} datasetId datasetId
     * @param {Array<string>} datasetFilePaths datasetFilePaths
     * @param {boolean} [force] 是否强制覆盖，默认false
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public newVersionBlockFilesUsingPUT(datasetId: string, datasetFilePaths: Array<string>, force?: boolean, options?: any) {
        return DataSetApiFp(this.configuration).newVersionBlockFilesUsingPUT(datasetId, datasetFilePaths, force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 提升工作单元指定版本为最新版
     * @param {string} dsId dsId
     * @param {number} version version
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public promoteVersion2UsingPOST(dsId: string, version: number, xGdcUserid?: string, options?: any) {
        return DataSetApiFp(this.configuration).promoteVersion2UsingPOST(dsId, version, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 提升工作单元指定版本为最新版
     * @param {string} dsId dsId
     * @param {number} version version
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public promoteVersionUsingPOST(dsId: string, version: number, xGdcUserid?: string, options?: any) {
        return DataSetApiFp(this.configuration).promoteVersionUsingPOST(dsId, version, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 释放Token资源(客户端使用)
     * @param {string} token 后台分配的Token
     * @param {string} xGdcUserid x-gdc-userid
     * @param {string} [force] false表示如果关联的数据版本存在修改操作尚未完成，不执行释放操作
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public releaseDataSetMonitorByTokenUsingPUT(token: string, xGdcUserid: string, force?: string, options?: any) {
        return DataSetApiFp(this.configuration).releaseDataSetMonitorByTokenUsingPUT(token, xGdcUserid, force, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据DataSet释放Token资源(运维使用)
     * @param {string} dataSetId dataSetId
     * @param {boolean} [force] force
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public releaseDataSetXMonitorByDSIdUsingPUT(dataSetId: string, force?: boolean, xGdcUserid?: string, options?: any) {
        return DataSetApiFp(this.configuration).releaseDataSetXMonitorByDSIdUsingPUT(dataSetId, force, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Token续签
     * @param {number} expire expire
     * @param {string} token token
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public renewalDataSetXMonitorByTokenUsingPOST(expire: number, token: string, xGdcUserid: string, options?: any) {
        return DataSetApiFp(this.configuration).renewalDataSetXMonitorByTokenUsingPOST(expire, token, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 为工作单元设置一个版本号
     * @param {string} appVersion appVersion
     * @param {string} dsId dsId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public setAppVersionForDatasetUsingPUT(appVersion: string, dsId: string, xGdcUserid: string, options?: any) {
        return DataSetApiFp(this.configuration).setAppVersionForDatasetUsingPUT(appVersion, dsId, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateDatSetOwner
     * @param {string} dataSetId dataSetId
     * @param {string} [ownerId] ownerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public updateDatSetOwnerUsingPUT(dataSetId: string, ownerId?: string, options?: any) {
        return DataSetApiFp(this.configuration).updateDatSetOwnerUsingPUT(dataSetId, ownerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新工作单元
     * @param {string} dataSetId dataSetId
     * @param {DataSetCreation} dataset dataset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public updateDataSetByIdUsingPUT(dataSetId: string, dataset: DataSetCreation, options?: any) {
        return DataSetApiFp(this.configuration).updateDataSetByIdUsingPUT(dataSetId, dataset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateDataSet
     * @param {string} datasetId datasetId
     * @param {DataSet} dataSet dataSet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public updateDataSetUsingPUT(datasetId: string, dataSet: DataSet, options?: any) {
        return DataSetApiFp(this.configuration).updateDataSetUsingPUT(datasetId, dataSet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改数据集名称
     * @param {string} datasetId 数据集Id
     * @param {string} name 数据集新名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public updateProjectUsingPOST(datasetId: string, name: string, options?: any) {
        return DataSetApiFp(this.configuration).updateProjectUsingPOST(datasetId, name, options).then((request) => request(this.axios, this.basePath));
    }

}

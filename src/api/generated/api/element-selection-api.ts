// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddDatasetVersion } from '../model';
// @ts-ignore
import { CreateElementSelectionSet } from '../model';
// @ts-ignore
import { DeleteElementSelectionSetByVersions } from '../model';
// @ts-ignore
import { ElementSelectionSet } from '../model';
// @ts-ignore
import { ElementSelectionSetInformation } from '../model';
// @ts-ignore
import { GetElementSelectionSets } from '../model';
// @ts-ignore
import { ResponseListElementVersionStandardCodeVO } from '../model';
// @ts-ignore
import { Responseint } from '../model';
// @ts-ignore
import { UpdateElementSelectionSetActiveStatus } from '../model';
// @ts-ignore
import { UpdateElementSelectionSetFilterJsonTree } from '../model';
/**
 * ElementSelectionApi - axios parameter creator
 * @export
 */
export const ElementSelectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addDatasetVersion
         * @param {AddDatasetVersion} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDatasetVersionUsingPUT: async (args: AddDatasetVersion, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'args' is not null or undefined
            if (args === null || args === undefined) {
                throw new RequiredError('args','Required parameter args was null or undefined when calling addDatasetVersionUsingPUT.');
            }
            const localVarPath = `/element-selection-set/add-dataset-version`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof args !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(args !== undefined ? args : {}) : (args || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create
         * @param {CreateElementSelectionSet} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPUT: async (args: CreateElementSelectionSet, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'args' is not null or undefined
            if (args === null || args === undefined) {
                throw new RequiredError('args','Required parameter args was null or undefined when calling createUsingPUT.');
            }
            const localVarPath = `/element-selection-set`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof args !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(args !== undefined ? args : {}) : (args || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteByDatasetVersions
         * @param {DeleteElementSelectionSetByVersions} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByDatasetVersionsUsingDELETE: async (args: DeleteElementSelectionSetByVersions, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'args' is not null or undefined
            if (args === null || args === undefined) {
                throw new RequiredError('args','Required parameter args was null or undefined when calling deleteByDatasetVersionsUsingDELETE.');
            }
            const localVarPath = `/element-selection-set/delete-by-dataset-versions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof args !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(args !== undefined ? args : {}) : (args || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteById
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByIdUsingDELETE: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteByIdUsingDELETE.');
            }
            const localVarPath = `/element-selection-set`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteByIdV2
         * @param {string} essId essId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByIdV2UsingDELETE: async (essId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'essId' is not null or undefined
            if (essId === null || essId === undefined) {
                throw new RequiredError('essId','Required parameter essId was null or undefined when calling deleteByIdV2UsingDELETE.');
            }
            const localVarPath = `/v2/element-selection-set/{essId}`
                .replace(`{${"essId"}}`, encodeURIComponent(String(essId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getElementSelectionSet
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementSelectionSetUsingGET: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getElementSelectionSetUsingGET.');
            }
            const localVarPath = `/element-selection-set/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getElementSelectionSetsByDsFromVersion
         * @param {number} dsFromVersion dsFromVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementSelectionSetsByDsFromVersionUsingGET: async (dsFromVersion: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dsFromVersion' is not null or undefined
            if (dsFromVersion === null || dsFromVersion === undefined) {
                throw new RequiredError('dsFromVersion','Required parameter dsFromVersion was null or undefined when calling getElementSelectionSetsByDsFromVersionUsingGET.');
            }
            const localVarPath = `/element-selection-sets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dsFromVersion !== undefined) {
                localVarQueryParameter['dsFromVersion'] = dsFromVersion;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getElementSelectionSets
         * @param {GetElementSelectionSets} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementSelectionSetsUsingPOST: async (args: GetElementSelectionSets, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'args' is not null or undefined
            if (args === null || args === undefined) {
                throw new RequiredError('args','Required parameter args was null or undefined when calling getElementSelectionSetsUsingPOST.');
            }
            const localVarPath = `/element-selection-sets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof args !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(args !== undefined ? args : {}) : (args || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据元素Id和版本号获取表中编码列表
         * @param {string} [elementId] elementId
         * @param {number} [versionId] versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementVersionStandardCodeUsingGET: async (elementId?: string, versionId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/element-version-standard-code/element/version/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (elementId !== undefined) {
                localVarQueryParameter['elementId'] = elementId;
            }

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据版本号获取编码列表
         * @param {number} [versionId] versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementVersionStandardCodeUsingGET1: async (versionId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/element-version-standard-code/version/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateActiveStatus
         * @param {UpdateElementSelectionSetActiveStatus} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateActiveStatusUsingPOST: async (args: UpdateElementSelectionSetActiveStatus, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'args' is not null or undefined
            if (args === null || args === undefined) {
                throw new RequiredError('args','Required parameter args was null or undefined when calling updateActiveStatusUsingPOST.');
            }
            const localVarPath = `/element-selection-set/update-active`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof args !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(args !== undefined ? args : {}) : (args || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateCodecSet
         * @param {UpdateElementSelectionSetFilterJsonTree} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCodecSetUsingPOST: async (args: UpdateElementSelectionSetFilterJsonTree, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'args' is not null or undefined
            if (args === null || args === undefined) {
                throw new RequiredError('args','Required parameter args was null or undefined when calling updateCodecSetUsingPOST.');
            }
            const localVarPath = `/element-selection-set/update-codec-set`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof args !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(args !== undefined ? args : {}) : (args || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ElementSelectionApi - functional programming interface
 * @export
 */
export const ElementSelectionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addDatasetVersion
         * @param {AddDatasetVersion} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDatasetVersionUsingPUT(args: AddDatasetVersion, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await ElementSelectionApiAxiosParamCreator(configuration).addDatasetVersionUsingPUT(args, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary create
         * @param {CreateElementSelectionSet} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUsingPUT(args: CreateElementSelectionSet, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementSelectionSet>> {
            const localVarAxiosArgs = await ElementSelectionApiAxiosParamCreator(configuration).createUsingPUT(args, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteByDatasetVersions
         * @param {DeleteElementSelectionSetByVersions} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByDatasetVersionsUsingDELETE(args: DeleteElementSelectionSetByVersions, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await ElementSelectionApiAxiosParamCreator(configuration).deleteByDatasetVersionsUsingDELETE(args, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteById
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByIdUsingDELETE(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await ElementSelectionApiAxiosParamCreator(configuration).deleteByIdUsingDELETE(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteByIdV2
         * @param {string} essId essId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByIdV2UsingDELETE(essId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await ElementSelectionApiAxiosParamCreator(configuration).deleteByIdV2UsingDELETE(essId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getElementSelectionSet
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElementSelectionSetUsingGET(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementSelectionSet>> {
            const localVarAxiosArgs = await ElementSelectionApiAxiosParamCreator(configuration).getElementSelectionSetUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getElementSelectionSetsByDsFromVersion
         * @param {number} dsFromVersion dsFromVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElementSelectionSetsByDsFromVersionUsingGET(dsFromVersion: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ElementSelectionSetInformation>>> {
            const localVarAxiosArgs = await ElementSelectionApiAxiosParamCreator(configuration).getElementSelectionSetsByDsFromVersionUsingGET(dsFromVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getElementSelectionSets
         * @param {GetElementSelectionSets} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElementSelectionSetsUsingPOST(args: GetElementSelectionSets, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ElementSelectionSet>>> {
            const localVarAxiosArgs = await ElementSelectionApiAxiosParamCreator(configuration).getElementSelectionSetsUsingPOST(args, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据元素Id和版本号获取表中编码列表
         * @param {string} [elementId] elementId
         * @param {number} [versionId] versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElementVersionStandardCodeUsingGET(elementId?: string, versionId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListElementVersionStandardCodeVO>> {
            const localVarAxiosArgs = await ElementSelectionApiAxiosParamCreator(configuration).getElementVersionStandardCodeUsingGET(elementId, versionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据版本号获取编码列表
         * @param {number} [versionId] versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getElementVersionStandardCodeUsingGET1(versionId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListElementVersionStandardCodeVO>> {
            const localVarAxiosArgs = await ElementSelectionApiAxiosParamCreator(configuration).getElementVersionStandardCodeUsingGET1(versionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateActiveStatus
         * @param {UpdateElementSelectionSetActiveStatus} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateActiveStatusUsingPOST(args: UpdateElementSelectionSetActiveStatus, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await ElementSelectionApiAxiosParamCreator(configuration).updateActiveStatusUsingPOST(args, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateCodecSet
         * @param {UpdateElementSelectionSetFilterJsonTree} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCodecSetUsingPOST(args: UpdateElementSelectionSetFilterJsonTree, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await ElementSelectionApiAxiosParamCreator(configuration).updateCodecSetUsingPOST(args, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ElementSelectionApi - factory interface
 * @export
 */
export const ElementSelectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addDatasetVersion
         * @param {AddDatasetVersion} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDatasetVersionUsingPUT(args: AddDatasetVersion, options?: any): AxiosPromise<boolean> {
            return ElementSelectionApiFp(configuration).addDatasetVersionUsingPUT(args, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create
         * @param {CreateElementSelectionSet} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPUT(args: CreateElementSelectionSet, options?: any): AxiosPromise<ElementSelectionSet> {
            return ElementSelectionApiFp(configuration).createUsingPUT(args, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteByDatasetVersions
         * @param {DeleteElementSelectionSetByVersions} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByDatasetVersionsUsingDELETE(args: DeleteElementSelectionSetByVersions, options?: any): AxiosPromise<number> {
            return ElementSelectionApiFp(configuration).deleteByDatasetVersionsUsingDELETE(args, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteById
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByIdUsingDELETE(id: string, options?: any): AxiosPromise<number> {
            return ElementSelectionApiFp(configuration).deleteByIdUsingDELETE(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteByIdV2
         * @param {string} essId essId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByIdV2UsingDELETE(essId: string, options?: any): AxiosPromise<Responseint> {
            return ElementSelectionApiFp(configuration).deleteByIdV2UsingDELETE(essId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getElementSelectionSet
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementSelectionSetUsingGET(id: string, options?: any): AxiosPromise<ElementSelectionSet> {
            return ElementSelectionApiFp(configuration).getElementSelectionSetUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getElementSelectionSetsByDsFromVersion
         * @param {number} dsFromVersion dsFromVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementSelectionSetsByDsFromVersionUsingGET(dsFromVersion: number, options?: any): AxiosPromise<Array<ElementSelectionSetInformation>> {
            return ElementSelectionApiFp(configuration).getElementSelectionSetsByDsFromVersionUsingGET(dsFromVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getElementSelectionSets
         * @param {GetElementSelectionSets} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementSelectionSetsUsingPOST(args: GetElementSelectionSets, options?: any): AxiosPromise<Array<ElementSelectionSet>> {
            return ElementSelectionApiFp(configuration).getElementSelectionSetsUsingPOST(args, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据元素Id和版本号获取表中编码列表
         * @param {string} [elementId] elementId
         * @param {number} [versionId] versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementVersionStandardCodeUsingGET(elementId?: string, versionId?: number, options?: any): AxiosPromise<ResponseListElementVersionStandardCodeVO> {
            return ElementSelectionApiFp(configuration).getElementVersionStandardCodeUsingGET(elementId, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据版本号获取编码列表
         * @param {number} [versionId] versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getElementVersionStandardCodeUsingGET1(versionId?: number, options?: any): AxiosPromise<ResponseListElementVersionStandardCodeVO> {
            return ElementSelectionApiFp(configuration).getElementVersionStandardCodeUsingGET1(versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateActiveStatus
         * @param {UpdateElementSelectionSetActiveStatus} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateActiveStatusUsingPOST(args: UpdateElementSelectionSetActiveStatus, options?: any): AxiosPromise<number> {
            return ElementSelectionApiFp(configuration).updateActiveStatusUsingPOST(args, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateCodecSet
         * @param {UpdateElementSelectionSetFilterJsonTree} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCodecSetUsingPOST(args: UpdateElementSelectionSetFilterJsonTree, options?: any): AxiosPromise<number> {
            return ElementSelectionApiFp(configuration).updateCodecSetUsingPOST(args, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ElementSelectionApi - object-oriented interface
 * @export
 * @class ElementSelectionApi
 * @extends {BaseAPI}
 */
export class ElementSelectionApi extends BaseAPI {
    /**
     * 
     * @summary addDatasetVersion
     * @param {AddDatasetVersion} args args
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementSelectionApi
     */
    public addDatasetVersionUsingPUT(args: AddDatasetVersion, options?: any) {
        return ElementSelectionApiFp(this.configuration).addDatasetVersionUsingPUT(args, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create
     * @param {CreateElementSelectionSet} args args
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementSelectionApi
     */
    public createUsingPUT(args: CreateElementSelectionSet, options?: any) {
        return ElementSelectionApiFp(this.configuration).createUsingPUT(args, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteByDatasetVersions
     * @param {DeleteElementSelectionSetByVersions} args args
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementSelectionApi
     */
    public deleteByDatasetVersionsUsingDELETE(args: DeleteElementSelectionSetByVersions, options?: any) {
        return ElementSelectionApiFp(this.configuration).deleteByDatasetVersionsUsingDELETE(args, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteById
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementSelectionApi
     */
    public deleteByIdUsingDELETE(id: string, options?: any) {
        return ElementSelectionApiFp(this.configuration).deleteByIdUsingDELETE(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteByIdV2
     * @param {string} essId essId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementSelectionApi
     */
    public deleteByIdV2UsingDELETE(essId: string, options?: any) {
        return ElementSelectionApiFp(this.configuration).deleteByIdV2UsingDELETE(essId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getElementSelectionSet
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementSelectionApi
     */
    public getElementSelectionSetUsingGET(id: string, options?: any) {
        return ElementSelectionApiFp(this.configuration).getElementSelectionSetUsingGET(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getElementSelectionSetsByDsFromVersion
     * @param {number} dsFromVersion dsFromVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementSelectionApi
     */
    public getElementSelectionSetsByDsFromVersionUsingGET(dsFromVersion: number, options?: any) {
        return ElementSelectionApiFp(this.configuration).getElementSelectionSetsByDsFromVersionUsingGET(dsFromVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getElementSelectionSets
     * @param {GetElementSelectionSets} args args
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementSelectionApi
     */
    public getElementSelectionSetsUsingPOST(args: GetElementSelectionSets, options?: any) {
        return ElementSelectionApiFp(this.configuration).getElementSelectionSetsUsingPOST(args, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据元素Id和版本号获取表中编码列表
     * @param {string} [elementId] elementId
     * @param {number} [versionId] versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementSelectionApi
     */
    public getElementVersionStandardCodeUsingGET(elementId?: string, versionId?: number, options?: any) {
        return ElementSelectionApiFp(this.configuration).getElementVersionStandardCodeUsingGET(elementId, versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据版本号获取编码列表
     * @param {number} [versionId] versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementSelectionApi
     */
    public getElementVersionStandardCodeUsingGET1(versionId?: number, options?: any) {
        return ElementSelectionApiFp(this.configuration).getElementVersionStandardCodeUsingGET1(versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateActiveStatus
     * @param {UpdateElementSelectionSetActiveStatus} args args
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementSelectionApi
     */
    public updateActiveStatusUsingPOST(args: UpdateElementSelectionSetActiveStatus, options?: any) {
        return ElementSelectionApiFp(this.configuration).updateActiveStatusUsingPOST(args, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateCodecSet
     * @param {UpdateElementSelectionSetFilterJsonTree} args args
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElementSelectionApi
     */
    public updateCodecSetUsingPOST(args: UpdateElementSelectionSetFilterJsonTree, options?: any) {
        return ElementSelectionApiFp(this.configuration).updateCodecSetUsingPOST(args, options).then((request) => request(this.axios, this.basePath));
    }

}

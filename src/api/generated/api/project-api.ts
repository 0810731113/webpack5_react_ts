// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Project } from '../model';
// @ts-ignore
import { ProjectCreation } from '../model';
// @ts-ignore
import { ProjectCreationV2 } from '../model';
// @ts-ignore
import { ProjectModification } from '../model';
// @ts-ignore
import { ProjectModificationV2 } from '../model';
// @ts-ignore
import { ResponseCollectionUser } from '../model';
// @ts-ignore
import { ResponseListProjectVO } from '../model';
// @ts-ignore
import { ResponseListUserRoleVO } from '../model';
// @ts-ignore
import { ResponseProjectDeletable } from '../model';
// @ts-ignore
import { ResponseProjectVO } from '../model';
// @ts-ignore
import { ResponseUserRoleVO } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
// @ts-ignore
import { Responseint } from '../model';
// @ts-ignore
import { UserRoleCreation } from '../model';
// @ts-ignore
import { UserRoleCreationV2 } from '../model';
/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 将用户添加到项目中
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToProjectUsingPOST: async (projectId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling addUserToProjectUsingPOST.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling addUserToProjectUsingPOST.');
            }
            const localVarPath = `/projects/{projectId}/users/{userId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 将用户添加到项目中
         * @param {string} projectId projectId
         * @param {Array<string>} userIds userIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsersIntoProjectUsingPOST: async (projectId: string, userIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling addUsersIntoProjectUsingPOST.');
            }
            // verify required parameter 'userIds' is not null or undefined
            if (userIds === null || userIds === undefined) {
                throw new RequiredError('userIds','Required parameter userIds was null or undefined when calling addUsersIntoProjectUsingPOST.');
            }
            const localVarPath = `/projects/{projectId}/users`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userIds !== undefined ? userIds : {}) : (userIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量将用户加入项目，并指定角色
         * @param {string} projectId projectId
         * @param {UserRoleCreation} userRoleCreation userRoleCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsersToProjectWithRoleUsingPOST: async (projectId: string, userRoleCreation: UserRoleCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling addUsersToProjectWithRoleUsingPOST.');
            }
            // verify required parameter 'userRoleCreation' is not null or undefined
            if (userRoleCreation === null || userRoleCreation === undefined) {
                throw new RequiredError('userRoleCreation','Required parameter userRoleCreation was null or undefined when calling addUsersToProjectWithRoleUsingPOST.');
            }
            const localVarPath = `/projects/{projectId}/users/withRole`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userRoleCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userRoleCreation !== undefined ? userRoleCreation : {}) : (userRoleCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量将用户加入项目，并指定角色v2
         * @param {string} projectId projectId
         * @param {UserRoleCreationV2} userRoleCreationV2 userRoleCreationV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsersToProjectWithRoleV2UsingPOST: async (projectId: string, userRoleCreationV2: UserRoleCreationV2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling addUsersToProjectWithRoleV2UsingPOST.');
            }
            // verify required parameter 'userRoleCreationV2' is not null or undefined
            if (userRoleCreationV2 === null || userRoleCreationV2 === undefined) {
                throw new RequiredError('userRoleCreationV2','Required parameter userRoleCreationV2 was null or undefined when calling addUsersToProjectWithRoleV2UsingPOST.');
            }
            const localVarPath = `/v2/projects/{projectId}/users/withRole`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userRoleCreationV2 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userRoleCreationV2 !== undefined ? userRoleCreationV2 : {}) : (userRoleCreationV2 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ProjectCreation} projectCreation projectCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectUsingPOST: async (xGdcUserid: string, projectCreation: ProjectCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling createProjectUsingPOST.');
            }
            // verify required parameter 'projectCreation' is not null or undefined
            if (projectCreation === null || projectCreation === undefined) {
                throw new RequiredError('projectCreation','Required parameter projectCreation was null or undefined when calling createProjectUsingPOST.');
            }
            const localVarPath = `/v2/projects`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof projectCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(projectCreation !== undefined ? projectCreation : {}) : (projectCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建项目
         * @param {string} project 项目信息对象
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectUsingPUT: async (project: string, xGdcUserid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling createProjectUsingPUT.');
            }
            const localVarPath = `/project`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof project !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(project !== undefined ? project : {}) : (project || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ProjectCreationV2} projectCreation projectCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectV3UsingPOST: async (xGdcUserid: string, projectCreation: ProjectCreationV2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling createProjectV3UsingPOST.');
            }
            // verify required parameter 'projectCreation' is not null or undefined
            if (projectCreation === null || projectCreation === undefined) {
                throw new RequiredError('projectCreation','Required parameter projectCreation was null or undefined when calling createProjectV3UsingPOST.');
            }
            const localVarPath = `/v3/projects`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof projectCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(projectCreation !== undefined ? projectCreation : {}) : (projectCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除项目
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectByIdUsingDELETE: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling deleteProjectByIdUsingDELETE.');
            }
            const localVarPath = `/v2/projects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除项目
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectByIdUsingDELETE1: async (projectId: string, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling deleteProjectByIdUsingDELETE1.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling deleteProjectByIdUsingDELETE1.');
            }
            const localVarPath = `/v3/projects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 逻辑删除项目
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectUsingDELETE2: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling deleteProjectUsingDELETE2.');
            }
            const localVarPath = `/project`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 将用户从项目中移除
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserFromProjectUsingDELETE: async (projectId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling deleteUserFromProjectUsingDELETE.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteUserFromProjectUsingDELETE.');
            }
            const localVarPath = `/projects/{projectId}/users/{userId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目列表
         * @param {string} xGdcUserid x-gdc-userid
         * @param {'DEFAULT' | 'ARCHIVE' | 'OWNER'} [scenario] scenario
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectsUsingGET: async (xGdcUserid: string, scenario?: 'DEFAULT' | 'ARCHIVE' | 'OWNER', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling getAllProjectsUsingGET.');
            }
            const localVarPath = `/projects`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scenario !== undefined) {
                localVarQueryParameter['scenario'] = scenario;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取所有的示例项目
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSampleProjectsUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects/sample`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取当前项目下所有用户(带角色)
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserRolesInProjectUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getAllUserRolesInProjectUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/userRoles`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目所有成员
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersInProjectUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getAllUsersInProjectUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/users`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取当前项目使用的轴网类型
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectGridTypeUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getProjectGridTypeUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/grid/type`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询项目详情
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getProjectUsingGET.');
            }
            const localVarPath = `/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询项目详情
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectV2UsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getProjectV2UsingGET.');
            }
            const localVarPath = `/v2/projects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据id批量查询项目信息
         * @param {Array<string>} projectIds projectIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsByIdsUsingPOST: async (projectIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectIds' is not null or undefined
            if (projectIds === null || projectIds === undefined) {
                throw new RequiredError('projectIds','Required parameter projectIds was null or undefined when calling getProjectsByIdsUsingPOST.');
            }
            const localVarPath = `/projects/ids/batch`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof projectIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(projectIds !== undefined ? projectIds : {}) : (projectIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取我创建的项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsByOwnerUsingGET: async (xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling getProjectsByOwnerUsingGET.');
            }
            const localVarPath = `/owner/projects`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询指定状态的项目
         * @param {'Ongoing' | 'Suspended' | 'Completed'} status status
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsByStatusUsingGET: async (status: 'Ongoing' | 'Suspended' | 'Completed', xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new RequiredError('status','Required parameter status was null or undefined when calling getProjectsByStatusUsingGET.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling getProjectsByStatusUsingGET.');
            }
            const localVarPath = `/projects/status`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询符合条件的项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Project} project project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsUsingPOST: async (xGdcUserid: string, project: Project, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling getProjectsUsingPOST.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling getProjectsUsingPOST.');
            }
            const localVarPath = `/projects`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof project !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(project !== undefined ? project : {}) : (project || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取当前项目下指定用户(带角色)
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRolesInProjectUsingGET: async (projectId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getUserRolesInProjectUsingGET.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserRolesInProjectUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/users/{userId}/userRoles`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 检测项目是否可被删除
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isProjectDeletableUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling isProjectDeletableUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/deletable`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 设置当前项目使用的轴网类型
         * @param {string} projectId projectId
         * @param {number} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProjectGridType2UsingPOST: async (projectId: string, type: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling setProjectGridType2UsingPOST.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling setProjectGridType2UsingPOST.');
            }
            const localVarPath = `/projects/{projectId}/grid/setType/{type}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 设置当前项目使用的轴网类型
         * @param {string} projectId projectId
         * @param {number} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProjectGridTypeUsingPOST: async (projectId: string, type: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling setProjectGridTypeUsingPOST.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling setProjectGridTypeUsingPOST.');
            }
            const localVarPath = `/projects/{projectId}/grid/type/{type}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 设置项目状态
         * @param {string} projectId projectId
         * @param {string} status status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProjectStatusUsingPOST: async (projectId: string, status: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling setProjectStatusUsingPOST.');
            }
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new RequiredError('status','Required parameter status was null or undefined when calling setProjectStatusUsingPOST.');
            }
            const localVarPath = `/project/status`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改账号是否为项目参与者
         * @param {boolean} onOff onOff
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        switchParticipationStatusUsingPUT: async (onOff: boolean, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'onOff' is not null or undefined
            if (onOff === null || onOff === undefined) {
                throw new RequiredError('onOff','Required parameter onOff was null or undefined when calling switchParticipationStatusUsingPUT.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling switchParticipationStatusUsingPUT.');
            }
            const localVarPath = `/users/participant`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (onOff !== undefined) {
                localVarQueryParameter['onOff'] = onOff;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改项目属性
         * @param {Project} project project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectByConditionUsingPOST: async (project: Project, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling updateProjectByConditionUsingPOST.');
            }
            const localVarPath = `/project/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof project !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(project !== undefined ? project : {}) : (project || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改项目名称
         * @param {string} name 项目新名称
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectUsingPOST2: async (name: string, projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling updateProjectUsingPOST2.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling updateProjectUsingPOST2.');
            }
            const localVarPath = `/project`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据id修改项目属性
         * @param {string} projectId projectId
         * @param {ProjectModification} project project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectUsingPUT: async (projectId: string, project: ProjectModification, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling updateProjectUsingPUT.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling updateProjectUsingPUT.');
            }
            const localVarPath = `/projects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof project !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(project !== undefined ? project : {}) : (project || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据id修改项目属性
         * @param {string} projectId projectId
         * @param {ProjectModificationV2} project project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectV2UsingPUT: async (projectId: string, project: ProjectModificationV2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling updateProjectV2UsingPUT.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling updateProjectV2UsingPUT.');
            }
            const localVarPath = `/v2/projects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof project !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(project !== undefined ? project : {}) : (project || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改项目可见性
         * @param {string} projectId projectId
         * @param {'None' | 'Global' | 'Enterprise' | 'Project'} visibility visibility
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectVisibilityUsingPUT: async (projectId: string, visibility: 'None' | 'Global' | 'Enterprise' | 'Project', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling updateProjectVisibilityUsingPUT.');
            }
            // verify required parameter 'visibility' is not null or undefined
            if (visibility === null || visibility === undefined) {
                throw new RequiredError('visibility','Required parameter visibility was null or undefined when calling updateProjectVisibilityUsingPUT.');
            }
            const localVarPath = `/projects/{projectId}/visibility`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (visibility !== undefined) {
                localVarQueryParameter['visibility'] = visibility;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 将用户添加到项目中
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserToProjectUsingPOST(projectId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).addUserToProjectUsingPOST(projectId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 将用户添加到项目中
         * @param {string} projectId projectId
         * @param {Array<string>} userIds userIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUsersIntoProjectUsingPOST(projectId: string, userIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).addUsersIntoProjectUsingPOST(projectId, userIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量将用户加入项目，并指定角色
         * @param {string} projectId projectId
         * @param {UserRoleCreation} userRoleCreation userRoleCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUsersToProjectWithRoleUsingPOST(projectId: string, userRoleCreation: UserRoleCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).addUsersToProjectWithRoleUsingPOST(projectId, userRoleCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量将用户加入项目，并指定角色v2
         * @param {string} projectId projectId
         * @param {UserRoleCreationV2} userRoleCreationV2 userRoleCreationV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUsersToProjectWithRoleV2UsingPOST(projectId: string, userRoleCreationV2: UserRoleCreationV2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).addUsersToProjectWithRoleV2UsingPOST(projectId, userRoleCreationV2, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ProjectCreation} projectCreation projectCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectUsingPOST(xGdcUserid: string, projectCreation: ProjectCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProjectVO>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).createProjectUsingPOST(xGdcUserid, projectCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建项目
         * @param {string} project 项目信息对象
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectUsingPUT(project: string, xGdcUserid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).createProjectUsingPUT(project, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ProjectCreationV2} projectCreation projectCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectV3UsingPOST(xGdcUserid: string, projectCreation: ProjectCreationV2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProjectVO>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).createProjectV3UsingPOST(xGdcUserid, projectCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除项目
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectByIdUsingDELETE(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).deleteProjectByIdUsingDELETE(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除项目
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectByIdUsingDELETE1(projectId: string, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProjectDeletable>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).deleteProjectByIdUsingDELETE1(projectId, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 逻辑删除项目
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectUsingDELETE2(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).deleteProjectUsingDELETE2(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 将用户从项目中移除
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserFromProjectUsingDELETE(projectId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).deleteUserFromProjectUsingDELETE(projectId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目列表
         * @param {string} xGdcUserid x-gdc-userid
         * @param {'DEFAULT' | 'ARCHIVE' | 'OWNER'} [scenario] scenario
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProjectsUsingGET(xGdcUserid: string, scenario?: 'DEFAULT' | 'ARCHIVE' | 'OWNER', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Project>>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).getAllProjectsUsingGET(xGdcUserid, scenario, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取所有的示例项目
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSampleProjectsUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListProjectVO>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).getAllSampleProjectsUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取当前项目下所有用户(带角色)
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserRolesInProjectUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListUserRoleVO>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).getAllUserRolesInProjectUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目所有成员
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsersInProjectUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCollectionUser>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).getAllUsersInProjectUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取当前项目使用的轴网类型
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectGridTypeUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).getProjectGridTypeUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询项目详情
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).getProjectUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询项目详情
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectV2UsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProjectVO>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).getProjectV2UsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据id批量查询项目信息
         * @param {Array<string>} projectIds projectIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectsByIdsUsingPOST(projectIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListProjectVO>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).getProjectsByIdsUsingPOST(projectIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取我创建的项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectsByOwnerUsingGET(xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListProjectVO>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).getProjectsByOwnerUsingGET(xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询指定状态的项目
         * @param {'Ongoing' | 'Suspended' | 'Completed'} status status
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectsByStatusUsingGET(status: 'Ongoing' | 'Suspended' | 'Completed', xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Project>>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).getProjectsByStatusUsingGET(status, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询符合条件的项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Project} project project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectsUsingPOST(xGdcUserid: string, project: Project, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Project>>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).getProjectsUsingPOST(xGdcUserid, project, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取当前项目下指定用户(带角色)
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserRolesInProjectUsingGET(projectId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUserRoleVO>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).getUserRolesInProjectUsingGET(projectId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 检测项目是否可被删除
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isProjectDeletableUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProjectDeletable>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).isProjectDeletableUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 设置当前项目使用的轴网类型
         * @param {string} projectId projectId
         * @param {number} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setProjectGridType2UsingPOST(projectId: string, type: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).setProjectGridType2UsingPOST(projectId, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 设置当前项目使用的轴网类型
         * @param {string} projectId projectId
         * @param {number} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setProjectGridTypeUsingPOST(projectId: string, type: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).setProjectGridTypeUsingPOST(projectId, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 设置项目状态
         * @param {string} projectId projectId
         * @param {string} status status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setProjectStatusUsingPOST(projectId: string, status: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).setProjectStatusUsingPOST(projectId, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改账号是否为项目参与者
         * @param {boolean} onOff onOff
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async switchParticipationStatusUsingPUT(onOff: boolean, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).switchParticipationStatusUsingPUT(onOff, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改项目属性
         * @param {Project} project project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectByConditionUsingPOST(project: Project, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).updateProjectByConditionUsingPOST(project, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改项目名称
         * @param {string} name 项目新名称
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectUsingPOST2(name: string, projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).updateProjectUsingPOST2(name, projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据id修改项目属性
         * @param {string} projectId projectId
         * @param {ProjectModification} project project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectUsingPUT(projectId: string, project: ProjectModification, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProjectVO>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).updateProjectUsingPUT(projectId, project, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据id修改项目属性
         * @param {string} projectId projectId
         * @param {ProjectModificationV2} project project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectV2UsingPUT(projectId: string, project: ProjectModificationV2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseProjectVO>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).updateProjectV2UsingPUT(projectId, project, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改项目可见性
         * @param {string} projectId projectId
         * @param {'None' | 'Global' | 'Enterprise' | 'Project'} visibility visibility
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectVisibilityUsingPUT(projectId: string, visibility: 'None' | 'Global' | 'Enterprise' | 'Project', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await ProjectApiAxiosParamCreator(configuration).updateProjectVisibilityUsingPUT(projectId, visibility, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 将用户添加到项目中
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToProjectUsingPOST(projectId: string, userId: string, options?: any): AxiosPromise<ResponseVoid> {
            return ProjectApiFp(configuration).addUserToProjectUsingPOST(projectId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 将用户添加到项目中
         * @param {string} projectId projectId
         * @param {Array<string>} userIds userIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsersIntoProjectUsingPOST(projectId: string, userIds: Array<string>, options?: any): AxiosPromise<ResponseVoid> {
            return ProjectApiFp(configuration).addUsersIntoProjectUsingPOST(projectId, userIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量将用户加入项目，并指定角色
         * @param {string} projectId projectId
         * @param {UserRoleCreation} userRoleCreation userRoleCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsersToProjectWithRoleUsingPOST(projectId: string, userRoleCreation: UserRoleCreation, options?: any): AxiosPromise<ResponseVoid> {
            return ProjectApiFp(configuration).addUsersToProjectWithRoleUsingPOST(projectId, userRoleCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量将用户加入项目，并指定角色v2
         * @param {string} projectId projectId
         * @param {UserRoleCreationV2} userRoleCreationV2 userRoleCreationV2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsersToProjectWithRoleV2UsingPOST(projectId: string, userRoleCreationV2: UserRoleCreationV2, options?: any): AxiosPromise<ResponseVoid> {
            return ProjectApiFp(configuration).addUsersToProjectWithRoleV2UsingPOST(projectId, userRoleCreationV2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ProjectCreation} projectCreation projectCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectUsingPOST(xGdcUserid: string, projectCreation: ProjectCreation, options?: any): AxiosPromise<ResponseProjectVO> {
            return ProjectApiFp(configuration).createProjectUsingPOST(xGdcUserid, projectCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建项目
         * @param {string} project 项目信息对象
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectUsingPUT(project: string, xGdcUserid?: string, options?: any): AxiosPromise<Project> {
            return ProjectApiFp(configuration).createProjectUsingPUT(project, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ProjectCreationV2} projectCreation projectCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectV3UsingPOST(xGdcUserid: string, projectCreation: ProjectCreationV2, options?: any): AxiosPromise<ResponseProjectVO> {
            return ProjectApiFp(configuration).createProjectV3UsingPOST(xGdcUserid, projectCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除项目
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectByIdUsingDELETE(projectId: string, options?: any): AxiosPromise<ResponseVoid> {
            return ProjectApiFp(configuration).deleteProjectByIdUsingDELETE(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除项目
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectByIdUsingDELETE1(projectId: string, xGdcUserid: string, options?: any): AxiosPromise<ResponseProjectDeletable> {
            return ProjectApiFp(configuration).deleteProjectByIdUsingDELETE1(projectId, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 逻辑删除项目
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectUsingDELETE2(projectId: string, options?: any): AxiosPromise<ResponseVoid> {
            return ProjectApiFp(configuration).deleteProjectUsingDELETE2(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 将用户从项目中移除
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserFromProjectUsingDELETE(projectId: string, userId: string, options?: any): AxiosPromise<ResponseVoid> {
            return ProjectApiFp(configuration).deleteUserFromProjectUsingDELETE(projectId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目列表
         * @param {string} xGdcUserid x-gdc-userid
         * @param {'DEFAULT' | 'ARCHIVE' | 'OWNER'} [scenario] scenario
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectsUsingGET(xGdcUserid: string, scenario?: 'DEFAULT' | 'ARCHIVE' | 'OWNER', options?: any): AxiosPromise<Array<Project>> {
            return ProjectApiFp(configuration).getAllProjectsUsingGET(xGdcUserid, scenario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取所有的示例项目
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSampleProjectsUsingGET(options?: any): AxiosPromise<ResponseListProjectVO> {
            return ProjectApiFp(configuration).getAllSampleProjectsUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取当前项目下所有用户(带角色)
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserRolesInProjectUsingGET(projectId: string, options?: any): AxiosPromise<ResponseListUserRoleVO> {
            return ProjectApiFp(configuration).getAllUserRolesInProjectUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目所有成员
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersInProjectUsingGET(projectId: string, options?: any): AxiosPromise<ResponseCollectionUser> {
            return ProjectApiFp(configuration).getAllUsersInProjectUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取当前项目使用的轴网类型
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectGridTypeUsingGET(projectId: string, options?: any): AxiosPromise<Responseint> {
            return ProjectApiFp(configuration).getProjectGridTypeUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询项目详情
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectUsingGET(projectId: string, options?: any): AxiosPromise<Project> {
            return ProjectApiFp(configuration).getProjectUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询项目详情
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectV2UsingGET(projectId: string, options?: any): AxiosPromise<ResponseProjectVO> {
            return ProjectApiFp(configuration).getProjectV2UsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据id批量查询项目信息
         * @param {Array<string>} projectIds projectIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsByIdsUsingPOST(projectIds: Array<string>, options?: any): AxiosPromise<ResponseListProjectVO> {
            return ProjectApiFp(configuration).getProjectsByIdsUsingPOST(projectIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取我创建的项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsByOwnerUsingGET(xGdcUserid: string, options?: any): AxiosPromise<ResponseListProjectVO> {
            return ProjectApiFp(configuration).getProjectsByOwnerUsingGET(xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询指定状态的项目
         * @param {'Ongoing' | 'Suspended' | 'Completed'} status status
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsByStatusUsingGET(status: 'Ongoing' | 'Suspended' | 'Completed', xGdcUserid: string, options?: any): AxiosPromise<Array<Project>> {
            return ProjectApiFp(configuration).getProjectsByStatusUsingGET(status, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询符合条件的项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Project} project project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsUsingPOST(xGdcUserid: string, project: Project, options?: any): AxiosPromise<Array<Project>> {
            return ProjectApiFp(configuration).getProjectsUsingPOST(xGdcUserid, project, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取当前项目下指定用户(带角色)
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRolesInProjectUsingGET(projectId: string, userId: string, options?: any): AxiosPromise<ResponseUserRoleVO> {
            return ProjectApiFp(configuration).getUserRolesInProjectUsingGET(projectId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 检测项目是否可被删除
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isProjectDeletableUsingGET(projectId: string, options?: any): AxiosPromise<ResponseProjectDeletable> {
            return ProjectApiFp(configuration).isProjectDeletableUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 设置当前项目使用的轴网类型
         * @param {string} projectId projectId
         * @param {number} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProjectGridType2UsingPOST(projectId: string, type: number, options?: any): AxiosPromise<Responseint> {
            return ProjectApiFp(configuration).setProjectGridType2UsingPOST(projectId, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 设置当前项目使用的轴网类型
         * @param {string} projectId projectId
         * @param {number} type type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProjectGridTypeUsingPOST(projectId: string, type: number, options?: any): AxiosPromise<Responseint> {
            return ProjectApiFp(configuration).setProjectGridTypeUsingPOST(projectId, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 设置项目状态
         * @param {string} projectId projectId
         * @param {string} status status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProjectStatusUsingPOST(projectId: string, status: string, options?: any): AxiosPromise<number> {
            return ProjectApiFp(configuration).setProjectStatusUsingPOST(projectId, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改账号是否为项目参与者
         * @param {boolean} onOff onOff
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        switchParticipationStatusUsingPUT(onOff: boolean, xGdcUserid: string, options?: any): AxiosPromise<ResponseVoid> {
            return ProjectApiFp(configuration).switchParticipationStatusUsingPUT(onOff, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改项目属性
         * @param {Project} project project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectByConditionUsingPOST(project: Project, options?: any): AxiosPromise<ResponseVoid> {
            return ProjectApiFp(configuration).updateProjectByConditionUsingPOST(project, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改项目名称
         * @param {string} name 项目新名称
         * @param {string} projectId 项目Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectUsingPOST2(name: string, projectId: string, options?: any): AxiosPromise<ResponseVoid> {
            return ProjectApiFp(configuration).updateProjectUsingPOST2(name, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据id修改项目属性
         * @param {string} projectId projectId
         * @param {ProjectModification} project project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectUsingPUT(projectId: string, project: ProjectModification, options?: any): AxiosPromise<ResponseProjectVO> {
            return ProjectApiFp(configuration).updateProjectUsingPUT(projectId, project, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据id修改项目属性
         * @param {string} projectId projectId
         * @param {ProjectModificationV2} project project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectV2UsingPUT(projectId: string, project: ProjectModificationV2, options?: any): AxiosPromise<ResponseProjectVO> {
            return ProjectApiFp(configuration).updateProjectV2UsingPUT(projectId, project, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改项目可见性
         * @param {string} projectId projectId
         * @param {'None' | 'Global' | 'Enterprise' | 'Project'} visibility visibility
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectVisibilityUsingPUT(projectId: string, visibility: 'None' | 'Global' | 'Enterprise' | 'Project', options?: any): AxiosPromise<ResponseVoid> {
            return ProjectApiFp(configuration).updateProjectVisibilityUsingPUT(projectId, visibility, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * 
     * @summary 将用户添加到项目中
     * @param {string} projectId projectId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public addUserToProjectUsingPOST(projectId: string, userId: string, options?: any) {
        return ProjectApiFp(this.configuration).addUserToProjectUsingPOST(projectId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 将用户添加到项目中
     * @param {string} projectId projectId
     * @param {Array<string>} userIds userIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public addUsersIntoProjectUsingPOST(projectId: string, userIds: Array<string>, options?: any) {
        return ProjectApiFp(this.configuration).addUsersIntoProjectUsingPOST(projectId, userIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量将用户加入项目，并指定角色
     * @param {string} projectId projectId
     * @param {UserRoleCreation} userRoleCreation userRoleCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public addUsersToProjectWithRoleUsingPOST(projectId: string, userRoleCreation: UserRoleCreation, options?: any) {
        return ProjectApiFp(this.configuration).addUsersToProjectWithRoleUsingPOST(projectId, userRoleCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量将用户加入项目，并指定角色v2
     * @param {string} projectId projectId
     * @param {UserRoleCreationV2} userRoleCreationV2 userRoleCreationV2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public addUsersToProjectWithRoleV2UsingPOST(projectId: string, userRoleCreationV2: UserRoleCreationV2, options?: any) {
        return ProjectApiFp(this.configuration).addUsersToProjectWithRoleV2UsingPOST(projectId, userRoleCreationV2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建项目
     * @param {string} xGdcUserid x-gdc-userid
     * @param {ProjectCreation} projectCreation projectCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public createProjectUsingPOST(xGdcUserid: string, projectCreation: ProjectCreation, options?: any) {
        return ProjectApiFp(this.configuration).createProjectUsingPOST(xGdcUserid, projectCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建项目
     * @param {string} project 项目信息对象
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public createProjectUsingPUT(project: string, xGdcUserid?: string, options?: any) {
        return ProjectApiFp(this.configuration).createProjectUsingPUT(project, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建项目
     * @param {string} xGdcUserid x-gdc-userid
     * @param {ProjectCreationV2} projectCreation projectCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public createProjectV3UsingPOST(xGdcUserid: string, projectCreation: ProjectCreationV2, options?: any) {
        return ProjectApiFp(this.configuration).createProjectV3UsingPOST(xGdcUserid, projectCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除项目
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public deleteProjectByIdUsingDELETE(projectId: string, options?: any) {
        return ProjectApiFp(this.configuration).deleteProjectByIdUsingDELETE(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除项目
     * @param {string} projectId projectId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public deleteProjectByIdUsingDELETE1(projectId: string, xGdcUserid: string, options?: any) {
        return ProjectApiFp(this.configuration).deleteProjectByIdUsingDELETE1(projectId, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 逻辑删除项目
     * @param {string} projectId 项目Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public deleteProjectUsingDELETE2(projectId: string, options?: any) {
        return ProjectApiFp(this.configuration).deleteProjectUsingDELETE2(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 将用户从项目中移除
     * @param {string} projectId projectId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public deleteUserFromProjectUsingDELETE(projectId: string, userId: string, options?: any) {
        return ProjectApiFp(this.configuration).deleteUserFromProjectUsingDELETE(projectId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目列表
     * @param {string} xGdcUserid x-gdc-userid
     * @param {'DEFAULT' | 'ARCHIVE' | 'OWNER'} [scenario] scenario
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getAllProjectsUsingGET(xGdcUserid: string, scenario?: 'DEFAULT' | 'ARCHIVE' | 'OWNER', options?: any) {
        return ProjectApiFp(this.configuration).getAllProjectsUsingGET(xGdcUserid, scenario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取所有的示例项目
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getAllSampleProjectsUsingGET(options?: any) {
        return ProjectApiFp(this.configuration).getAllSampleProjectsUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取当前项目下所有用户(带角色)
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getAllUserRolesInProjectUsingGET(projectId: string, options?: any) {
        return ProjectApiFp(this.configuration).getAllUserRolesInProjectUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目所有成员
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getAllUsersInProjectUsingGET(projectId: string, options?: any) {
        return ProjectApiFp(this.configuration).getAllUsersInProjectUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取当前项目使用的轴网类型
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectGridTypeUsingGET(projectId: string, options?: any) {
        return ProjectApiFp(this.configuration).getProjectGridTypeUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询项目详情
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectUsingGET(projectId: string, options?: any) {
        return ProjectApiFp(this.configuration).getProjectUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询项目详情
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectV2UsingGET(projectId: string, options?: any) {
        return ProjectApiFp(this.configuration).getProjectV2UsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据id批量查询项目信息
     * @param {Array<string>} projectIds projectIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectsByIdsUsingPOST(projectIds: Array<string>, options?: any) {
        return ProjectApiFp(this.configuration).getProjectsByIdsUsingPOST(projectIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取我创建的项目
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectsByOwnerUsingGET(xGdcUserid: string, options?: any) {
        return ProjectApiFp(this.configuration).getProjectsByOwnerUsingGET(xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询指定状态的项目
     * @param {'Ongoing' | 'Suspended' | 'Completed'} status status
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectsByStatusUsingGET(status: 'Ongoing' | 'Suspended' | 'Completed', xGdcUserid: string, options?: any) {
        return ProjectApiFp(this.configuration).getProjectsByStatusUsingGET(status, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询符合条件的项目
     * @param {string} xGdcUserid x-gdc-userid
     * @param {Project} project project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectsUsingPOST(xGdcUserid: string, project: Project, options?: any) {
        return ProjectApiFp(this.configuration).getProjectsUsingPOST(xGdcUserid, project, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取当前项目下指定用户(带角色)
     * @param {string} projectId projectId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getUserRolesInProjectUsingGET(projectId: string, userId: string, options?: any) {
        return ProjectApiFp(this.configuration).getUserRolesInProjectUsingGET(projectId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 检测项目是否可被删除
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public isProjectDeletableUsingGET(projectId: string, options?: any) {
        return ProjectApiFp(this.configuration).isProjectDeletableUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 设置当前项目使用的轴网类型
     * @param {string} projectId projectId
     * @param {number} type type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public setProjectGridType2UsingPOST(projectId: string, type: number, options?: any) {
        return ProjectApiFp(this.configuration).setProjectGridType2UsingPOST(projectId, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 设置当前项目使用的轴网类型
     * @param {string} projectId projectId
     * @param {number} type type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public setProjectGridTypeUsingPOST(projectId: string, type: number, options?: any) {
        return ProjectApiFp(this.configuration).setProjectGridTypeUsingPOST(projectId, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 设置项目状态
     * @param {string} projectId projectId
     * @param {string} status status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public setProjectStatusUsingPOST(projectId: string, status: string, options?: any) {
        return ProjectApiFp(this.configuration).setProjectStatusUsingPOST(projectId, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改账号是否为项目参与者
     * @param {boolean} onOff onOff
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public switchParticipationStatusUsingPUT(onOff: boolean, xGdcUserid: string, options?: any) {
        return ProjectApiFp(this.configuration).switchParticipationStatusUsingPUT(onOff, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改项目属性
     * @param {Project} project project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public updateProjectByConditionUsingPOST(project: Project, options?: any) {
        return ProjectApiFp(this.configuration).updateProjectByConditionUsingPOST(project, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改项目名称
     * @param {string} name 项目新名称
     * @param {string} projectId 项目Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public updateProjectUsingPOST2(name: string, projectId: string, options?: any) {
        return ProjectApiFp(this.configuration).updateProjectUsingPOST2(name, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据id修改项目属性
     * @param {string} projectId projectId
     * @param {ProjectModification} project project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public updateProjectUsingPUT(projectId: string, project: ProjectModification, options?: any) {
        return ProjectApiFp(this.configuration).updateProjectUsingPUT(projectId, project, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据id修改项目属性
     * @param {string} projectId projectId
     * @param {ProjectModificationV2} project project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public updateProjectV2UsingPUT(projectId: string, project: ProjectModificationV2, options?: any) {
        return ProjectApiFp(this.configuration).updateProjectV2UsingPUT(projectId, project, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改项目可见性
     * @param {string} projectId projectId
     * @param {'None' | 'Global' | 'Enterprise' | 'Project'} visibility visibility
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public updateProjectVisibilityUsingPUT(projectId: string, visibility: 'None' | 'Global' | 'Enterprise' | 'Project', options?: any) {
        return ProjectApiFp(this.configuration).updateProjectVisibilityUsingPUT(projectId, visibility, options).then((request) => request(this.axios, this.basePath));
    }

}

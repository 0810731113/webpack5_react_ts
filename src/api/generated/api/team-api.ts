// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResponseListTeam } from '../model';
// @ts-ignore
import { ResponseListTeamDataSets } from '../model';
// @ts-ignore
import { ResponseListTeamVO } from '../model';
// @ts-ignore
import { ResponseListUserRoleVO } from '../model';
// @ts-ignore
import { ResponseListUserTeamVO } from '../model';
// @ts-ignore
import { ResponseTeam } from '../model';
// @ts-ignore
import { ResponseTeamVO } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
// @ts-ignore
import { Responsestring } from '../model';
// @ts-ignore
import { Team } from '../model';
// @ts-ignore
import { TeamCreation } from '../model';
// @ts-ignore
import { TeamModification } from '../model';
/**
 * TeamApi - axios parameter creator
 * @export
 */
export const TeamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 将用户加入团队中
         * @param {string} teamId teamId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToTeamUsingPOST: async (teamId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling addUserToTeamUsingPOST.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling addUserToTeamUsingPOST.');
            }
            const localVarPath = `/teams/{teamId}/users/{userId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 将用户添加到团队中
         * @param {string} teamId teamId
         * @param {Array<string>} userIds userIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsersIntoTeamUsingPOST: async (teamId: string, userIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling addUsersIntoTeamUsingPOST.');
            }
            // verify required parameter 'userIds' is not null or undefined
            if (userIds === null || userIds === undefined) {
                throw new RequiredError('userIds','Required parameter userIds was null or undefined when calling addUsersIntoTeamUsingPOST.');
            }
            const localVarPath = `/teams/{teamId}/users`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userIds !== undefined ? userIds : {}) : (userIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建团队
         * @param {string} xGdcUserid x-gdc-userid
         * @param {TeamCreation} teamCreation teamCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamUsingPOST: async (xGdcUserid: string, teamCreation: TeamCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling createTeamUsingPOST.');
            }
            // verify required parameter 'teamCreation' is not null or undefined
            if (teamCreation === null || teamCreation === undefined) {
                throw new RequiredError('teamCreation','Required parameter teamCreation was null or undefined when calling createTeamUsingPOST.');
            }
            const localVarPath = `/v2/teams`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof teamCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(teamCreation !== undefined ? teamCreation : {}) : (teamCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建团队
         * @param {Team} team team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamUsingPUT: async (team: Team, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'team' is not null or undefined
            if (team === null || team === undefined) {
                throw new RequiredError('team','Required parameter team was null or undefined when calling createTeamUsingPUT.');
            }
            const localVarPath = `/team`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof team !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(team !== undefined ? team : {}) : (team || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除指定团队
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeamByIdUsingDELETE: async (teamId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling deleteTeamByIdUsingDELETE.');
            }
            const localVarPath = `/v2/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除指定团队
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeamUsingDELETE: async (teamId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling deleteTeamUsingDELETE.');
            }
            const localVarPath = `/team`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (teamId !== undefined) {
                localVarQueryParameter['teamId'] = teamId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 将用户移出团队
         * @param {string} teamId teamId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersFromTeamUsingDELETE: async (teamId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling deleteUsersFromTeamUsingDELETE.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteUsersFromTeamUsingDELETE.');
            }
            const localVarPath = `/teams/{teamId}/users/{userId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目下的所有团队信息
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTeamsInProjectUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getAllTeamsInProjectUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/teams`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取团队信息
         * @param {Team} team team
         * @param {boolean} [myTeam] myTeam
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTeamsUsingPOST: async (team: Team, myTeam?: boolean, xGdcUserid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'team' is not null or undefined
            if (team === null || team === undefined) {
                throw new RequiredError('team','Required parameter team was null or undefined when calling getAllTeamsUsingPOST.');
            }
            const localVarPath = `/teams`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (myTeam !== undefined) {
                localVarQueryParameter['myTeam'] = myTeam;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof team !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(team !== undefined ? team : {}) : (team || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取当前团队下所有用户(带角色)
         * @param {string} projectId projectId
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserRolesInTeamUsingGET: async (projectId: string, teamId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getAllUserRolesInTeamUsingGET.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getAllUserRolesInTeamUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/teams/{teamId}/userRoles`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取团队所有成员
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersInTeamUsingGET: async (teamId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getAllUsersInTeamUsingGET.');
            }
            const localVarPath = `/teams/{teamId}/users`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取工作单元所在的团队信息
         * @param {string} dataSetId dataSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamByDataSetUsingGET: async (dataSetId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new RequiredError('dataSetId','Required parameter dataSetId was null or undefined when calling getTeamByDataSetUsingGET.');
            }
            const localVarPath = `/team/byDataSet`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dataSetId !== undefined) {
                localVarQueryParameter['dataSetId'] = dataSetId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据folder查询team
         * @param {string} folderId folderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamByFolderIdUsingGET: async (folderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            if (folderId === null || folderId === undefined) {
                throw new RequiredError('folderId','Required parameter folderId was null or undefined when calling getTeamByFolderIdUsingGET.');
            }
            const localVarPath = `/team`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据id获取团队信息
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamUsingGET: async (teamId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getTeamUsingGET.');
            }
            const localVarPath = `/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量获取dataset所在的团队信息
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsByDataSetsUsingPOST: async (dataSetIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetIds' is not null or undefined
            if (dataSetIds === null || dataSetIds === undefined) {
                throw new RequiredError('dataSetIds','Required parameter dataSetIds was null or undefined when calling getTeamsByDataSetsUsingPOST.');
            }
            const localVarPath = `/search/teams/bydatasets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dataSetIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dataSetIds !== undefined ? dataSetIds : {}) : (dataSetIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据id批量获取团队
         * @param {Array<string>} teamIds teamIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsByIdsUsingPOST: async (teamIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamIds' is not null or undefined
            if (teamIds === null || teamIds === undefined) {
                throw new RequiredError('teamIds','Required parameter teamIds was null or undefined when calling getTeamsByIdsUsingPOST.');
            }
            const localVarPath = `/teams/ids/batch`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof teamIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(teamIds !== undefined ? teamIds : {}) : (teamIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取成员在某个项目下的所有团队
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsOfUserInProjectUsingGET: async (projectId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getTeamsOfUserInProjectUsingGET.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getTeamsOfUserInProjectUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/users/{userId}/teams`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改团队的名称和描述
         * @param {string} teamId teamId
         * @param {TeamModification} modification modification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeamByIdUsingPUT: async (teamId: string, modification: TeamModification, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling updateTeamByIdUsingPUT.');
            }
            // verify required parameter 'modification' is not null or undefined
            if (modification === null || modification === undefined) {
                throw new RequiredError('modification','Required parameter modification was null or undefined when calling updateTeamByIdUsingPUT.');
            }
            const localVarPath = `/v2/teams/{teamId}/update`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof modification !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(modification !== undefined ? modification : {}) : (modification || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改团队属性
         * @param {Team} team team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTreeNodeUsingPOST: async (team: Team, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'team' is not null or undefined
            if (team === null || team === undefined) {
                throw new RequiredError('team','Required parameter team was null or undefined when calling updateTreeNodeUsingPOST.');
            }
            const localVarPath = `/team/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof team !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(team !== undefined ? team : {}) : (team || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamApi - functional programming interface
 * @export
 */
export const TeamApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 将用户加入团队中
         * @param {string} teamId teamId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserToTeamUsingPOST(teamId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).addUserToTeamUsingPOST(teamId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 将用户添加到团队中
         * @param {string} teamId teamId
         * @param {Array<string>} userIds userIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUsersIntoTeamUsingPOST(teamId: string, userIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).addUsersIntoTeamUsingPOST(teamId, userIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建团队
         * @param {string} xGdcUserid x-gdc-userid
         * @param {TeamCreation} teamCreation teamCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeamUsingPOST(xGdcUserid: string, teamCreation: TeamCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTeamVO>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).createTeamUsingPOST(xGdcUserid, teamCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建团队
         * @param {Team} team team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeamUsingPUT(team: Team, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTeam>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).createTeamUsingPUT(team, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除指定团队
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeamByIdUsingDELETE(teamId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).deleteTeamByIdUsingDELETE(teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除指定团队
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeamUsingDELETE(teamId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responsestring>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).deleteTeamUsingDELETE(teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 将用户移出团队
         * @param {string} teamId teamId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsersFromTeamUsingDELETE(teamId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).deleteUsersFromTeamUsingDELETE(teamId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目下的所有团队信息
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTeamsInProjectUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListTeam>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).getAllTeamsInProjectUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取团队信息
         * @param {Team} team team
         * @param {boolean} [myTeam] myTeam
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTeamsUsingPOST(team: Team, myTeam?: boolean, xGdcUserid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListTeam>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).getAllTeamsUsingPOST(team, myTeam, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取当前团队下所有用户(带角色)
         * @param {string} projectId projectId
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserRolesInTeamUsingGET(projectId: string, teamId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListUserRoleVO>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).getAllUserRolesInTeamUsingGET(projectId, teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取团队所有成员
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsersInTeamUsingGET(teamId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListUserTeamVO>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).getAllUsersInTeamUsingGET(teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取工作单元所在的团队信息
         * @param {string} dataSetId dataSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamByDataSetUsingGET(dataSetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTeamVO>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).getTeamByDataSetUsingGET(dataSetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据folder查询team
         * @param {string} folderId folderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamByFolderIdUsingGET(folderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTeamVO>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).getTeamByFolderIdUsingGET(folderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据id获取团队信息
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamUsingGET(teamId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTeam>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).getTeamUsingGET(teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量获取dataset所在的团队信息
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamsByDataSetsUsingPOST(dataSetIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListTeamDataSets>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).getTeamsByDataSetsUsingPOST(dataSetIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据id批量获取团队
         * @param {Array<string>} teamIds teamIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamsByIdsUsingPOST(teamIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListTeam>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).getTeamsByIdsUsingPOST(teamIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取成员在某个项目下的所有团队
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamsOfUserInProjectUsingGET(projectId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListTeamVO>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).getTeamsOfUserInProjectUsingGET(projectId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改团队的名称和描述
         * @param {string} teamId teamId
         * @param {TeamModification} modification modification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTeamByIdUsingPUT(teamId: string, modification: TeamModification, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).updateTeamByIdUsingPUT(teamId, modification, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改团队属性
         * @param {Team} team team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTreeNodeUsingPOST(team: Team, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await TeamApiAxiosParamCreator(configuration).updateTreeNodeUsingPOST(team, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TeamApi - factory interface
 * @export
 */
export const TeamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 将用户加入团队中
         * @param {string} teamId teamId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToTeamUsingPOST(teamId: string, userId: string, options?: any): AxiosPromise<ResponseVoid> {
            return TeamApiFp(configuration).addUserToTeamUsingPOST(teamId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 将用户添加到团队中
         * @param {string} teamId teamId
         * @param {Array<string>} userIds userIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUsersIntoTeamUsingPOST(teamId: string, userIds: Array<string>, options?: any): AxiosPromise<ResponseVoid> {
            return TeamApiFp(configuration).addUsersIntoTeamUsingPOST(teamId, userIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建团队
         * @param {string} xGdcUserid x-gdc-userid
         * @param {TeamCreation} teamCreation teamCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamUsingPOST(xGdcUserid: string, teamCreation: TeamCreation, options?: any): AxiosPromise<ResponseTeamVO> {
            return TeamApiFp(configuration).createTeamUsingPOST(xGdcUserid, teamCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建团队
         * @param {Team} team team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamUsingPUT(team: Team, options?: any): AxiosPromise<ResponseTeam> {
            return TeamApiFp(configuration).createTeamUsingPUT(team, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除指定团队
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeamByIdUsingDELETE(teamId: string, options?: any): AxiosPromise<ResponseVoid> {
            return TeamApiFp(configuration).deleteTeamByIdUsingDELETE(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除指定团队
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeamUsingDELETE(teamId: string, options?: any): AxiosPromise<Responsestring> {
            return TeamApiFp(configuration).deleteTeamUsingDELETE(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 将用户移出团队
         * @param {string} teamId teamId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersFromTeamUsingDELETE(teamId: string, userId: string, options?: any): AxiosPromise<ResponseVoid> {
            return TeamApiFp(configuration).deleteUsersFromTeamUsingDELETE(teamId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目下的所有团队信息
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTeamsInProjectUsingGET(projectId: string, options?: any): AxiosPromise<ResponseListTeam> {
            return TeamApiFp(configuration).getAllTeamsInProjectUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取团队信息
         * @param {Team} team team
         * @param {boolean} [myTeam] myTeam
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTeamsUsingPOST(team: Team, myTeam?: boolean, xGdcUserid?: string, options?: any): AxiosPromise<ResponseListTeam> {
            return TeamApiFp(configuration).getAllTeamsUsingPOST(team, myTeam, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取当前团队下所有用户(带角色)
         * @param {string} projectId projectId
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserRolesInTeamUsingGET(projectId: string, teamId: string, options?: any): AxiosPromise<ResponseListUserRoleVO> {
            return TeamApiFp(configuration).getAllUserRolesInTeamUsingGET(projectId, teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取团队所有成员
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersInTeamUsingGET(teamId: string, options?: any): AxiosPromise<ResponseListUserTeamVO> {
            return TeamApiFp(configuration).getAllUsersInTeamUsingGET(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取工作单元所在的团队信息
         * @param {string} dataSetId dataSetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamByDataSetUsingGET(dataSetId: string, options?: any): AxiosPromise<ResponseTeamVO> {
            return TeamApiFp(configuration).getTeamByDataSetUsingGET(dataSetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据folder查询team
         * @param {string} folderId folderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamByFolderIdUsingGET(folderId: string, options?: any): AxiosPromise<ResponseTeamVO> {
            return TeamApiFp(configuration).getTeamByFolderIdUsingGET(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据id获取团队信息
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamUsingGET(teamId: string, options?: any): AxiosPromise<ResponseTeam> {
            return TeamApiFp(configuration).getTeamUsingGET(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量获取dataset所在的团队信息
         * @param {Array<string>} dataSetIds dataSetIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsByDataSetsUsingPOST(dataSetIds: Array<string>, options?: any): AxiosPromise<ResponseListTeamDataSets> {
            return TeamApiFp(configuration).getTeamsByDataSetsUsingPOST(dataSetIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据id批量获取团队
         * @param {Array<string>} teamIds teamIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsByIdsUsingPOST(teamIds: Array<string>, options?: any): AxiosPromise<ResponseListTeam> {
            return TeamApiFp(configuration).getTeamsByIdsUsingPOST(teamIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取成员在某个项目下的所有团队
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsOfUserInProjectUsingGET(projectId: string, userId: string, options?: any): AxiosPromise<ResponseListTeamVO> {
            return TeamApiFp(configuration).getTeamsOfUserInProjectUsingGET(projectId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改团队的名称和描述
         * @param {string} teamId teamId
         * @param {TeamModification} modification modification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeamByIdUsingPUT(teamId: string, modification: TeamModification, options?: any): AxiosPromise<ResponseVoid> {
            return TeamApiFp(configuration).updateTeamByIdUsingPUT(teamId, modification, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改团队属性
         * @param {Team} team team
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTreeNodeUsingPOST(team: Team, options?: any): AxiosPromise<ResponseVoid> {
            return TeamApiFp(configuration).updateTreeNodeUsingPOST(team, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamApi - object-oriented interface
 * @export
 * @class TeamApi
 * @extends {BaseAPI}
 */
export class TeamApi extends BaseAPI {
    /**
     * 
     * @summary 将用户加入团队中
     * @param {string} teamId teamId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public addUserToTeamUsingPOST(teamId: string, userId: string, options?: any) {
        return TeamApiFp(this.configuration).addUserToTeamUsingPOST(teamId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 将用户添加到团队中
     * @param {string} teamId teamId
     * @param {Array<string>} userIds userIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public addUsersIntoTeamUsingPOST(teamId: string, userIds: Array<string>, options?: any) {
        return TeamApiFp(this.configuration).addUsersIntoTeamUsingPOST(teamId, userIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建团队
     * @param {string} xGdcUserid x-gdc-userid
     * @param {TeamCreation} teamCreation teamCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public createTeamUsingPOST(xGdcUserid: string, teamCreation: TeamCreation, options?: any) {
        return TeamApiFp(this.configuration).createTeamUsingPOST(xGdcUserid, teamCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建团队
     * @param {Team} team team
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public createTeamUsingPUT(team: Team, options?: any) {
        return TeamApiFp(this.configuration).createTeamUsingPUT(team, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除指定团队
     * @param {string} teamId teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public deleteTeamByIdUsingDELETE(teamId: string, options?: any) {
        return TeamApiFp(this.configuration).deleteTeamByIdUsingDELETE(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除指定团队
     * @param {string} teamId teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public deleteTeamUsingDELETE(teamId: string, options?: any) {
        return TeamApiFp(this.configuration).deleteTeamUsingDELETE(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 将用户移出团队
     * @param {string} teamId teamId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public deleteUsersFromTeamUsingDELETE(teamId: string, userId: string, options?: any) {
        return TeamApiFp(this.configuration).deleteUsersFromTeamUsingDELETE(teamId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目下的所有团队信息
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getAllTeamsInProjectUsingGET(projectId: string, options?: any) {
        return TeamApiFp(this.configuration).getAllTeamsInProjectUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取团队信息
     * @param {Team} team team
     * @param {boolean} [myTeam] myTeam
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getAllTeamsUsingPOST(team: Team, myTeam?: boolean, xGdcUserid?: string, options?: any) {
        return TeamApiFp(this.configuration).getAllTeamsUsingPOST(team, myTeam, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取当前团队下所有用户(带角色)
     * @param {string} projectId projectId
     * @param {string} teamId teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getAllUserRolesInTeamUsingGET(projectId: string, teamId: string, options?: any) {
        return TeamApiFp(this.configuration).getAllUserRolesInTeamUsingGET(projectId, teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取团队所有成员
     * @param {string} teamId teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getAllUsersInTeamUsingGET(teamId: string, options?: any) {
        return TeamApiFp(this.configuration).getAllUsersInTeamUsingGET(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取工作单元所在的团队信息
     * @param {string} dataSetId dataSetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getTeamByDataSetUsingGET(dataSetId: string, options?: any) {
        return TeamApiFp(this.configuration).getTeamByDataSetUsingGET(dataSetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据folder查询team
     * @param {string} folderId folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getTeamByFolderIdUsingGET(folderId: string, options?: any) {
        return TeamApiFp(this.configuration).getTeamByFolderIdUsingGET(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据id获取团队信息
     * @param {string} teamId teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getTeamUsingGET(teamId: string, options?: any) {
        return TeamApiFp(this.configuration).getTeamUsingGET(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量获取dataset所在的团队信息
     * @param {Array<string>} dataSetIds dataSetIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getTeamsByDataSetsUsingPOST(dataSetIds: Array<string>, options?: any) {
        return TeamApiFp(this.configuration).getTeamsByDataSetsUsingPOST(dataSetIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据id批量获取团队
     * @param {Array<string>} teamIds teamIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getTeamsByIdsUsingPOST(teamIds: Array<string>, options?: any) {
        return TeamApiFp(this.configuration).getTeamsByIdsUsingPOST(teamIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取成员在某个项目下的所有团队
     * @param {string} projectId projectId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getTeamsOfUserInProjectUsingGET(projectId: string, userId: string, options?: any) {
        return TeamApiFp(this.configuration).getTeamsOfUserInProjectUsingGET(projectId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改团队的名称和描述
     * @param {string} teamId teamId
     * @param {TeamModification} modification modification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public updateTeamByIdUsingPUT(teamId: string, modification: TeamModification, options?: any) {
        return TeamApiFp(this.configuration).updateTeamByIdUsingPUT(teamId, modification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改团队属性
     * @param {Team} team team
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public updateTreeNodeUsingPOST(team: Team, options?: any) {
        return TeamApiFp(this.configuration).updateTreeNodeUsingPOST(team, options).then((request) => request(this.axios, this.basePath));
    }

}

// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResponseListConsumeResponse } from '../model';
// @ts-ignore
import { ResponseListSharePackageVO } from '../model';
// @ts-ignore
import { ResponseListShareRecord } from '../model';
// @ts-ignore
import { ResponseListShareRecordVO } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
// @ts-ignore
import { ShareRecord } from '../model';
// @ts-ignore
import { ShareRecordUpdate } from '../model';
// @ts-ignore
import { ShareRequest } from '../model';
/**
 * ShareApi - axios parameter creator
 * @export
 */
export const ShareApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 接受提资
         * @param {string} shareRecordId shareRecordId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptShareDataUsingPOST: async (shareRecordId: string, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareRecordId' is not null or undefined
            if (shareRecordId === null || shareRecordId === undefined) {
                throw new RequiredError('shareRecordId','Required parameter shareRecordId was null or undefined when calling acceptShareDataUsingPOST.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling acceptShareDataUsingPOST.');
            }
            const localVarPath = `/share/accept/{shareRecordId}`
                .replace(`{${"shareRecordId"}}`, encodeURIComponent(String(shareRecordId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建资料包
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ShareRequest} shareRequest shareRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShareDataUsingPUT: async (xGdcUserid: string, shareRequest: ShareRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling createShareDataUsingPUT.');
            }
            // verify required parameter 'shareRequest' is not null or undefined
            if (shareRequest === null || shareRequest === undefined) {
                throw new RequiredError('shareRequest','Required parameter shareRequest was null or undefined when calling createShareDataUsingPUT.');
            }
            const localVarPath = `/share`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof shareRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(shareRequest !== undefined ? shareRequest : {}) : (shareRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询受资记录
         * @param {string} [consumeUserId] consumeUserId
         * @param {string} [consumedId] consumedId
         * @param {Array<'Temporary' | 'Shared' | 'Consumed'>} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsumeRecordsUsingGET: async (consumeUserId?: string, consumedId?: string, status?: Array<'Temporary' | 'Shared' | 'Consumed'>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/share/consume-records`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (consumeUserId !== undefined) {
                localVarQueryParameter['consumeUserId'] = consumeUserId;
            }

            if (consumedId !== undefined) {
                localVarQueryParameter['consumedId'] = consumedId;
            }

            if (status) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询提资数组中所有提资所包含的所有数据集
         * @param {Array<string>} shareRecordIds shareRecordIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShareContentsUsingPOST: async (shareRecordIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareRecordIds' is not null or undefined
            if (shareRecordIds === null || shareRecordIds === undefined) {
                throw new RequiredError('shareRecordIds','Required parameter shareRecordIds was null or undefined when calling getShareContentsUsingPOST.');
            }
            const localVarPath = `/share/contents`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof shareRecordIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(shareRecordIds !== undefined ? shareRecordIds : {}) : (shareRecordIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询指定状态的提资资料包
         * @param {string} teamId teamId
         * @param {'Temporary' | 'Shared'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharePackagesUsingGET: async (teamId: string, status?: 'Temporary' | 'Shared', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getSharePackagesUsingGET.');
            }
            const localVarPath = `/teams/{teamId}/sharePackages`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询某次提资
         * @param {ShareRecord} shareRecord shareRecord
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShareRecordsUsingPOST: async (shareRecord: ShareRecord, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareRecord' is not null or undefined
            if (shareRecord === null || shareRecord === undefined) {
                throw new RequiredError('shareRecord','Required parameter shareRecord was null or undefined when calling getShareRecordsUsingPOST.');
            }
            const localVarPath = `/share/records`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof shareRecord !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(shareRecord !== undefined ? shareRecord : {}) : (shareRecord || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 发起提资
         * @param {string} shareRecordId shareRecordId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareDataUsingPOST: async (shareRecordId: string, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareRecordId' is not null or undefined
            if (shareRecordId === null || shareRecordId === undefined) {
                throw new RequiredError('shareRecordId','Required parameter shareRecordId was null or undefined when calling shareDataUsingPOST.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling shareDataUsingPOST.');
            }
            const localVarPath = `/share/{shareRecordId}`
                .replace(`{${"shareRecordId"}}`, encodeURIComponent(String(shareRecordId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量发起提资
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<string>} shareRecordIds shareRecordIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareDatasUsingPUT: async (xGdcUserid: string, shareRecordIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling shareDatasUsingPUT.');
            }
            // verify required parameter 'shareRecordIds' is not null or undefined
            if (shareRecordIds === null || shareRecordIds === undefined) {
                throw new RequiredError('shareRecordIds','Required parameter shareRecordIds was null or undefined when calling shareDatasUsingPUT.');
            }
            const localVarPath = `/share/records/share`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof shareRecordIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(shareRecordIds !== undefined ? shareRecordIds : {}) : (shareRecordIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量更新提资记录
         * @param {ShareRecordUpdate} shareRecordUpdate shareRecordUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShareRecordUsingPUT: async (shareRecordUpdate: ShareRecordUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareRecordUpdate' is not null or undefined
            if (shareRecordUpdate === null || shareRecordUpdate === undefined) {
                throw new RequiredError('shareRecordUpdate','Required parameter shareRecordUpdate was null or undefined when calling updateShareRecordUsingPUT.');
            }
            const localVarPath = `/share/records`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof shareRecordUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(shareRecordUpdate !== undefined ? shareRecordUpdate : {}) : (shareRecordUpdate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShareApi - functional programming interface
 * @export
 */
export const ShareApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 接受提资
         * @param {string} shareRecordId shareRecordId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptShareDataUsingPOST(shareRecordId: string, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).acceptShareDataUsingPOST(shareRecordId, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建资料包
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ShareRequest} shareRequest shareRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShareDataUsingPUT(xGdcUserid: string, shareRequest: ShareRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListShareRecord>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).createShareDataUsingPUT(xGdcUserid, shareRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询受资记录
         * @param {string} [consumeUserId] consumeUserId
         * @param {string} [consumedId] consumedId
         * @param {Array<'Temporary' | 'Shared' | 'Consumed'>} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConsumeRecordsUsingGET(consumeUserId?: string, consumedId?: string, status?: Array<'Temporary' | 'Shared' | 'Consumed'>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListShareRecordVO>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).getConsumeRecordsUsingGET(consumeUserId, consumedId, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询提资数组中所有提资所包含的所有数据集
         * @param {Array<string>} shareRecordIds shareRecordIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShareContentsUsingPOST(shareRecordIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListConsumeResponse>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).getShareContentsUsingPOST(shareRecordIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询指定状态的提资资料包
         * @param {string} teamId teamId
         * @param {'Temporary' | 'Shared'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSharePackagesUsingGET(teamId: string, status?: 'Temporary' | 'Shared', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListSharePackageVO>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).getSharePackagesUsingGET(teamId, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询某次提资
         * @param {ShareRecord} shareRecord shareRecord
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShareRecordsUsingPOST(shareRecord: ShareRecord, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListShareRecord>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).getShareRecordsUsingPOST(shareRecord, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 发起提资
         * @param {string} shareRecordId shareRecordId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareDataUsingPOST(shareRecordId: string, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).shareDataUsingPOST(shareRecordId, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量发起提资
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<string>} shareRecordIds shareRecordIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareDatasUsingPUT(xGdcUserid: string, shareRecordIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).shareDatasUsingPUT(xGdcUserid, shareRecordIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量更新提资记录
         * @param {ShareRecordUpdate} shareRecordUpdate shareRecordUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShareRecordUsingPUT(shareRecordUpdate: ShareRecordUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await ShareApiAxiosParamCreator(configuration).updateShareRecordUsingPUT(shareRecordUpdate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ShareApi - factory interface
 * @export
 */
export const ShareApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 接受提资
         * @param {string} shareRecordId shareRecordId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptShareDataUsingPOST(shareRecordId: string, xGdcUserid: string, options?: any): AxiosPromise<ResponseVoid> {
            return ShareApiFp(configuration).acceptShareDataUsingPOST(shareRecordId, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建资料包
         * @param {string} xGdcUserid x-gdc-userid
         * @param {ShareRequest} shareRequest shareRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShareDataUsingPUT(xGdcUserid: string, shareRequest: ShareRequest, options?: any): AxiosPromise<ResponseListShareRecord> {
            return ShareApiFp(configuration).createShareDataUsingPUT(xGdcUserid, shareRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询受资记录
         * @param {string} [consumeUserId] consumeUserId
         * @param {string} [consumedId] consumedId
         * @param {Array<'Temporary' | 'Shared' | 'Consumed'>} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsumeRecordsUsingGET(consumeUserId?: string, consumedId?: string, status?: Array<'Temporary' | 'Shared' | 'Consumed'>, options?: any): AxiosPromise<ResponseListShareRecordVO> {
            return ShareApiFp(configuration).getConsumeRecordsUsingGET(consumeUserId, consumedId, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询提资数组中所有提资所包含的所有数据集
         * @param {Array<string>} shareRecordIds shareRecordIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShareContentsUsingPOST(shareRecordIds: Array<string>, options?: any): AxiosPromise<ResponseListConsumeResponse> {
            return ShareApiFp(configuration).getShareContentsUsingPOST(shareRecordIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询指定状态的提资资料包
         * @param {string} teamId teamId
         * @param {'Temporary' | 'Shared'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSharePackagesUsingGET(teamId: string, status?: 'Temporary' | 'Shared', options?: any): AxiosPromise<ResponseListSharePackageVO> {
            return ShareApiFp(configuration).getSharePackagesUsingGET(teamId, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询某次提资
         * @param {ShareRecord} shareRecord shareRecord
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShareRecordsUsingPOST(shareRecord: ShareRecord, options?: any): AxiosPromise<ResponseListShareRecord> {
            return ShareApiFp(configuration).getShareRecordsUsingPOST(shareRecord, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 发起提资
         * @param {string} shareRecordId shareRecordId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareDataUsingPOST(shareRecordId: string, xGdcUserid: string, options?: any): AxiosPromise<ResponseVoid> {
            return ShareApiFp(configuration).shareDataUsingPOST(shareRecordId, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量发起提资
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<string>} shareRecordIds shareRecordIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareDatasUsingPUT(xGdcUserid: string, shareRecordIds: Array<string>, options?: any): AxiosPromise<ResponseVoid> {
            return ShareApiFp(configuration).shareDatasUsingPUT(xGdcUserid, shareRecordIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量更新提资记录
         * @param {ShareRecordUpdate} shareRecordUpdate shareRecordUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShareRecordUsingPUT(shareRecordUpdate: ShareRecordUpdate, options?: any): AxiosPromise<ResponseVoid> {
            return ShareApiFp(configuration).updateShareRecordUsingPUT(shareRecordUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShareApi - object-oriented interface
 * @export
 * @class ShareApi
 * @extends {BaseAPI}
 */
export class ShareApi extends BaseAPI {
    /**
     * 
     * @summary 接受提资
     * @param {string} shareRecordId shareRecordId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public acceptShareDataUsingPOST(shareRecordId: string, xGdcUserid: string, options?: any) {
        return ShareApiFp(this.configuration).acceptShareDataUsingPOST(shareRecordId, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建资料包
     * @param {string} xGdcUserid x-gdc-userid
     * @param {ShareRequest} shareRequest shareRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public createShareDataUsingPUT(xGdcUserid: string, shareRequest: ShareRequest, options?: any) {
        return ShareApiFp(this.configuration).createShareDataUsingPUT(xGdcUserid, shareRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询受资记录
     * @param {string} [consumeUserId] consumeUserId
     * @param {string} [consumedId] consumedId
     * @param {Array<'Temporary' | 'Shared' | 'Consumed'>} [status] status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public getConsumeRecordsUsingGET(consumeUserId?: string, consumedId?: string, status?: Array<'Temporary' | 'Shared' | 'Consumed'>, options?: any) {
        return ShareApiFp(this.configuration).getConsumeRecordsUsingGET(consumeUserId, consumedId, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询提资数组中所有提资所包含的所有数据集
     * @param {Array<string>} shareRecordIds shareRecordIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public getShareContentsUsingPOST(shareRecordIds: Array<string>, options?: any) {
        return ShareApiFp(this.configuration).getShareContentsUsingPOST(shareRecordIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询指定状态的提资资料包
     * @param {string} teamId teamId
     * @param {'Temporary' | 'Shared'} [status] status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public getSharePackagesUsingGET(teamId: string, status?: 'Temporary' | 'Shared', options?: any) {
        return ShareApiFp(this.configuration).getSharePackagesUsingGET(teamId, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询某次提资
     * @param {ShareRecord} shareRecord shareRecord
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public getShareRecordsUsingPOST(shareRecord: ShareRecord, options?: any) {
        return ShareApiFp(this.configuration).getShareRecordsUsingPOST(shareRecord, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 发起提资
     * @param {string} shareRecordId shareRecordId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public shareDataUsingPOST(shareRecordId: string, xGdcUserid: string, options?: any) {
        return ShareApiFp(this.configuration).shareDataUsingPOST(shareRecordId, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量发起提资
     * @param {string} xGdcUserid x-gdc-userid
     * @param {Array<string>} shareRecordIds shareRecordIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public shareDatasUsingPUT(xGdcUserid: string, shareRecordIds: Array<string>, options?: any) {
        return ShareApiFp(this.configuration).shareDatasUsingPUT(xGdcUserid, shareRecordIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量更新提资记录
     * @param {ShareRecordUpdate} shareRecordUpdate shareRecordUpdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public updateShareRecordUsingPUT(shareRecordUpdate: ShareRecordUpdate, options?: any) {
        return ShareApiFp(this.configuration).updateShareRecordUsingPUT(shareRecordUpdate, options).then((request) => request(this.axios, this.basePath));
    }

}

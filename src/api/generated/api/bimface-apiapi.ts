// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BimfaceUpdateBO } from '../model';
// @ts-ignore
import { ResponseListBimfaceUpdate } from '../model';
// @ts-ignore
import { ResponseListIntegrateVersionVO } from '../model';
// @ts-ignore
import { ResponseListVersionVO } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
// @ts-ignore
import { Responseboolean } from '../model';
/**
 * BimfaceAPIApi - axios parameter creator
 * @export
 */
export const BimfaceAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取所有符合条件的integrateVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrateVersionUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/bimface/updates/integrateVersions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取所有not ready的update信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotReadyBimfaceUpdatesUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/bimface/updates/notReady`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取所有ready的update信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReadyBimfaceUpdatesUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/bimface/updates/ready`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取所有viewingInfo符合条件的version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersionsUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/bimface/updates/versions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 添加或更新BimfaceUpdate
         * @param {Array<BimfaceUpdateBO>} bos bos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveOrUpdateBimfaceUpdatesUsingPOST: async (bos: Array<BimfaceUpdateBO>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bos' is not null or undefined
            if (bos === null || bos === undefined) {
                throw new RequiredError('bos','Required parameter bos was null or undefined when calling saveOrUpdateBimfaceUpdatesUsingPOST.');
            }
            const localVarPath = `/bimface/updates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bos !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bos !== undefined ? bos : {}) : (bos || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新update的状态
         * @param {number} status status
         * @param {number} updateId updateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBimfaceUpdateStatusUsingPOST: async (status: number, updateId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new RequiredError('status','Required parameter status was null or undefined when calling updateBimfaceUpdateStatusUsingPOST.');
            }
            // verify required parameter 'updateId' is not null or undefined
            if (updateId === null || updateId === undefined) {
                throw new RequiredError('updateId','Required parameter updateId was null or undefined when calling updateBimfaceUpdateStatusUsingPOST.');
            }
            const localVarPath = `/bimface/updates/{updateId}/{status}/status`
                .replace(`{${"status"}}`, encodeURIComponent(String(status)))
                .replace(`{${"updateId"}}`, encodeURIComponent(String(updateId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BimfaceAPIApi - functional programming interface
 * @export
 */
export const BimfaceAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取所有符合条件的integrateVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntegrateVersionUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListIntegrateVersionVO>> {
            const localVarAxiosArgs = await BimfaceAPIApiAxiosParamCreator(configuration).getIntegrateVersionUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取所有not ready的update信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotReadyBimfaceUpdatesUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListBimfaceUpdate>> {
            const localVarAxiosArgs = await BimfaceAPIApiAxiosParamCreator(configuration).getNotReadyBimfaceUpdatesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取所有ready的update信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReadyBimfaceUpdatesUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListBimfaceUpdate>> {
            const localVarAxiosArgs = await BimfaceAPIApiAxiosParamCreator(configuration).getReadyBimfaceUpdatesUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取所有viewingInfo符合条件的version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVersionsUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListVersionVO>> {
            const localVarAxiosArgs = await BimfaceAPIApiAxiosParamCreator(configuration).getVersionsUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 添加或更新BimfaceUpdate
         * @param {Array<BimfaceUpdateBO>} bos bos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveOrUpdateBimfaceUpdatesUsingPOST(bos: Array<BimfaceUpdateBO>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseboolean>> {
            const localVarAxiosArgs = await BimfaceAPIApiAxiosParamCreator(configuration).saveOrUpdateBimfaceUpdatesUsingPOST(bos, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新update的状态
         * @param {number} status status
         * @param {number} updateId updateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBimfaceUpdateStatusUsingPOST(status: number, updateId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await BimfaceAPIApiAxiosParamCreator(configuration).updateBimfaceUpdateStatusUsingPOST(status, updateId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BimfaceAPIApi - factory interface
 * @export
 */
export const BimfaceAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取所有符合条件的integrateVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrateVersionUsingGET(options?: any): AxiosPromise<ResponseListIntegrateVersionVO> {
            return BimfaceAPIApiFp(configuration).getIntegrateVersionUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取所有not ready的update信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotReadyBimfaceUpdatesUsingGET(options?: any): AxiosPromise<ResponseListBimfaceUpdate> {
            return BimfaceAPIApiFp(configuration).getNotReadyBimfaceUpdatesUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取所有ready的update信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReadyBimfaceUpdatesUsingGET(options?: any): AxiosPromise<ResponseListBimfaceUpdate> {
            return BimfaceAPIApiFp(configuration).getReadyBimfaceUpdatesUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取所有viewingInfo符合条件的version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersionsUsingGET(options?: any): AxiosPromise<ResponseListVersionVO> {
            return BimfaceAPIApiFp(configuration).getVersionsUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 添加或更新BimfaceUpdate
         * @param {Array<BimfaceUpdateBO>} bos bos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveOrUpdateBimfaceUpdatesUsingPOST(bos: Array<BimfaceUpdateBO>, options?: any): AxiosPromise<Responseboolean> {
            return BimfaceAPIApiFp(configuration).saveOrUpdateBimfaceUpdatesUsingPOST(bos, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新update的状态
         * @param {number} status status
         * @param {number} updateId updateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBimfaceUpdateStatusUsingPOST(status: number, updateId: number, options?: any): AxiosPromise<ResponseVoid> {
            return BimfaceAPIApiFp(configuration).updateBimfaceUpdateStatusUsingPOST(status, updateId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BimfaceAPIApi - object-oriented interface
 * @export
 * @class BimfaceAPIApi
 * @extends {BaseAPI}
 */
export class BimfaceAPIApi extends BaseAPI {
    /**
     * 
     * @summary 获取所有符合条件的integrateVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BimfaceAPIApi
     */
    public getIntegrateVersionUsingGET(options?: any) {
        return BimfaceAPIApiFp(this.configuration).getIntegrateVersionUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取所有not ready的update信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BimfaceAPIApi
     */
    public getNotReadyBimfaceUpdatesUsingGET(options?: any) {
        return BimfaceAPIApiFp(this.configuration).getNotReadyBimfaceUpdatesUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取所有ready的update信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BimfaceAPIApi
     */
    public getReadyBimfaceUpdatesUsingGET(options?: any) {
        return BimfaceAPIApiFp(this.configuration).getReadyBimfaceUpdatesUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取所有viewingInfo符合条件的version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BimfaceAPIApi
     */
    public getVersionsUsingGET(options?: any) {
        return BimfaceAPIApiFp(this.configuration).getVersionsUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 添加或更新BimfaceUpdate
     * @param {Array<BimfaceUpdateBO>} bos bos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BimfaceAPIApi
     */
    public saveOrUpdateBimfaceUpdatesUsingPOST(bos: Array<BimfaceUpdateBO>, options?: any) {
        return BimfaceAPIApiFp(this.configuration).saveOrUpdateBimfaceUpdatesUsingPOST(bos, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新update的状态
     * @param {number} status status
     * @param {number} updateId updateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BimfaceAPIApi
     */
    public updateBimfaceUpdateStatusUsingPOST(status: number, updateId: number, options?: any) {
        return BimfaceAPIApiFp(this.configuration).updateBimfaceUpdateStatusUsingPOST(status, updateId, options).then((request) => request(this.axios, this.basePath));
    }

}

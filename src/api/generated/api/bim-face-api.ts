// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * BimFaceApi - axios parameter creator
 * @export
 */
export const BimFaceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAccessToken
         * @param {string} authorization Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessTokenUsingPOST: async (authorization: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getAccessTokenUsingPOST.');
            }
            const localVarPath = `/oauth2/token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getViewToken
         * @param {string} authorization Authorization
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewTokenUsingGET: async (authorization: string, fileId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getViewTokenUsingGET.');
            }
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling getViewTokenUsingGET.');
            }
            const localVarPath = `/view/token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BimFaceApi - functional programming interface
 * @export
 */
export const BimFaceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAccessToken
         * @param {string} authorization Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccessTokenUsingPOST(authorization: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await BimFaceApiAxiosParamCreator(configuration).getAccessTokenUsingPOST(authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getViewToken
         * @param {string} authorization Authorization
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getViewTokenUsingGET(authorization: string, fileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await BimFaceApiAxiosParamCreator(configuration).getViewTokenUsingGET(authorization, fileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BimFaceApi - factory interface
 * @export
 */
export const BimFaceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getAccessToken
         * @param {string} authorization Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessTokenUsingPOST(authorization: string, options?: any): AxiosPromise<string> {
            return BimFaceApiFp(configuration).getAccessTokenUsingPOST(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getViewToken
         * @param {string} authorization Authorization
         * @param {string} fileId fileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewTokenUsingGET(authorization: string, fileId: string, options?: any): AxiosPromise<string> {
            return BimFaceApiFp(configuration).getViewTokenUsingGET(authorization, fileId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BimFaceApi - object-oriented interface
 * @export
 * @class BimFaceApi
 * @extends {BaseAPI}
 */
export class BimFaceApi extends BaseAPI {
    /**
     * 
     * @summary getAccessToken
     * @param {string} authorization Authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BimFaceApi
     */
    public getAccessTokenUsingPOST(authorization: string, options?: any) {
        return BimFaceApiFp(this.configuration).getAccessTokenUsingPOST(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getViewToken
     * @param {string} authorization Authorization
     * @param {string} fileId fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BimFaceApi
     */
    public getViewTokenUsingGET(authorization: string, fileId: string, options?: any) {
        return BimFaceApiFp(this.configuration).getViewTokenUsingGET(authorization, fileId, options).then((request) => request(this.axios, this.basePath));
    }

}

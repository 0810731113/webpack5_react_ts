// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResponseCollectionTeam } from '../model';
// @ts-ignore
import { ResponseListUser } from '../model';
// @ts-ignore
import { ResponseListUserVO } from '../model';
// @ts-ignore
import { ResponseResourceLimitVO } from '../model';
// @ts-ignore
import { ResponseUser } from '../model';
// @ts-ignore
import { ResponseUserInfo } from '../model';
// @ts-ignore
import { ResponseUserVO } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
// @ts-ignore
import { User } from '../model';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建用户
         * @param {User} user user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST: async (user: User, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling createUserUsingPOST.');
            }
            const localVarPath = `/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 模糊查询user信息
         * @param {string} keyword keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilterUsersUsingPOST: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling getFilterUsersUsingPOST.');
            }
            const localVarPath = `/users/filter`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取当前用户信息
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeUsingGET: async (xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling getMeUsingGET.');
            }
            const localVarPath = `/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取当前用户的资源限制
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceLimitUsingGET: async (xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling getResourceLimitUsingGET.');
            }
            const localVarPath = `/resource/limit`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户在某个项目下的所属团队
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsOfUsrInProjectUsingGET: async (projectId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getTeamsOfUsrInProjectUsingGET.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getTeamsOfUsrInProjectUsingGET.');
            }
            const localVarPath = `/users/{userId}/projects/{projectId}/teams`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 使用详细信息去查询用户
         * @param {string} identity identity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoByIdUsingGET: async (identity: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'identity' is not null or undefined
            if (identity === null || identity === undefined) {
                throw new RequiredError('identity','Required parameter identity was null or undefined when calling getUserInfoByIdUsingGET.');
            }
            const localVarPath = `/users/userinfobyid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (identity !== undefined) {
                localVarQueryParameter['identity'] = identity;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据accessToken获取用户信息
         * @param {string} accessToken accessToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoByTokenUsingGET: async (accessToken: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessToken' is not null or undefined
            if (accessToken === null || accessToken === undefined) {
                throw new RequiredError('accessToken','Required parameter accessToken was null or undefined when calling getUserInfoByTokenUsingGET.');
            }
            const localVarPath = `/users/userinfo`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accessToken !== undefined && accessToken !== null) {
                localVarHeaderParameter['accessToken'] = String(accessToken);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据id批量查询用户信息
         * @param {Array<string>} userIds userIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByIdsUsingPOST: async (userIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userIds' is not null or undefined
            if (userIds === null || userIds === undefined) {
                throw new RequiredError('userIds','Required parameter userIds was null or undefined when calling getUsersByIdsUsingPOST.');
            }
            const localVarPath = `/users/ids/batch`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userIds !== undefined ? userIds : {}) : (userIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询用户
         * @param {User} user user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryUserUsingPOST: async (user: User, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling queryUserUsingPOST.');
            }
            const localVarPath = `/users/query`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量修改用户在团队中的状态（启用，停用）
         * @param {'Working' | 'Paused'} status status
         * @param {string} userId userId
         * @param {Array<string>} teamIds teamIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserStatusInTeamsUsingPUT: async (status: 'Working' | 'Paused', userId: string, teamIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new RequiredError('status','Required parameter status was null or undefined when calling updateUserStatusInTeamsUsingPUT.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling updateUserStatusInTeamsUsingPUT.');
            }
            // verify required parameter 'teamIds' is not null or undefined
            if (teamIds === null || teamIds === undefined) {
                throw new RequiredError('teamIds','Required parameter teamIds was null or undefined when calling updateUserStatusInTeamsUsingPUT.');
            }
            const localVarPath = `/users/{userId}/teams`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof teamIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(teamIds !== undefined ? teamIds : {}) : (teamIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改用户信息
         * @param {string} userId userId
         * @param {User} user user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsingPUT: async (userId: string, user: User, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling updateUserUsingPUT.');
            }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling updateUserUsingPUT.');
            }
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建用户
         * @param {User} user user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUsingPOST(user: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUser>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).createUserUsingPOST(user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 模糊查询user信息
         * @param {string} keyword keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilterUsersUsingPOST(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListUserVO>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).getFilterUsersUsingPOST(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取当前用户信息
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeUsingGET(xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUserVO>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).getMeUsingGET(xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取当前用户的资源限制
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceLimitUsingGET(xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseResourceLimitVO>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).getResourceLimitUsingGET(xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取用户在某个项目下的所属团队
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamsOfUsrInProjectUsingGET(projectId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCollectionTeam>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).getTeamsOfUsrInProjectUsingGET(projectId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 使用详细信息去查询用户
         * @param {string} identity identity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfoByIdUsingGET(identity: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUserInfo>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).getUserInfoByIdUsingGET(identity, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据accessToken获取用户信息
         * @param {string} accessToken accessToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfoByTokenUsingGET(accessToken: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUserInfo>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).getUserInfoByTokenUsingGET(accessToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据id批量查询用户信息
         * @param {Array<string>} userIds userIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersByIdsUsingPOST(userIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListUserVO>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).getUsersByIdsUsingPOST(userIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询用户
         * @param {User} user user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryUserUsingPOST(user: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListUser>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).queryUserUsingPOST(user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量修改用户在团队中的状态（启用，停用）
         * @param {'Working' | 'Paused'} status status
         * @param {string} userId userId
         * @param {Array<string>} teamIds teamIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserStatusInTeamsUsingPUT(status: 'Working' | 'Paused', userId: string, teamIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).updateUserStatusInTeamsUsingPUT(status, userId, teamIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改用户信息
         * @param {string} userId userId
         * @param {User} user user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserUsingPUT(userId: string, user: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).updateUserUsingPUT(userId, user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 创建用户
         * @param {User} user user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST(user: User, options?: any): AxiosPromise<ResponseUser> {
            return UserApiFp(configuration).createUserUsingPOST(user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 模糊查询user信息
         * @param {string} keyword keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilterUsersUsingPOST(keyword: string, options?: any): AxiosPromise<ResponseListUserVO> {
            return UserApiFp(configuration).getFilterUsersUsingPOST(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取当前用户信息
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeUsingGET(xGdcUserid: string, options?: any): AxiosPromise<ResponseUserVO> {
            return UserApiFp(configuration).getMeUsingGET(xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取当前用户的资源限制
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceLimitUsingGET(xGdcUserid: string, options?: any): AxiosPromise<ResponseResourceLimitVO> {
            return UserApiFp(configuration).getResourceLimitUsingGET(xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取用户在某个项目下的所属团队
         * @param {string} projectId projectId
         * @param {string} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsOfUsrInProjectUsingGET(projectId: string, userId: string, options?: any): AxiosPromise<ResponseCollectionTeam> {
            return UserApiFp(configuration).getTeamsOfUsrInProjectUsingGET(projectId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 使用详细信息去查询用户
         * @param {string} identity identity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoByIdUsingGET(identity: string, options?: any): AxiosPromise<ResponseUserInfo> {
            return UserApiFp(configuration).getUserInfoByIdUsingGET(identity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据accessToken获取用户信息
         * @param {string} accessToken accessToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoByTokenUsingGET(accessToken: string, options?: any): AxiosPromise<ResponseUserInfo> {
            return UserApiFp(configuration).getUserInfoByTokenUsingGET(accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据id批量查询用户信息
         * @param {Array<string>} userIds userIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersByIdsUsingPOST(userIds: Array<string>, options?: any): AxiosPromise<ResponseListUserVO> {
            return UserApiFp(configuration).getUsersByIdsUsingPOST(userIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询用户
         * @param {User} user user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryUserUsingPOST(user: User, options?: any): AxiosPromise<ResponseListUser> {
            return UserApiFp(configuration).queryUserUsingPOST(user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量修改用户在团队中的状态（启用，停用）
         * @param {'Working' | 'Paused'} status status
         * @param {string} userId userId
         * @param {Array<string>} teamIds teamIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserStatusInTeamsUsingPUT(status: 'Working' | 'Paused', userId: string, teamIds: Array<string>, options?: any): AxiosPromise<ResponseVoid> {
            return UserApiFp(configuration).updateUserStatusInTeamsUsingPUT(status, userId, teamIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改用户信息
         * @param {string} userId userId
         * @param {User} user user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsingPUT(userId: string, user: User, options?: any): AxiosPromise<ResponseVoid> {
            return UserApiFp(configuration).updateUserUsingPUT(userId, user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary 创建用户
     * @param {User} user user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUserUsingPOST(user: User, options?: any) {
        return UserApiFp(this.configuration).createUserUsingPOST(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 模糊查询user信息
     * @param {string} keyword keyword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getFilterUsersUsingPOST(keyword: string, options?: any) {
        return UserApiFp(this.configuration).getFilterUsersUsingPOST(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取当前用户信息
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getMeUsingGET(xGdcUserid: string, options?: any) {
        return UserApiFp(this.configuration).getMeUsingGET(xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取当前用户的资源限制
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getResourceLimitUsingGET(xGdcUserid: string, options?: any) {
        return UserApiFp(this.configuration).getResourceLimitUsingGET(xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取用户在某个项目下的所属团队
     * @param {string} projectId projectId
     * @param {string} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getTeamsOfUsrInProjectUsingGET(projectId: string, userId: string, options?: any) {
        return UserApiFp(this.configuration).getTeamsOfUsrInProjectUsingGET(projectId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 使用详细信息去查询用户
     * @param {string} identity identity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserInfoByIdUsingGET(identity: string, options?: any) {
        return UserApiFp(this.configuration).getUserInfoByIdUsingGET(identity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据accessToken获取用户信息
     * @param {string} accessToken accessToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserInfoByTokenUsingGET(accessToken: string, options?: any) {
        return UserApiFp(this.configuration).getUserInfoByTokenUsingGET(accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据id批量查询用户信息
     * @param {Array<string>} userIds userIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUsersByIdsUsingPOST(userIds: Array<string>, options?: any) {
        return UserApiFp(this.configuration).getUsersByIdsUsingPOST(userIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询用户
     * @param {User} user user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public queryUserUsingPOST(user: User, options?: any) {
        return UserApiFp(this.configuration).queryUserUsingPOST(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量修改用户在团队中的状态（启用，停用）
     * @param {'Working' | 'Paused'} status status
     * @param {string} userId userId
     * @param {Array<string>} teamIds teamIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserStatusInTeamsUsingPUT(status: 'Working' | 'Paused', userId: string, teamIds: Array<string>, options?: any) {
        return UserApiFp(this.configuration).updateUserStatusInTeamsUsingPUT(status, userId, teamIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改用户信息
     * @param {string} userId userId
     * @param {User} user user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserUsingPUT(userId: string, user: User, options?: any) {
        return UserApiFp(this.configuration).updateUserUsingPUT(userId, user, options).then((request) => request(this.axios, this.basePath));
    }

}

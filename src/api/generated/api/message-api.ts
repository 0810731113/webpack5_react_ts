// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateMessage } from '../model';
// @ts-ignore
import { CreateMessages } from '../model';
// @ts-ignore
import { MessageVO } from '../model';
/**
 * MessageApi - axios parameter creator
 * @export
 */
export const MessageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary create
         * @param {CreateMessage} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPUT1: async (args: CreateMessage, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'args' is not null or undefined
            if (args === null || args === undefined) {
                throw new RequiredError('args','Required parameter args was null or undefined when calling createUsingPUT1.');
            }
            const localVarPath = `/message`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof args !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(args !== undefined ? args : {}) : (args || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create
         * @param {CreateMessages} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPUT2: async (args: CreateMessages, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'args' is not null or undefined
            if (args === null || args === undefined) {
                throw new RequiredError('args','Required parameter args was null or undefined when calling createUsingPUT2.');
            }
            const localVarPath = `/messages`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof args !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(args !== undefined ? args : {}) : (args || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getMessage
         * @param {string} consumerId consumerId
         * @param {string} producerSourceId producerSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageUsingGET: async (consumerId: string, producerSourceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'consumerId' is not null or undefined
            if (consumerId === null || consumerId === undefined) {
                throw new RequiredError('consumerId','Required parameter consumerId was null or undefined when calling getMessageUsingGET.');
            }
            // verify required parameter 'producerSourceId' is not null or undefined
            if (producerSourceId === null || producerSourceId === undefined) {
                throw new RequiredError('producerSourceId','Required parameter producerSourceId was null or undefined when calling getMessageUsingGET.');
            }
            const localVarPath = `/message/{producerSourceId}/consume/{consumerId}`
                .replace(`{${"consumerId"}}`, encodeURIComponent(String(consumerId)))
                .replace(`{${"producerSourceId"}}`, encodeURIComponent(String(producerSourceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageApi - functional programming interface
 * @export
 */
export const MessageApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary create
         * @param {CreateMessage} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUsingPUT1(args: CreateMessage, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageVO>> {
            const localVarAxiosArgs = await MessageApiAxiosParamCreator(configuration).createUsingPUT1(args, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary create
         * @param {CreateMessages} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUsingPUT2(args: CreateMessages, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageVO>>> {
            const localVarAxiosArgs = await MessageApiAxiosParamCreator(configuration).createUsingPUT2(args, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getMessage
         * @param {string} consumerId consumerId
         * @param {string} producerSourceId producerSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessageUsingGET(consumerId: string, producerSourceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageVO>> {
            const localVarAxiosArgs = await MessageApiAxiosParamCreator(configuration).getMessageUsingGET(consumerId, producerSourceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MessageApi - factory interface
 * @export
 */
export const MessageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary create
         * @param {CreateMessage} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPUT1(args: CreateMessage, options?: any): AxiosPromise<MessageVO> {
            return MessageApiFp(configuration).createUsingPUT1(args, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create
         * @param {CreateMessages} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPUT2(args: CreateMessages, options?: any): AxiosPromise<Array<MessageVO>> {
            return MessageApiFp(configuration).createUsingPUT2(args, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getMessage
         * @param {string} consumerId consumerId
         * @param {string} producerSourceId producerSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageUsingGET(consumerId: string, producerSourceId: string, options?: any): AxiosPromise<MessageVO> {
            return MessageApiFp(configuration).getMessageUsingGET(consumerId, producerSourceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
export class MessageApi extends BaseAPI {
    /**
     * 
     * @summary create
     * @param {CreateMessage} args args
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public createUsingPUT1(args: CreateMessage, options?: any) {
        return MessageApiFp(this.configuration).createUsingPUT1(args, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create
     * @param {CreateMessages} args args
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public createUsingPUT2(args: CreateMessages, options?: any) {
        return MessageApiFp(this.configuration).createUsingPUT2(args, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getMessage
     * @param {string} consumerId consumerId
     * @param {string} producerSourceId producerSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public getMessageUsingGET(consumerId: string, producerSourceId: string, options?: any) {
        return MessageApiFp(this.configuration).getMessageUsingGET(consumerId, producerSourceId, options).then((request) => request(this.axios, this.basePath));
    }

}

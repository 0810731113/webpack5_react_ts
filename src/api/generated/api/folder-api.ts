// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Folder } from '../model';
// @ts-ignore
import { FolderCreation } from '../model';
// @ts-ignore
import { ResponseFolder } from '../model';
// @ts-ignore
import { ResponseFolderVO } from '../model';
// @ts-ignore
import { ResponseListFolderVO } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
/**
 * FolderApi - axios parameter creator
 * @export
 */
export const FolderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建文件夹v2
         * @param {FolderCreation} folderCreation folderCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolderUsingPOST: async (folderCreation: FolderCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderCreation' is not null or undefined
            if (folderCreation === null || folderCreation === undefined) {
                throw new RequiredError('folderCreation','Required parameter folderCreation was null or undefined when calling createFolderUsingPOST.');
            }
            const localVarPath = `/v2/folder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof folderCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(folderCreation !== undefined ? folderCreation : {}) : (folderCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary createFolder
         * @param {Folder} folder folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolderUsingPUT: async (folder: Folder, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'folder' is not null or undefined
            if (folder === null || folder === undefined) {
                throw new RequiredError('folder','Required parameter folder was null or undefined when calling createFolderUsingPUT.');
            }
            const localVarPath = `/folder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof folder !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(folder !== undefined ? folder : {}) : (folder || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 逻辑删除目录
         * @param {string} folderId 目录Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectUsingDELETE1: async (folderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            if (folderId === null || folderId === undefined) {
                throw new RequiredError('folderId','Required parameter folderId was null or undefined when calling deleteProjectUsingDELETE1.');
            }
            const localVarPath = `/folder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getChildFolders
         * @param {string} folderId folderId
         * @param {string} [recursive] recursive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChildFoldersUsingGET: async (folderId: string, recursive?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            if (folderId === null || folderId === undefined) {
                throw new RequiredError('folderId','Required parameter folderId was null or undefined when calling getChildFoldersUsingGET.');
            }
            const localVarPath = `/folders/{folderId}/subfolders`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recursive !== undefined) {
                localVarQueryParameter['recursive'] = recursive;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取工作单元所属文件夹
         * @param {string} datasetId datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetFolderUsingGET: async (datasetId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling getDatasetFolderUsingGET.');
            }
            const localVarPath = `/folder/bydatasetId`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (datasetId !== undefined) {
                localVarQueryParameter['datasetId'] = datasetId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getDatasetParentFolder
         * @param {string} datasetId datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetParentFolderUsingGET: async (datasetId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            if (datasetId === null || datasetId === undefined) {
                throw new RequiredError('datasetId','Required parameter datasetId was null or undefined when calling getDatasetParentFolderUsingGET.');
            }
            const localVarPath = `/folder/hasdataset`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (datasetId !== undefined) {
                localVarQueryParameter['datasetId'] = datasetId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据id获取folder
         * @param {string} folderId folderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderByIdUsingGET: async (folderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            if (folderId === null || folderId === undefined) {
                throw new RequiredError('folderId','Required parameter folderId was null or undefined when calling getFolderByIdUsingGET.');
            }
            const localVarPath = `/folders/{folderId}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getFolderByProject
         * @param {string} projectId projectId
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderByProjectUsingGET: async (projectId: string, xGdcUserid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getFolderByProjectUsingGET.');
            }
            const localVarPath = `/folder/byproject`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据id批量查询目录信息
         * @param {Array<string>} folderIds folderIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoldersByIdsUsingPOST: async (folderIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderIds' is not null or undefined
            if (folderIds === null || folderIds === undefined) {
                throw new RequiredError('folderIds','Required parameter folderIds was null or undefined when calling getFoldersByIdsUsingPOST.');
            }
            const localVarPath = `/folders/ids/batch`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof folderIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(folderIds !== undefined ? folderIds : {}) : (folderIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取团队下的文件夹
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoldersByTeamIdUsingGET: async (teamId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getFoldersByTeamIdUsingGET.');
            }
            const localVarPath = `/folders/byteamId`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (teamId !== undefined) {
                localVarQueryParameter['teamId'] = teamId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取符合条件的folder
         * @param {Folder} folder folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoldersUsingPOST: async (folder: Folder, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'folder' is not null or undefined
            if (folder === null || folder === undefined) {
                throw new RequiredError('folder','Required parameter folder was null or undefined when calling getFoldersUsingPOST.');
            }
            const localVarPath = `/folders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof folder !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(folder !== undefined ? folder : {}) : (folder || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新folder
         * @param {Folder} folder folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFolderUsingPOST: async (folder: Folder, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'folder' is not null or undefined
            if (folder === null || folder === undefined) {
                throw new RequiredError('folder','Required parameter folder was null or undefined when calling updateFolderUsingPOST.');
            }
            const localVarPath = `/folder/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof folder !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(folder !== undefined ? folder : {}) : (folder || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改目录名称
         * @param {string} folderId 目录Id
         * @param {string} name 目录新名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectUsingPOST1: async (folderId: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            if (folderId === null || folderId === undefined) {
                throw new RequiredError('folderId','Required parameter folderId was null or undefined when calling updateProjectUsingPOST1.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling updateProjectUsingPOST1.');
            }
            const localVarPath = `/folder`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FolderApi - functional programming interface
 * @export
 */
export const FolderApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建文件夹v2
         * @param {FolderCreation} folderCreation folderCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFolderUsingPOST(folderCreation: FolderCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseFolderVO>> {
            const localVarAxiosArgs = await FolderApiAxiosParamCreator(configuration).createFolderUsingPOST(folderCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary createFolder
         * @param {Folder} folder folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFolderUsingPUT(folder: Folder, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Folder>> {
            const localVarAxiosArgs = await FolderApiAxiosParamCreator(configuration).createFolderUsingPUT(folder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 逻辑删除目录
         * @param {string} folderId 目录Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectUsingDELETE1(folderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await FolderApiAxiosParamCreator(configuration).deleteProjectUsingDELETE1(folderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getChildFolders
         * @param {string} folderId folderId
         * @param {string} [recursive] recursive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChildFoldersUsingGET(folderId: string, recursive?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Folder>>> {
            const localVarAxiosArgs = await FolderApiAxiosParamCreator(configuration).getChildFoldersUsingGET(folderId, recursive, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取工作单元所属文件夹
         * @param {string} datasetId datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetFolderUsingGET(datasetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseFolderVO>> {
            const localVarAxiosArgs = await FolderApiAxiosParamCreator(configuration).getDatasetFolderUsingGET(datasetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getDatasetParentFolder
         * @param {string} datasetId datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatasetParentFolderUsingGET(datasetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Folder>> {
            const localVarAxiosArgs = await FolderApiAxiosParamCreator(configuration).getDatasetParentFolderUsingGET(datasetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据id获取folder
         * @param {string} folderId folderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolderByIdUsingGET(folderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseFolder>> {
            const localVarAxiosArgs = await FolderApiAxiosParamCreator(configuration).getFolderByIdUsingGET(folderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getFolderByProject
         * @param {string} projectId projectId
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolderByProjectUsingGET(projectId: string, xGdcUserid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Folder>>> {
            const localVarAxiosArgs = await FolderApiAxiosParamCreator(configuration).getFolderByProjectUsingGET(projectId, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据id批量查询目录信息
         * @param {Array<string>} folderIds folderIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFoldersByIdsUsingPOST(folderIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListFolderVO>> {
            const localVarAxiosArgs = await FolderApiAxiosParamCreator(configuration).getFoldersByIdsUsingPOST(folderIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取团队下的文件夹
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFoldersByTeamIdUsingGET(teamId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListFolderVO>> {
            const localVarAxiosArgs = await FolderApiAxiosParamCreator(configuration).getFoldersByTeamIdUsingGET(teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取符合条件的folder
         * @param {Folder} folder folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFoldersUsingPOST(folder: Folder, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Folder>>> {
            const localVarAxiosArgs = await FolderApiAxiosParamCreator(configuration).getFoldersUsingPOST(folder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新folder
         * @param {Folder} folder folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFolderUsingPOST(folder: Folder, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await FolderApiAxiosParamCreator(configuration).updateFolderUsingPOST(folder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改目录名称
         * @param {string} folderId 目录Id
         * @param {string} name 目录新名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectUsingPOST1(folderId: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await FolderApiAxiosParamCreator(configuration).updateProjectUsingPOST1(folderId, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FolderApi - factory interface
 * @export
 */
export const FolderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 创建文件夹v2
         * @param {FolderCreation} folderCreation folderCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolderUsingPOST(folderCreation: FolderCreation, options?: any): AxiosPromise<ResponseFolderVO> {
            return FolderApiFp(configuration).createFolderUsingPOST(folderCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary createFolder
         * @param {Folder} folder folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolderUsingPUT(folder: Folder, options?: any): AxiosPromise<Folder> {
            return FolderApiFp(configuration).createFolderUsingPUT(folder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 逻辑删除目录
         * @param {string} folderId 目录Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectUsingDELETE1(folderId: string, options?: any): AxiosPromise<ResponseVoid> {
            return FolderApiFp(configuration).deleteProjectUsingDELETE1(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getChildFolders
         * @param {string} folderId folderId
         * @param {string} [recursive] recursive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChildFoldersUsingGET(folderId: string, recursive?: string, options?: any): AxiosPromise<Array<Folder>> {
            return FolderApiFp(configuration).getChildFoldersUsingGET(folderId, recursive, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取工作单元所属文件夹
         * @param {string} datasetId datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetFolderUsingGET(datasetId: string, options?: any): AxiosPromise<ResponseFolderVO> {
            return FolderApiFp(configuration).getDatasetFolderUsingGET(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getDatasetParentFolder
         * @param {string} datasetId datasetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatasetParentFolderUsingGET(datasetId: string, options?: any): AxiosPromise<Folder> {
            return FolderApiFp(configuration).getDatasetParentFolderUsingGET(datasetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据id获取folder
         * @param {string} folderId folderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderByIdUsingGET(folderId: string, options?: any): AxiosPromise<ResponseFolder> {
            return FolderApiFp(configuration).getFolderByIdUsingGET(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getFolderByProject
         * @param {string} projectId projectId
         * @param {string} [xGdcUserid] x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderByProjectUsingGET(projectId: string, xGdcUserid?: string, options?: any): AxiosPromise<Array<Folder>> {
            return FolderApiFp(configuration).getFolderByProjectUsingGET(projectId, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据id批量查询目录信息
         * @param {Array<string>} folderIds folderIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoldersByIdsUsingPOST(folderIds: Array<string>, options?: any): AxiosPromise<ResponseListFolderVO> {
            return FolderApiFp(configuration).getFoldersByIdsUsingPOST(folderIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取团队下的文件夹
         * @param {string} teamId teamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoldersByTeamIdUsingGET(teamId: string, options?: any): AxiosPromise<ResponseListFolderVO> {
            return FolderApiFp(configuration).getFoldersByTeamIdUsingGET(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取符合条件的folder
         * @param {Folder} folder folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoldersUsingPOST(folder: Folder, options?: any): AxiosPromise<Array<Folder>> {
            return FolderApiFp(configuration).getFoldersUsingPOST(folder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新folder
         * @param {Folder} folder folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFolderUsingPOST(folder: Folder, options?: any): AxiosPromise<ResponseVoid> {
            return FolderApiFp(configuration).updateFolderUsingPOST(folder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改目录名称
         * @param {string} folderId 目录Id
         * @param {string} name 目录新名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectUsingPOST1(folderId: string, name: string, options?: any): AxiosPromise<ResponseVoid> {
            return FolderApiFp(configuration).updateProjectUsingPOST1(folderId, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FolderApi - object-oriented interface
 * @export
 * @class FolderApi
 * @extends {BaseAPI}
 */
export class FolderApi extends BaseAPI {
    /**
     * 
     * @summary 创建文件夹v2
     * @param {FolderCreation} folderCreation folderCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderApi
     */
    public createFolderUsingPOST(folderCreation: FolderCreation, options?: any) {
        return FolderApiFp(this.configuration).createFolderUsingPOST(folderCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary createFolder
     * @param {Folder} folder folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderApi
     */
    public createFolderUsingPUT(folder: Folder, options?: any) {
        return FolderApiFp(this.configuration).createFolderUsingPUT(folder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 逻辑删除目录
     * @param {string} folderId 目录Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderApi
     */
    public deleteProjectUsingDELETE1(folderId: string, options?: any) {
        return FolderApiFp(this.configuration).deleteProjectUsingDELETE1(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getChildFolders
     * @param {string} folderId folderId
     * @param {string} [recursive] recursive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderApi
     */
    public getChildFoldersUsingGET(folderId: string, recursive?: string, options?: any) {
        return FolderApiFp(this.configuration).getChildFoldersUsingGET(folderId, recursive, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取工作单元所属文件夹
     * @param {string} datasetId datasetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderApi
     */
    public getDatasetFolderUsingGET(datasetId: string, options?: any) {
        return FolderApiFp(this.configuration).getDatasetFolderUsingGET(datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getDatasetParentFolder
     * @param {string} datasetId datasetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderApi
     */
    public getDatasetParentFolderUsingGET(datasetId: string, options?: any) {
        return FolderApiFp(this.configuration).getDatasetParentFolderUsingGET(datasetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据id获取folder
     * @param {string} folderId folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderApi
     */
    public getFolderByIdUsingGET(folderId: string, options?: any) {
        return FolderApiFp(this.configuration).getFolderByIdUsingGET(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getFolderByProject
     * @param {string} projectId projectId
     * @param {string} [xGdcUserid] x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderApi
     */
    public getFolderByProjectUsingGET(projectId: string, xGdcUserid?: string, options?: any) {
        return FolderApiFp(this.configuration).getFolderByProjectUsingGET(projectId, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据id批量查询目录信息
     * @param {Array<string>} folderIds folderIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderApi
     */
    public getFoldersByIdsUsingPOST(folderIds: Array<string>, options?: any) {
        return FolderApiFp(this.configuration).getFoldersByIdsUsingPOST(folderIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取团队下的文件夹
     * @param {string} teamId teamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderApi
     */
    public getFoldersByTeamIdUsingGET(teamId: string, options?: any) {
        return FolderApiFp(this.configuration).getFoldersByTeamIdUsingGET(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取符合条件的folder
     * @param {Folder} folder folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderApi
     */
    public getFoldersUsingPOST(folder: Folder, options?: any) {
        return FolderApiFp(this.configuration).getFoldersUsingPOST(folder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新folder
     * @param {Folder} folder folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderApi
     */
    public updateFolderUsingPOST(folder: Folder, options?: any) {
        return FolderApiFp(this.configuration).updateFolderUsingPOST(folder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改目录名称
     * @param {string} folderId 目录Id
     * @param {string} name 目录新名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderApi
     */
    public updateProjectUsingPOST1(folderId: string, name: string, options?: any) {
        return FolderApiFp(this.configuration).updateProjectUsingPOST1(folderId, name, options).then((request) => request(this.axios, this.basePath));
    }

}

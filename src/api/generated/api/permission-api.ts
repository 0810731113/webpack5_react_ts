// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Permission } from '../model';
// @ts-ignore
import { ResponseListPermissionVO } from '../model';
// @ts-ignore
import { ResponseListTeamPermissionResources } from '../model';
// @ts-ignore
import { ResponseListTeamPermissionResourcesV2 } from '../model';
// @ts-ignore
import { ResponsePermissionVO } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
/**
 * PermissionApi - axios parameter creator
 * @export
 */
export const PermissionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 将受信团队(trustTeamId)添加到本团队(teamId)的信任列表
         * @param {string} teamId teamId
         * @param {string} trustTeamId trustTeamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPermissionUsingPOST: async (teamId: string, trustTeamId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling createPermissionUsingPOST.');
            }
            // verify required parameter 'trustTeamId' is not null or undefined
            if (trustTeamId === null || trustTeamId === undefined) {
                throw new RequiredError('trustTeamId','Required parameter trustTeamId was null or undefined when calling createPermissionUsingPOST.');
            }
            const localVarPath = `/teams/{teamId}/trustTeams/{trustTeamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"trustTeamId"}}`, encodeURIComponent(String(trustTeamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 将团队从本团队的信任列表中移除
         * @param {string} teamId teamId
         * @param {string} trustTeamId trustTeamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePermissionUsingDELETE: async (teamId: string, trustTeamId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling deletePermissionUsingDELETE.');
            }
            // verify required parameter 'trustTeamId' is not null or undefined
            if (trustTeamId === null || trustTeamId === undefined) {
                throw new RequiredError('trustTeamId','Required parameter trustTeamId was null or undefined when calling deletePermissionUsingDELETE.');
            }
            const localVarPath = `/teams/{teamId}/trustTeams/{trustTeamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"trustTeamId"}}`, encodeURIComponent(String(trustTeamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询与本团队相关的高信任资源
         * @param {string} teamId teamId
         * @param {'Trust' | 'TrustBy'} [type] 信任类型,Trust代表本团队开放给其他团队的高信任资源,TrustBy代表其他团队给本团队开放的高信任资源
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionResourcesUsingGET: async (teamId: string, type?: 'Trust' | 'TrustBy', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getPermissionResourcesUsingGET.');
            }
            const localVarPath = `/teams/{teamId}/permissionResource`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询与本团队相关的高信任资源
         * @param {string} teamId teamId
         * @param {'Trust' | 'TrustBy'} [type] 信任类型,Trust代表本团队开放给其他团队的高信任资源,TrustBy代表其他团队给本团队开放的高信任资源
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionResourcesV2UsingGET: async (teamId: string, type?: 'Trust' | 'TrustBy', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getPermissionResourcesV2UsingGET.');
            }
            const localVarPath = `/v2/teams/{teamId}/permissionResource`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询权限
         * @param {Permission} [permission] 查询条件，根据所给字段组合条件查询
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryPermissionsUsingPOST: async (permission?: Permission, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/permission/query`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof permission !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(permission !== undefined ? permission : {}) : (permission || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionApi - functional programming interface
 * @export
 */
export const PermissionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 将受信团队(trustTeamId)添加到本团队(teamId)的信任列表
         * @param {string} teamId teamId
         * @param {string} trustTeamId trustTeamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPermissionUsingPOST(teamId: string, trustTeamId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponsePermissionVO>> {
            const localVarAxiosArgs = await PermissionApiAxiosParamCreator(configuration).createPermissionUsingPOST(teamId, trustTeamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 将团队从本团队的信任列表中移除
         * @param {string} teamId teamId
         * @param {string} trustTeamId trustTeamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePermissionUsingDELETE(teamId: string, trustTeamId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await PermissionApiAxiosParamCreator(configuration).deletePermissionUsingDELETE(teamId, trustTeamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询与本团队相关的高信任资源
         * @param {string} teamId teamId
         * @param {'Trust' | 'TrustBy'} [type] 信任类型,Trust代表本团队开放给其他团队的高信任资源,TrustBy代表其他团队给本团队开放的高信任资源
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissionResourcesUsingGET(teamId: string, type?: 'Trust' | 'TrustBy', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListTeamPermissionResources>> {
            const localVarAxiosArgs = await PermissionApiAxiosParamCreator(configuration).getPermissionResourcesUsingGET(teamId, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询与本团队相关的高信任资源
         * @param {string} teamId teamId
         * @param {'Trust' | 'TrustBy'} [type] 信任类型,Trust代表本团队开放给其他团队的高信任资源,TrustBy代表其他团队给本团队开放的高信任资源
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissionResourcesV2UsingGET(teamId: string, type?: 'Trust' | 'TrustBy', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListTeamPermissionResourcesV2>> {
            const localVarAxiosArgs = await PermissionApiAxiosParamCreator(configuration).getPermissionResourcesV2UsingGET(teamId, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询权限
         * @param {Permission} [permission] 查询条件，根据所给字段组合条件查询
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryPermissionsUsingPOST(permission?: Permission, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListPermissionVO>> {
            const localVarAxiosArgs = await PermissionApiAxiosParamCreator(configuration).queryPermissionsUsingPOST(permission, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PermissionApi - factory interface
 * @export
 */
export const PermissionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 将受信团队(trustTeamId)添加到本团队(teamId)的信任列表
         * @param {string} teamId teamId
         * @param {string} trustTeamId trustTeamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPermissionUsingPOST(teamId: string, trustTeamId: string, options?: any): AxiosPromise<ResponsePermissionVO> {
            return PermissionApiFp(configuration).createPermissionUsingPOST(teamId, trustTeamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 将团队从本团队的信任列表中移除
         * @param {string} teamId teamId
         * @param {string} trustTeamId trustTeamId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePermissionUsingDELETE(teamId: string, trustTeamId: string, options?: any): AxiosPromise<ResponseVoid> {
            return PermissionApiFp(configuration).deletePermissionUsingDELETE(teamId, trustTeamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询与本团队相关的高信任资源
         * @param {string} teamId teamId
         * @param {'Trust' | 'TrustBy'} [type] 信任类型,Trust代表本团队开放给其他团队的高信任资源,TrustBy代表其他团队给本团队开放的高信任资源
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionResourcesUsingGET(teamId: string, type?: 'Trust' | 'TrustBy', options?: any): AxiosPromise<ResponseListTeamPermissionResources> {
            return PermissionApiFp(configuration).getPermissionResourcesUsingGET(teamId, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询与本团队相关的高信任资源
         * @param {string} teamId teamId
         * @param {'Trust' | 'TrustBy'} [type] 信任类型,Trust代表本团队开放给其他团队的高信任资源,TrustBy代表其他团队给本团队开放的高信任资源
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionResourcesV2UsingGET(teamId: string, type?: 'Trust' | 'TrustBy', options?: any): AxiosPromise<ResponseListTeamPermissionResourcesV2> {
            return PermissionApiFp(configuration).getPermissionResourcesV2UsingGET(teamId, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询权限
         * @param {Permission} [permission] 查询条件，根据所给字段组合条件查询
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryPermissionsUsingPOST(permission?: Permission, options?: any): AxiosPromise<ResponseListPermissionVO> {
            return PermissionApiFp(configuration).queryPermissionsUsingPOST(permission, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PermissionApi - object-oriented interface
 * @export
 * @class PermissionApi
 * @extends {BaseAPI}
 */
export class PermissionApi extends BaseAPI {
    /**
     * 
     * @summary 将受信团队(trustTeamId)添加到本团队(teamId)的信任列表
     * @param {string} teamId teamId
     * @param {string} trustTeamId trustTeamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public createPermissionUsingPOST(teamId: string, trustTeamId: string, options?: any) {
        return PermissionApiFp(this.configuration).createPermissionUsingPOST(teamId, trustTeamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 将团队从本团队的信任列表中移除
     * @param {string} teamId teamId
     * @param {string} trustTeamId trustTeamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public deletePermissionUsingDELETE(teamId: string, trustTeamId: string, options?: any) {
        return PermissionApiFp(this.configuration).deletePermissionUsingDELETE(teamId, trustTeamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询与本团队相关的高信任资源
     * @param {string} teamId teamId
     * @param {'Trust' | 'TrustBy'} [type] 信任类型,Trust代表本团队开放给其他团队的高信任资源,TrustBy代表其他团队给本团队开放的高信任资源
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public getPermissionResourcesUsingGET(teamId: string, type?: 'Trust' | 'TrustBy', options?: any) {
        return PermissionApiFp(this.configuration).getPermissionResourcesUsingGET(teamId, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询与本团队相关的高信任资源
     * @param {string} teamId teamId
     * @param {'Trust' | 'TrustBy'} [type] 信任类型,Trust代表本团队开放给其他团队的高信任资源,TrustBy代表其他团队给本团队开放的高信任资源
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public getPermissionResourcesV2UsingGET(teamId: string, type?: 'Trust' | 'TrustBy', options?: any) {
        return PermissionApiFp(this.configuration).getPermissionResourcesV2UsingGET(teamId, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询权限
     * @param {Permission} [permission] 查询条件，根据所给字段组合条件查询
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public queryPermissionsUsingPOST(permission?: Permission, options?: any) {
        return PermissionApiFp(this.configuration).queryPermissionsUsingPOST(permission, options).then((request) => request(this.axios, this.basePath));
    }

}

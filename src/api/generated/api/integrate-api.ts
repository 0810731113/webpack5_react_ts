// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IntegratePackageCreation } from '../model';
// @ts-ignore
import { ResponseArchiveStandardCode4VersionsVO } from '../model';
// @ts-ignore
import { ResponseArchiveStandardCodeVO } from '../model';
// @ts-ignore
import { ResponseIntegratePackageVO } from '../model';
// @ts-ignore
import { ResponseIntegrateVersionVO } from '../model';
// @ts-ignore
import { ResponseListIntegratePackageVO } from '../model';
// @ts-ignore
import { ResponseListIntegrateVersionVO } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
/**
 * IntegrateApi - axios parameter creator
 * @export
 */
export const IntegrateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 向交付单元中添加资源
         * @param {string} packageId packageId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<number>} versionIds versionIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addResourcesToPackageUsingPOST1: async (packageId: string, xGdcUserid: string, versionIds: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling addResourcesToPackageUsingPOST1.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling addResourcesToPackageUsingPOST1.');
            }
            // verify required parameter 'versionIds' is not null or undefined
            if (versionIds === null || versionIds === undefined) {
                throw new RequiredError('versionIds','Required parameter versionIds was null or undefined when calling addResourcesToPackageUsingPOST1.');
            }
            const localVarPath = `/integrate-packages/{packageId}/resources`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof versionIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(versionIds !== undefined ? versionIds : {}) : (versionIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建模交付单元
         * @param {string} xGdcUserid x-gdc-userid
         * @param {IntegratePackageCreation} integratePackageCreation integratePackageCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegratePackageUsingPOST: async (xGdcUserid: string, integratePackageCreation: IntegratePackageCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling createIntegratePackageUsingPOST.');
            }
            // verify required parameter 'integratePackageCreation' is not null or undefined
            if (integratePackageCreation === null || integratePackageCreation === undefined) {
                throw new RequiredError('integratePackageCreation','Required parameter integratePackageCreation was null or undefined when calling createIntegratePackageUsingPOST.');
            }
            const localVarPath = `/integrate-packages`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof integratePackageCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(integratePackageCreation !== undefined ? integratePackageCreation : {}) : (integratePackageCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除交付单元的所有版本
         * @param {string} packageId 包Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntegrateVersionByPackageVersionUsingDELETE: async (packageId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling deleteIntegrateVersionByPackageVersionUsingDELETE.');
            }
            const localVarPath = `/integrate-packages/package`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (packageId !== undefined) {
                localVarQueryParameter['packageId'] = packageId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除交付单元指定的版本
         * @param {number} versionId 版本Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntegrateVersionByPackageVersionUsingDELETE1: async (versionId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'versionId' is not null or undefined
            if (versionId === null || versionId === undefined) {
                throw new RequiredError('versionId','Required parameter versionId was null or undefined when calling deleteIntegrateVersionByPackageVersionUsingDELETE1.');
            }
            const localVarPath = `/integrate-packages/version`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (versionId !== undefined) {
                localVarQueryParameter['versionId'] = versionId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据id查询交付单元的详情
         * @param {string} packageId packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegratePackageUsingGET: async (packageId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling getIntegratePackageUsingGET.');
            }
            const localVarPath = `/integrate-packages/{packageId}`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询项目下的所有付单元
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegratePackagesByProjectIdUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getIntegratePackagesByProjectIdUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/integrate-packages`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询某个交付单元指定的版本
         * @param {string} packageId packageId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrateVersionByPackageVersionUsingGET: async (packageId: string, version: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling getIntegrateVersionByPackageVersionUsingGET.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getIntegrateVersionByPackageVersionUsingGET.');
            }
            const localVarPath = `/integrate-packages`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (packageId !== undefined) {
                localVarQueryParameter['packageId'] = packageId;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询某个交付单元的所有版本
         * @param {string} packageId packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrateVersionsByPackageIdUsingGET: async (packageId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling getIntegrateVersionsByPackageIdUsingGET.');
            }
            const localVarPath = `/integrate-packages/{packageId}/versions`
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据id批量查询交付单元的所有版本
         * @param {Array<string>} packageIds packageIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrateVersionsUsingPOST: async (packageIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageIds' is not null or undefined
            if (packageIds === null || packageIds === undefined) {
                throw new RequiredError('packageIds','Required parameter packageIds was null or undefined when calling getIntegrateVersionsUsingPOST.');
            }
            const localVarPath = `/search/integrate-packages/versions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof packageIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(packageIds !== undefined ? packageIds : {}) : (packageIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量获取交付单元中某个版本的标准编码列表
         * @param {Array<number>} versionIds versionIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStandardCodeColl4DeliversUsingPOST: async (versionIds: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'versionIds' is not null or undefined
            if (versionIds === null || versionIds === undefined) {
                throw new RequiredError('versionIds','Required parameter versionIds was null or undefined when calling getStandardCodeColl4DeliversUsingPOST.');
            }
            const localVarPath = `/integrate-packages/versions/standard/code`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof versionIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(versionIds !== undefined ? versionIds : {}) : (versionIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取交付单元中某个版本的标准编码列表
         * @param {number} versionId versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStandardCodeCollUsingGET1: async (versionId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'versionId' is not null or undefined
            if (versionId === null || versionId === undefined) {
                throw new RequiredError('versionId','Required parameter versionId was null or undefined when calling getStandardCodeCollUsingGET1.');
            }
            const localVarPath = `/integrate-packages/{versionId}/standard/code`
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 开始模型集成
         * @param {number} fileId fileId
         * @param {'READY' | 'PROCESSING' | 'SUCCESS' | 'FAILED'} integrateStatus integrateStatus
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrateBeginUsingPUT: async (fileId: number, integrateStatus: 'READY' | 'PROCESSING' | 'SUCCESS' | 'FAILED', version: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId','Required parameter fileId was null or undefined when calling integrateBeginUsingPUT.');
            }
            // verify required parameter 'integrateStatus' is not null or undefined
            if (integrateStatus === null || integrateStatus === undefined) {
                throw new RequiredError('integrateStatus','Required parameter integrateStatus was null or undefined when calling integrateBeginUsingPUT.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling integrateBeginUsingPUT.');
            }
            const localVarPath = `/integrate-versions/{version}/begin`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }

            if (integrateStatus !== undefined) {
                localVarQueryParameter['integrateStatus'] = integrateStatus;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 结束集成
         * @param {'READY' | 'PROCESSING' | 'SUCCESS' | 'FAILED'} integrateStatus integrateStatus
         * @param {number} version version
         * @param {number} [suiteCount] suiteCount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrateEndUsingPUT: async (integrateStatus: 'READY' | 'PROCESSING' | 'SUCCESS' | 'FAILED', version: number, suiteCount?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrateStatus' is not null or undefined
            if (integrateStatus === null || integrateStatus === undefined) {
                throw new RequiredError('integrateStatus','Required parameter integrateStatus was null or undefined when calling integrateEndUsingPUT.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling integrateEndUsingPUT.');
            }
            const localVarPath = `/integrate-versions/{version}/end`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (integrateStatus !== undefined) {
                localVarQueryParameter['integrateStatus'] = integrateStatus;
            }

            if (suiteCount !== undefined) {
                localVarQueryParameter['suiteCount'] = suiteCount;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IntegrateApi - functional programming interface
 * @export
 */
export const IntegrateApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 向交付单元中添加资源
         * @param {string} packageId packageId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<number>} versionIds versionIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addResourcesToPackageUsingPOST1(packageId: string, xGdcUserid: string, versionIds: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseIntegrateVersionVO>> {
            const localVarAxiosArgs = await IntegrateApiAxiosParamCreator(configuration).addResourcesToPackageUsingPOST1(packageId, xGdcUserid, versionIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建模交付单元
         * @param {string} xGdcUserid x-gdc-userid
         * @param {IntegratePackageCreation} integratePackageCreation integratePackageCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIntegratePackageUsingPOST(xGdcUserid: string, integratePackageCreation: IntegratePackageCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseIntegratePackageVO>> {
            const localVarAxiosArgs = await IntegrateApiAxiosParamCreator(configuration).createIntegratePackageUsingPOST(xGdcUserid, integratePackageCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除交付单元的所有版本
         * @param {string} packageId 包Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIntegrateVersionByPackageVersionUsingDELETE(packageId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await IntegrateApiAxiosParamCreator(configuration).deleteIntegrateVersionByPackageVersionUsingDELETE(packageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除交付单元指定的版本
         * @param {number} versionId 版本Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIntegrateVersionByPackageVersionUsingDELETE1(versionId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await IntegrateApiAxiosParamCreator(configuration).deleteIntegrateVersionByPackageVersionUsingDELETE1(versionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据id查询交付单元的详情
         * @param {string} packageId packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntegratePackageUsingGET(packageId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseIntegratePackageVO>> {
            const localVarAxiosArgs = await IntegrateApiAxiosParamCreator(configuration).getIntegratePackageUsingGET(packageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询项目下的所有付单元
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntegratePackagesByProjectIdUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListIntegratePackageVO>> {
            const localVarAxiosArgs = await IntegrateApiAxiosParamCreator(configuration).getIntegratePackagesByProjectIdUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询某个交付单元指定的版本
         * @param {string} packageId packageId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntegrateVersionByPackageVersionUsingGET(packageId: string, version: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseIntegrateVersionVO>> {
            const localVarAxiosArgs = await IntegrateApiAxiosParamCreator(configuration).getIntegrateVersionByPackageVersionUsingGET(packageId, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询某个交付单元的所有版本
         * @param {string} packageId packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntegrateVersionsByPackageIdUsingGET(packageId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListIntegrateVersionVO>> {
            const localVarAxiosArgs = await IntegrateApiAxiosParamCreator(configuration).getIntegrateVersionsByPackageIdUsingGET(packageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 根据id批量查询交付单元的所有版本
         * @param {Array<string>} packageIds packageIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntegrateVersionsUsingPOST(packageIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListIntegrateVersionVO>> {
            const localVarAxiosArgs = await IntegrateApiAxiosParamCreator(configuration).getIntegrateVersionsUsingPOST(packageIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 批量获取交付单元中某个版本的标准编码列表
         * @param {Array<number>} versionIds versionIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStandardCodeColl4DeliversUsingPOST(versionIds: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseArchiveStandardCode4VersionsVO>> {
            const localVarAxiosArgs = await IntegrateApiAxiosParamCreator(configuration).getStandardCodeColl4DeliversUsingPOST(versionIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取交付单元中某个版本的标准编码列表
         * @param {number} versionId versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStandardCodeCollUsingGET1(versionId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseArchiveStandardCodeVO>> {
            const localVarAxiosArgs = await IntegrateApiAxiosParamCreator(configuration).getStandardCodeCollUsingGET1(versionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 开始模型集成
         * @param {number} fileId fileId
         * @param {'READY' | 'PROCESSING' | 'SUCCESS' | 'FAILED'} integrateStatus integrateStatus
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async integrateBeginUsingPUT(fileId: number, integrateStatus: 'READY' | 'PROCESSING' | 'SUCCESS' | 'FAILED', version: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await IntegrateApiAxiosParamCreator(configuration).integrateBeginUsingPUT(fileId, integrateStatus, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 结束集成
         * @param {'READY' | 'PROCESSING' | 'SUCCESS' | 'FAILED'} integrateStatus integrateStatus
         * @param {number} version version
         * @param {number} [suiteCount] suiteCount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async integrateEndUsingPUT(integrateStatus: 'READY' | 'PROCESSING' | 'SUCCESS' | 'FAILED', version: number, suiteCount?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await IntegrateApiAxiosParamCreator(configuration).integrateEndUsingPUT(integrateStatus, version, suiteCount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IntegrateApi - factory interface
 * @export
 */
export const IntegrateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 向交付单元中添加资源
         * @param {string} packageId packageId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {Array<number>} versionIds versionIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addResourcesToPackageUsingPOST1(packageId: string, xGdcUserid: string, versionIds: Array<number>, options?: any): AxiosPromise<ResponseIntegrateVersionVO> {
            return IntegrateApiFp(configuration).addResourcesToPackageUsingPOST1(packageId, xGdcUserid, versionIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建模交付单元
         * @param {string} xGdcUserid x-gdc-userid
         * @param {IntegratePackageCreation} integratePackageCreation integratePackageCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegratePackageUsingPOST(xGdcUserid: string, integratePackageCreation: IntegratePackageCreation, options?: any): AxiosPromise<ResponseIntegratePackageVO> {
            return IntegrateApiFp(configuration).createIntegratePackageUsingPOST(xGdcUserid, integratePackageCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除交付单元的所有版本
         * @param {string} packageId 包Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntegrateVersionByPackageVersionUsingDELETE(packageId: string, options?: any): AxiosPromise<ResponseVoid> {
            return IntegrateApiFp(configuration).deleteIntegrateVersionByPackageVersionUsingDELETE(packageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除交付单元指定的版本
         * @param {number} versionId 版本Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntegrateVersionByPackageVersionUsingDELETE1(versionId: number, options?: any): AxiosPromise<ResponseVoid> {
            return IntegrateApiFp(configuration).deleteIntegrateVersionByPackageVersionUsingDELETE1(versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据id查询交付单元的详情
         * @param {string} packageId packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegratePackageUsingGET(packageId: string, options?: any): AxiosPromise<ResponseIntegratePackageVO> {
            return IntegrateApiFp(configuration).getIntegratePackageUsingGET(packageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询项目下的所有付单元
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegratePackagesByProjectIdUsingGET(projectId: string, options?: any): AxiosPromise<ResponseListIntegratePackageVO> {
            return IntegrateApiFp(configuration).getIntegratePackagesByProjectIdUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询某个交付单元指定的版本
         * @param {string} packageId packageId
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrateVersionByPackageVersionUsingGET(packageId: string, version: number, options?: any): AxiosPromise<ResponseIntegrateVersionVO> {
            return IntegrateApiFp(configuration).getIntegrateVersionByPackageVersionUsingGET(packageId, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询某个交付单元的所有版本
         * @param {string} packageId packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrateVersionsByPackageIdUsingGET(packageId: string, options?: any): AxiosPromise<ResponseListIntegrateVersionVO> {
            return IntegrateApiFp(configuration).getIntegrateVersionsByPackageIdUsingGET(packageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据id批量查询交付单元的所有版本
         * @param {Array<string>} packageIds packageIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrateVersionsUsingPOST(packageIds: Array<string>, options?: any): AxiosPromise<ResponseListIntegrateVersionVO> {
            return IntegrateApiFp(configuration).getIntegrateVersionsUsingPOST(packageIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量获取交付单元中某个版本的标准编码列表
         * @param {Array<number>} versionIds versionIds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStandardCodeColl4DeliversUsingPOST(versionIds: Array<number>, options?: any): AxiosPromise<ResponseArchiveStandardCode4VersionsVO> {
            return IntegrateApiFp(configuration).getStandardCodeColl4DeliversUsingPOST(versionIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取交付单元中某个版本的标准编码列表
         * @param {number} versionId versionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStandardCodeCollUsingGET1(versionId: number, options?: any): AxiosPromise<ResponseArchiveStandardCodeVO> {
            return IntegrateApiFp(configuration).getStandardCodeCollUsingGET1(versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 开始模型集成
         * @param {number} fileId fileId
         * @param {'READY' | 'PROCESSING' | 'SUCCESS' | 'FAILED'} integrateStatus integrateStatus
         * @param {number} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrateBeginUsingPUT(fileId: number, integrateStatus: 'READY' | 'PROCESSING' | 'SUCCESS' | 'FAILED', version: number, options?: any): AxiosPromise<ResponseVoid> {
            return IntegrateApiFp(configuration).integrateBeginUsingPUT(fileId, integrateStatus, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 结束集成
         * @param {'READY' | 'PROCESSING' | 'SUCCESS' | 'FAILED'} integrateStatus integrateStatus
         * @param {number} version version
         * @param {number} [suiteCount] suiteCount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrateEndUsingPUT(integrateStatus: 'READY' | 'PROCESSING' | 'SUCCESS' | 'FAILED', version: number, suiteCount?: number, options?: any): AxiosPromise<ResponseVoid> {
            return IntegrateApiFp(configuration).integrateEndUsingPUT(integrateStatus, version, suiteCount, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IntegrateApi - object-oriented interface
 * @export
 * @class IntegrateApi
 * @extends {BaseAPI}
 */
export class IntegrateApi extends BaseAPI {
    /**
     * 
     * @summary 向交付单元中添加资源
     * @param {string} packageId packageId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {Array<number>} versionIds versionIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrateApi
     */
    public addResourcesToPackageUsingPOST1(packageId: string, xGdcUserid: string, versionIds: Array<number>, options?: any) {
        return IntegrateApiFp(this.configuration).addResourcesToPackageUsingPOST1(packageId, xGdcUserid, versionIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建模交付单元
     * @param {string} xGdcUserid x-gdc-userid
     * @param {IntegratePackageCreation} integratePackageCreation integratePackageCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrateApi
     */
    public createIntegratePackageUsingPOST(xGdcUserid: string, integratePackageCreation: IntegratePackageCreation, options?: any) {
        return IntegrateApiFp(this.configuration).createIntegratePackageUsingPOST(xGdcUserid, integratePackageCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除交付单元的所有版本
     * @param {string} packageId 包Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrateApi
     */
    public deleteIntegrateVersionByPackageVersionUsingDELETE(packageId: string, options?: any) {
        return IntegrateApiFp(this.configuration).deleteIntegrateVersionByPackageVersionUsingDELETE(packageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除交付单元指定的版本
     * @param {number} versionId 版本Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrateApi
     */
    public deleteIntegrateVersionByPackageVersionUsingDELETE1(versionId: number, options?: any) {
        return IntegrateApiFp(this.configuration).deleteIntegrateVersionByPackageVersionUsingDELETE1(versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据id查询交付单元的详情
     * @param {string} packageId packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrateApi
     */
    public getIntegratePackageUsingGET(packageId: string, options?: any) {
        return IntegrateApiFp(this.configuration).getIntegratePackageUsingGET(packageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询项目下的所有付单元
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrateApi
     */
    public getIntegratePackagesByProjectIdUsingGET(projectId: string, options?: any) {
        return IntegrateApiFp(this.configuration).getIntegratePackagesByProjectIdUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询某个交付单元指定的版本
     * @param {string} packageId packageId
     * @param {number} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrateApi
     */
    public getIntegrateVersionByPackageVersionUsingGET(packageId: string, version: number, options?: any) {
        return IntegrateApiFp(this.configuration).getIntegrateVersionByPackageVersionUsingGET(packageId, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询某个交付单元的所有版本
     * @param {string} packageId packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrateApi
     */
    public getIntegrateVersionsByPackageIdUsingGET(packageId: string, options?: any) {
        return IntegrateApiFp(this.configuration).getIntegrateVersionsByPackageIdUsingGET(packageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据id批量查询交付单元的所有版本
     * @param {Array<string>} packageIds packageIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrateApi
     */
    public getIntegrateVersionsUsingPOST(packageIds: Array<string>, options?: any) {
        return IntegrateApiFp(this.configuration).getIntegrateVersionsUsingPOST(packageIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量获取交付单元中某个版本的标准编码列表
     * @param {Array<number>} versionIds versionIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrateApi
     */
    public getStandardCodeColl4DeliversUsingPOST(versionIds: Array<number>, options?: any) {
        return IntegrateApiFp(this.configuration).getStandardCodeColl4DeliversUsingPOST(versionIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取交付单元中某个版本的标准编码列表
     * @param {number} versionId versionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrateApi
     */
    public getStandardCodeCollUsingGET1(versionId: number, options?: any) {
        return IntegrateApiFp(this.configuration).getStandardCodeCollUsingGET1(versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 开始模型集成
     * @param {number} fileId fileId
     * @param {'READY' | 'PROCESSING' | 'SUCCESS' | 'FAILED'} integrateStatus integrateStatus
     * @param {number} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrateApi
     */
    public integrateBeginUsingPUT(fileId: number, integrateStatus: 'READY' | 'PROCESSING' | 'SUCCESS' | 'FAILED', version: number, options?: any) {
        return IntegrateApiFp(this.configuration).integrateBeginUsingPUT(fileId, integrateStatus, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 结束集成
     * @param {'READY' | 'PROCESSING' | 'SUCCESS' | 'FAILED'} integrateStatus integrateStatus
     * @param {number} version version
     * @param {number} [suiteCount] suiteCount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrateApi
     */
    public integrateEndUsingPUT(integrateStatus: 'READY' | 'PROCESSING' | 'SUCCESS' | 'FAILED', version: number, suiteCount?: number, options?: any) {
        return IntegrateApiFp(this.configuration).integrateEndUsingPUT(integrateStatus, version, suiteCount, options).then((request) => request(this.axios, this.basePath));
    }

}

// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResponseListProjectVO } from '../model';
// @ts-ignore
import { ResponseListSampleProjectVO } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
// @ts-ignore
import { SampleProjectCreation } from '../model';
/**
 * SampleProjectApi - axios parameter creator
 * @export
 */
export const SampleProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 将样板项目移除
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSampleProjectUsingDELETE: async (projectId: string, xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling deleteSampleProjectUsingDELETE.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling deleteSampleProjectUsingDELETE.');
            }
            const localVarPath = `/sampleProjects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取样板项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSampleProjectUsingGET: async (xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling getAllSampleProjectUsingGET.');
            }
            const localVarPath = `/sampleProjects`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取所有的样板项目V2
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSampleProjectsV2UsingGET: async (xGdcUserid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling getAllSampleProjectsV2UsingGET.');
            }
            const localVarPath = `/v2/sampleProjects`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 将项目设置为样板项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {SampleProjectCreation} sampleProjectCreation sampleProjectCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSampleProjectUsingPOST: async (xGdcUserid: string, sampleProjectCreation: SampleProjectCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling setSampleProjectUsingPOST.');
            }
            // verify required parameter 'sampleProjectCreation' is not null or undefined
            if (sampleProjectCreation === null || sampleProjectCreation === undefined) {
                throw new RequiredError('sampleProjectCreation','Required parameter sampleProjectCreation was null or undefined when calling setSampleProjectUsingPOST.');
            }
            const localVarPath = `/sampleProjects`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof sampleProjectCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(sampleProjectCreation !== undefined ? sampleProjectCreation : {}) : (sampleProjectCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更改样板项目
         * @param {string} sampleProjectId sampleProjectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {SampleProjectCreation} sampleProjectCreation sampleProjectCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSampleProjectUsingPUT: async (sampleProjectId: string, xGdcUserid: string, sampleProjectCreation: SampleProjectCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sampleProjectId' is not null or undefined
            if (sampleProjectId === null || sampleProjectId === undefined) {
                throw new RequiredError('sampleProjectId','Required parameter sampleProjectId was null or undefined when calling updateSampleProjectUsingPUT.');
            }
            // verify required parameter 'xGdcUserid' is not null or undefined
            if (xGdcUserid === null || xGdcUserid === undefined) {
                throw new RequiredError('xGdcUserid','Required parameter xGdcUserid was null or undefined when calling updateSampleProjectUsingPUT.');
            }
            // verify required parameter 'sampleProjectCreation' is not null or undefined
            if (sampleProjectCreation === null || sampleProjectCreation === undefined) {
                throw new RequiredError('sampleProjectCreation','Required parameter sampleProjectCreation was null or undefined when calling updateSampleProjectUsingPUT.');
            }
            const localVarPath = `/sampleProjects/{sampleProjectId}`
                .replace(`{${"sampleProjectId"}}`, encodeURIComponent(String(sampleProjectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xGdcUserid !== undefined && xGdcUserid !== null) {
                localVarHeaderParameter['x-gdc-userid'] = String(xGdcUserid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof sampleProjectCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(sampleProjectCreation !== undefined ? sampleProjectCreation : {}) : (sampleProjectCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SampleProjectApi - functional programming interface
 * @export
 */
export const SampleProjectApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 将样板项目移除
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSampleProjectUsingDELETE(projectId: string, xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await SampleProjectApiAxiosParamCreator(configuration).deleteSampleProjectUsingDELETE(projectId, xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取样板项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSampleProjectUsingGET(xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListSampleProjectVO>> {
            const localVarAxiosArgs = await SampleProjectApiAxiosParamCreator(configuration).getAllSampleProjectUsingGET(xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取所有的样板项目V2
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSampleProjectsV2UsingGET(xGdcUserid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListProjectVO>> {
            const localVarAxiosArgs = await SampleProjectApiAxiosParamCreator(configuration).getAllSampleProjectsV2UsingGET(xGdcUserid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 将项目设置为样板项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {SampleProjectCreation} sampleProjectCreation sampleProjectCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setSampleProjectUsingPOST(xGdcUserid: string, sampleProjectCreation: SampleProjectCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await SampleProjectApiAxiosParamCreator(configuration).setSampleProjectUsingPOST(xGdcUserid, sampleProjectCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更改样板项目
         * @param {string} sampleProjectId sampleProjectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {SampleProjectCreation} sampleProjectCreation sampleProjectCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSampleProjectUsingPUT(sampleProjectId: string, xGdcUserid: string, sampleProjectCreation: SampleProjectCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await SampleProjectApiAxiosParamCreator(configuration).updateSampleProjectUsingPUT(sampleProjectId, xGdcUserid, sampleProjectCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SampleProjectApi - factory interface
 * @export
 */
export const SampleProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 将样板项目移除
         * @param {string} projectId projectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSampleProjectUsingDELETE(projectId: string, xGdcUserid: string, options?: any): AxiosPromise<ResponseVoid> {
            return SampleProjectApiFp(configuration).deleteSampleProjectUsingDELETE(projectId, xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取样板项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSampleProjectUsingGET(xGdcUserid: string, options?: any): AxiosPromise<ResponseListSampleProjectVO> {
            return SampleProjectApiFp(configuration).getAllSampleProjectUsingGET(xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取所有的样板项目V2
         * @param {string} xGdcUserid x-gdc-userid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSampleProjectsV2UsingGET(xGdcUserid: string, options?: any): AxiosPromise<ResponseListProjectVO> {
            return SampleProjectApiFp(configuration).getAllSampleProjectsV2UsingGET(xGdcUserid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 将项目设置为样板项目
         * @param {string} xGdcUserid x-gdc-userid
         * @param {SampleProjectCreation} sampleProjectCreation sampleProjectCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSampleProjectUsingPOST(xGdcUserid: string, sampleProjectCreation: SampleProjectCreation, options?: any): AxiosPromise<ResponseVoid> {
            return SampleProjectApiFp(configuration).setSampleProjectUsingPOST(xGdcUserid, sampleProjectCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更改样板项目
         * @param {string} sampleProjectId sampleProjectId
         * @param {string} xGdcUserid x-gdc-userid
         * @param {SampleProjectCreation} sampleProjectCreation sampleProjectCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSampleProjectUsingPUT(sampleProjectId: string, xGdcUserid: string, sampleProjectCreation: SampleProjectCreation, options?: any): AxiosPromise<ResponseVoid> {
            return SampleProjectApiFp(configuration).updateSampleProjectUsingPUT(sampleProjectId, xGdcUserid, sampleProjectCreation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SampleProjectApi - object-oriented interface
 * @export
 * @class SampleProjectApi
 * @extends {BaseAPI}
 */
export class SampleProjectApi extends BaseAPI {
    /**
     * 
     * @summary 将样板项目移除
     * @param {string} projectId projectId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleProjectApi
     */
    public deleteSampleProjectUsingDELETE(projectId: string, xGdcUserid: string, options?: any) {
        return SampleProjectApiFp(this.configuration).deleteSampleProjectUsingDELETE(projectId, xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取样板项目
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleProjectApi
     */
    public getAllSampleProjectUsingGET(xGdcUserid: string, options?: any) {
        return SampleProjectApiFp(this.configuration).getAllSampleProjectUsingGET(xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取所有的样板项目V2
     * @param {string} xGdcUserid x-gdc-userid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleProjectApi
     */
    public getAllSampleProjectsV2UsingGET(xGdcUserid: string, options?: any) {
        return SampleProjectApiFp(this.configuration).getAllSampleProjectsV2UsingGET(xGdcUserid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 将项目设置为样板项目
     * @param {string} xGdcUserid x-gdc-userid
     * @param {SampleProjectCreation} sampleProjectCreation sampleProjectCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleProjectApi
     */
    public setSampleProjectUsingPOST(xGdcUserid: string, sampleProjectCreation: SampleProjectCreation, options?: any) {
        return SampleProjectApiFp(this.configuration).setSampleProjectUsingPOST(xGdcUserid, sampleProjectCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更改样板项目
     * @param {string} sampleProjectId sampleProjectId
     * @param {string} xGdcUserid x-gdc-userid
     * @param {SampleProjectCreation} sampleProjectCreation sampleProjectCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleProjectApi
     */
    public updateSampleProjectUsingPUT(sampleProjectId: string, xGdcUserid: string, sampleProjectCreation: SampleProjectCreation, options?: any) {
        return SampleProjectApiFp(this.configuration).updateSampleProjectUsingPUT(sampleProjectId, xGdcUserid, sampleProjectCreation, options).then((request) => request(this.axios, this.basePath));
    }

}

// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResponseListSpecialty } from '../model';
// @ts-ignore
import { ResponseListSpecialtyVO } from '../model';
// @ts-ignore
import { ResponseSpecialty } from '../model';
// @ts-ignore
import { ResponseSpecialtyVO } from '../model';
// @ts-ignore
import { ResponseVoid } from '../model';
// @ts-ignore
import { Specialty } from '../model';
/**
 * SpecialtyApi - axios parameter creator
 * @export
 */
export const SpecialtyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建专业
         * @param {Specialty} specialty specialty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpecialtyUsingPOST: async (specialty: Specialty, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'specialty' is not null or undefined
            if (specialty === null || specialty === undefined) {
                throw new RequiredError('specialty','Required parameter specialty was null or undefined when calling createSpecialtyUsingPOST.');
            }
            const localVarPath = `/specialties`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof specialty !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(specialty !== undefined ? specialty : {}) : (specialty || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取项目下的专业信息
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecialtiesInProjectUsingGET: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getSpecialtiesInProjectUsingGET.');
            }
            const localVarPath = `/projects/{projectId}/specialties`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取专业信息
         * @param {string} specialtyId specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecialtyByIdUsingGET: async (specialtyId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new RequiredError('specialtyId','Required parameter specialtyId was null or undefined when calling getSpecialtyByIdUsingGET.');
            }
            const localVarPath = `/specialties/{specialtyId}`
                .replace(`{${"specialtyId"}}`, encodeURIComponent(String(specialtyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询专业信息
         * @param {Specialty} specialty specialty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        querySpecialtyUsingPOST: async (specialty: Specialty, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'specialty' is not null or undefined
            if (specialty === null || specialty === undefined) {
                throw new RequiredError('specialty','Required parameter specialty was null or undefined when calling querySpecialtyUsingPOST.');
            }
            const localVarPath = `/specialties/query`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof specialty !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(specialty !== undefined ? specialty : {}) : (specialty || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改专业信息
         * @param {string} specialtyId specialtyId
         * @param {Specialty} specialty specialty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecialtyUsingPUT: async (specialtyId: string, specialty: Specialty, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new RequiredError('specialtyId','Required parameter specialtyId was null or undefined when calling updateSpecialtyUsingPUT.');
            }
            // verify required parameter 'specialty' is not null or undefined
            if (specialty === null || specialty === undefined) {
                throw new RequiredError('specialty','Required parameter specialty was null or undefined when calling updateSpecialtyUsingPUT.');
            }
            const localVarPath = `/specialties/{specialtyId}`
                .replace(`{${"specialtyId"}}`, encodeURIComponent(String(specialtyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof specialty !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(specialty !== undefined ? specialty : {}) : (specialty || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpecialtyApi - functional programming interface
 * @export
 */
export const SpecialtyApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 创建专业
         * @param {Specialty} specialty specialty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSpecialtyUsingPOST(specialty: Specialty, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseSpecialty>> {
            const localVarAxiosArgs = await SpecialtyApiAxiosParamCreator(configuration).createSpecialtyUsingPOST(specialty, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取项目下的专业信息
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecialtiesInProjectUsingGET(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListSpecialtyVO>> {
            const localVarAxiosArgs = await SpecialtyApiAxiosParamCreator(configuration).getSpecialtiesInProjectUsingGET(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取专业信息
         * @param {string} specialtyId specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecialtyByIdUsingGET(specialtyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseSpecialtyVO>> {
            const localVarAxiosArgs = await SpecialtyApiAxiosParamCreator(configuration).getSpecialtyByIdUsingGET(specialtyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询专业信息
         * @param {Specialty} specialty specialty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async querySpecialtyUsingPOST(specialty: Specialty, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListSpecialty>> {
            const localVarAxiosArgs = await SpecialtyApiAxiosParamCreator(configuration).querySpecialtyUsingPOST(specialty, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改专业信息
         * @param {string} specialtyId specialtyId
         * @param {Specialty} specialty specialty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSpecialtyUsingPUT(specialtyId: string, specialty: Specialty, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseVoid>> {
            const localVarAxiosArgs = await SpecialtyApiAxiosParamCreator(configuration).updateSpecialtyUsingPUT(specialtyId, specialty, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SpecialtyApi - factory interface
 * @export
 */
export const SpecialtyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 创建专业
         * @param {Specialty} specialty specialty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpecialtyUsingPOST(specialty: Specialty, options?: any): AxiosPromise<ResponseSpecialty> {
            return SpecialtyApiFp(configuration).createSpecialtyUsingPOST(specialty, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取项目下的专业信息
         * @param {string} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecialtiesInProjectUsingGET(projectId: string, options?: any): AxiosPromise<ResponseListSpecialtyVO> {
            return SpecialtyApiFp(configuration).getSpecialtiesInProjectUsingGET(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取专业信息
         * @param {string} specialtyId specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecialtyByIdUsingGET(specialtyId: string, options?: any): AxiosPromise<ResponseSpecialtyVO> {
            return SpecialtyApiFp(configuration).getSpecialtyByIdUsingGET(specialtyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询专业信息
         * @param {Specialty} specialty specialty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        querySpecialtyUsingPOST(specialty: Specialty, options?: any): AxiosPromise<ResponseListSpecialty> {
            return SpecialtyApiFp(configuration).querySpecialtyUsingPOST(specialty, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改专业信息
         * @param {string} specialtyId specialtyId
         * @param {Specialty} specialty specialty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecialtyUsingPUT(specialtyId: string, specialty: Specialty, options?: any): AxiosPromise<ResponseVoid> {
            return SpecialtyApiFp(configuration).updateSpecialtyUsingPUT(specialtyId, specialty, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpecialtyApi - object-oriented interface
 * @export
 * @class SpecialtyApi
 * @extends {BaseAPI}
 */
export class SpecialtyApi extends BaseAPI {
    /**
     * 
     * @summary 创建专业
     * @param {Specialty} specialty specialty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyApi
     */
    public createSpecialtyUsingPOST(specialty: Specialty, options?: any) {
        return SpecialtyApiFp(this.configuration).createSpecialtyUsingPOST(specialty, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取项目下的专业信息
     * @param {string} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyApi
     */
    public getSpecialtiesInProjectUsingGET(projectId: string, options?: any) {
        return SpecialtyApiFp(this.configuration).getSpecialtiesInProjectUsingGET(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取专业信息
     * @param {string} specialtyId specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyApi
     */
    public getSpecialtyByIdUsingGET(specialtyId: string, options?: any) {
        return SpecialtyApiFp(this.configuration).getSpecialtyByIdUsingGET(specialtyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询专业信息
     * @param {Specialty} specialty specialty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyApi
     */
    public querySpecialtyUsingPOST(specialty: Specialty, options?: any) {
        return SpecialtyApiFp(this.configuration).querySpecialtyUsingPOST(specialty, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改专业信息
     * @param {string} specialtyId specialtyId
     * @param {Specialty} specialty specialty
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyApi
     */
    public updateSpecialtyUsingPUT(specialtyId: string, specialty: Specialty, options?: any) {
        return SpecialtyApiFp(this.configuration).updateSpecialtyUsingPUT(specialtyId, specialty, options).then((request) => request(this.axios, this.basePath));
    }

}

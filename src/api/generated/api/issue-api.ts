// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IssueBO } from '../model';
// @ts-ignore
import { IssueQueryByExtraKeyBO } from '../model';
// @ts-ignore
import { IssueStatusBO } from '../model';
// @ts-ignore
import { IssueUpdateBO } from '../model';
// @ts-ignore
import { IssueUpdateByExtraKeyBO } from '../model';
// @ts-ignore
import { ResponseIssueVO } from '../model';
// @ts-ignore
import { ResponseListIssue } from '../model';
// @ts-ignore
import { ResponseListIssueVO } from '../model';
// @ts-ignore
import { Responseint } from '../model';
// @ts-ignore
import { Responseobject } from '../model';
/**
 * IssueApi - axios parameter creator
 * @export
 */
export const IssueApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 关闭问题
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeIssueUsingPOST: async (body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling closeIssueUsingPOST.');
            }
            const localVarPath = `/issue/close`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建问题
         * @param {IssueBO} issueBO issueBO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssueUsingPUT: async (issueBO: IssueBO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueBO' is not null or undefined
            if (issueBO === null || issueBO === undefined) {
                throw new RequiredError('issueBO','Required parameter issueBO was null or undefined when calling createIssueUsingPUT.');
            }
            const localVarPath = `/issue`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof issueBO !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(issueBO !== undefined ? issueBO : {}) : (issueBO || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建多条问题
         * @param {Array<IssueBO>} issueBos issueBos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssuesUsingPUT: async (issueBos: Array<IssueBO>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueBos' is not null or undefined
            if (issueBos === null || issueBos === undefined) {
                throw new RequiredError('issueBos','Required parameter issueBos was null or undefined when calling createIssuesUsingPUT.');
            }
            const localVarPath = `/issues`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof issueBos !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(issueBos !== undefined ? issueBos : {}) : (issueBos || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 解决问题后转为待上传状态
         * @param {IssueStatusBO} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dealIssueUsingPOST: async (body: IssueStatusBO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling dealIssueUsingPOST.');
            }
            const localVarPath = `/issue/deal`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询问题详情
         * @param {number} issueId issueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssueVoByIdUsingGET: async (issueId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueId' is not null or undefined
            if (issueId === null || issueId === undefined) {
                throw new RequiredError('issueId','Required parameter issueId was null or undefined when calling getIssueVoByIdUsingGET.');
            }
            const localVarPath = `/issue/{issueId}/detail`
                .replace(`{${"issueId"}}`, encodeURIComponent(String(issueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 按工作单元id查询问题（带数据集和创建人信息）
         * @param {Array<string>} datasetIds datasetIds
         * @param {number} [page] page
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssueVosByDatasetIdUsingPOST: async (datasetIds: Array<string>, page?: number, type?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetIds' is not null or undefined
            if (datasetIds === null || datasetIds === undefined) {
                throw new RequiredError('datasetIds','Required parameter datasetIds was null or undefined when calling getIssueVosByDatasetIdUsingPOST.');
            }
            const localVarPath = `/issue/detail/bydatasetids`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof datasetIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(datasetIds !== undefined ? datasetIds : {}) : (datasetIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 按照团队Id查询问题（带工作单元和创建人信息）
         * @param {string} teamId teamId
         * @param {number} [page] page
         * @param {boolean} [skipCloudify] skipCloudify
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssueVosByTeamIdUsingGET: async (teamId: string, page?: number, skipCloudify?: boolean, type?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getIssueVosByTeamIdUsingGET.');
            }
            const localVarPath = `/issue/detail/{teamId}/byteamid`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (skipCloudify !== undefined) {
                localVarQueryParameter['skipCloudify'] = skipCloudify;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 按工作单元id查询问题
         * @param {Array<string>} datasetIds datasetIds
         * @param {number} [page] page
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssuesByDatasetIdUsingPOST: async (datasetIds: Array<string>, page?: number, type?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetIds' is not null or undefined
            if (datasetIds === null || datasetIds === undefined) {
                throw new RequiredError('datasetIds','Required parameter datasetIds was null or undefined when calling getIssuesByDatasetIdUsingPOST.');
            }
            const localVarPath = `/issue/bydatasetids`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof datasetIds !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(datasetIds !== undefined ? datasetIds : {}) : (datasetIds || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 按问题类型和extraKey查询问题
         * @param {Array<IssueQueryByExtraKeyBO>} queries queries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssuesByExtraKeysUsingPOST: async (queries: Array<IssueQueryByExtraKeyBO>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'queries' is not null or undefined
            if (queries === null || queries === undefined) {
                throw new RequiredError('queries','Required parameter queries was null or undefined when calling getIssuesByExtraKeysUsingPOST.');
            }
            const localVarPath = `/issue/query/byextrakey`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof queries !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(queries !== undefined ? queries : {}) : (queries || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 按照团队Id查询问题
         * @param {string} teamId teamId
         * @param {number} [page] page
         * @param {boolean} [skipCloudify] skipCloudify
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssuesByTeamIdUsingGET: async (teamId: string, page?: number, skipCloudify?: boolean, type?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getIssuesByTeamIdUsingGET.');
            }
            const localVarPath = `/issue/{teamId}/byteamid`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (skipCloudify !== undefined) {
                localVarQueryParameter['skipCloudify'] = skipCloudify;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 重新打开问题
         * @param {IssueStatusBO} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reopenIssueUsingPOST: async (body: IssueStatusBO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling reopenIssueUsingPOST.');
            }
            const localVarPath = `/issue/reopen`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 解决问题
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        solveIssueUsingPOST: async (body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling solveIssueUsingPOST.');
            }
            const localVarPath = `/issue/solve`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 将问题改为待验证
         * @param {IssueStatusBO} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitIssueUsingPOST: async (body: IssueStatusBO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling submitIssueUsingPOST.');
            }
            const localVarPath = `/issue/submit`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 按问题类型和extraKey更新问题
         * @param {Array<IssueUpdateByExtraKeyBO>} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIssueByExtraKeyUsingPOST: async (body: Array<IssueUpdateByExtraKeyBO>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateIssueByExtraKeyUsingPOST.');
            }
            const localVarPath = `/issue/byextrakey`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新问题
         * @param {IssueUpdateBO} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIssueUsingPOST: async (body: IssueUpdateBO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateIssueUsingPOST.');
            }
            const localVarPath = `/issue`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IssueApi - functional programming interface
 * @export
 */
export const IssueApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 关闭问题
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async closeIssueUsingPOST(body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).closeIssueUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建问题
         * @param {IssueBO} issueBO issueBO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIssueUsingPUT(issueBO: IssueBO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).createIssueUsingPUT(issueBO, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建多条问题
         * @param {Array<IssueBO>} issueBos issueBos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIssuesUsingPUT(issueBos: Array<IssueBO>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).createIssuesUsingPUT(issueBos, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 解决问题后转为待上传状态
         * @param {IssueStatusBO} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealIssueUsingPOST(body: IssueStatusBO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).dealIssueUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询问题详情
         * @param {number} issueId issueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIssueVoByIdUsingGET(issueId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseIssueVO>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).getIssueVoByIdUsingGET(issueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 按工作单元id查询问题（带数据集和创建人信息）
         * @param {Array<string>} datasetIds datasetIds
         * @param {number} [page] page
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIssueVosByDatasetIdUsingPOST(datasetIds: Array<string>, page?: number, type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListIssueVO>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).getIssueVosByDatasetIdUsingPOST(datasetIds, page, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 按照团队Id查询问题（带工作单元和创建人信息）
         * @param {string} teamId teamId
         * @param {number} [page] page
         * @param {boolean} [skipCloudify] skipCloudify
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIssueVosByTeamIdUsingGET(teamId: string, page?: number, skipCloudify?: boolean, type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListIssueVO>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).getIssueVosByTeamIdUsingGET(teamId, page, skipCloudify, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 按工作单元id查询问题
         * @param {Array<string>} datasetIds datasetIds
         * @param {number} [page] page
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIssuesByDatasetIdUsingPOST(datasetIds: Array<string>, page?: number, type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListIssue>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).getIssuesByDatasetIdUsingPOST(datasetIds, page, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 按问题类型和extraKey查询问题
         * @param {Array<IssueQueryByExtraKeyBO>} queries queries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIssuesByExtraKeysUsingPOST(queries: Array<IssueQueryByExtraKeyBO>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseobject>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).getIssuesByExtraKeysUsingPOST(queries, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 按照团队Id查询问题
         * @param {string} teamId teamId
         * @param {number} [page] page
         * @param {boolean} [skipCloudify] skipCloudify
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIssuesByTeamIdUsingGET(teamId: string, page?: number, skipCloudify?: boolean, type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListIssue>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).getIssuesByTeamIdUsingGET(teamId, page, skipCloudify, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 重新打开问题
         * @param {IssueStatusBO} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reopenIssueUsingPOST(body: IssueStatusBO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).reopenIssueUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 解决问题
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async solveIssueUsingPOST(body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).solveIssueUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 将问题改为待验证
         * @param {IssueStatusBO} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitIssueUsingPOST(body: IssueStatusBO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).submitIssueUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 按问题类型和extraKey更新问题
         * @param {Array<IssueUpdateByExtraKeyBO>} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIssueByExtraKeyUsingPOST(body: Array<IssueUpdateByExtraKeyBO>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).updateIssueByExtraKeyUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新问题
         * @param {IssueUpdateBO} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIssueUsingPOST(body: IssueUpdateBO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Responseint>> {
            const localVarAxiosArgs = await IssueApiAxiosParamCreator(configuration).updateIssueUsingPOST(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IssueApi - factory interface
 * @export
 */
export const IssueApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 关闭问题
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeIssueUsingPOST(body: object, options?: any): AxiosPromise<Responseint> {
            return IssueApiFp(configuration).closeIssueUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建问题
         * @param {IssueBO} issueBO issueBO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssueUsingPUT(issueBO: IssueBO, options?: any): AxiosPromise<Responseint> {
            return IssueApiFp(configuration).createIssueUsingPUT(issueBO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建多条问题
         * @param {Array<IssueBO>} issueBos issueBos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssuesUsingPUT(issueBos: Array<IssueBO>, options?: any): AxiosPromise<Responseint> {
            return IssueApiFp(configuration).createIssuesUsingPUT(issueBos, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 解决问题后转为待上传状态
         * @param {IssueStatusBO} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dealIssueUsingPOST(body: IssueStatusBO, options?: any): AxiosPromise<Responseint> {
            return IssueApiFp(configuration).dealIssueUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询问题详情
         * @param {number} issueId issueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssueVoByIdUsingGET(issueId: number, options?: any): AxiosPromise<ResponseIssueVO> {
            return IssueApiFp(configuration).getIssueVoByIdUsingGET(issueId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 按工作单元id查询问题（带数据集和创建人信息）
         * @param {Array<string>} datasetIds datasetIds
         * @param {number} [page] page
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssueVosByDatasetIdUsingPOST(datasetIds: Array<string>, page?: number, type?: string, options?: any): AxiosPromise<ResponseListIssueVO> {
            return IssueApiFp(configuration).getIssueVosByDatasetIdUsingPOST(datasetIds, page, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 按照团队Id查询问题（带工作单元和创建人信息）
         * @param {string} teamId teamId
         * @param {number} [page] page
         * @param {boolean} [skipCloudify] skipCloudify
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssueVosByTeamIdUsingGET(teamId: string, page?: number, skipCloudify?: boolean, type?: string, options?: any): AxiosPromise<ResponseListIssueVO> {
            return IssueApiFp(configuration).getIssueVosByTeamIdUsingGET(teamId, page, skipCloudify, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 按工作单元id查询问题
         * @param {Array<string>} datasetIds datasetIds
         * @param {number} [page] page
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssuesByDatasetIdUsingPOST(datasetIds: Array<string>, page?: number, type?: string, options?: any): AxiosPromise<ResponseListIssue> {
            return IssueApiFp(configuration).getIssuesByDatasetIdUsingPOST(datasetIds, page, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 按问题类型和extraKey查询问题
         * @param {Array<IssueQueryByExtraKeyBO>} queries queries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssuesByExtraKeysUsingPOST(queries: Array<IssueQueryByExtraKeyBO>, options?: any): AxiosPromise<Responseobject> {
            return IssueApiFp(configuration).getIssuesByExtraKeysUsingPOST(queries, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 按照团队Id查询问题
         * @param {string} teamId teamId
         * @param {number} [page] page
         * @param {boolean} [skipCloudify] skipCloudify
         * @param {string} [type] type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssuesByTeamIdUsingGET(teamId: string, page?: number, skipCloudify?: boolean, type?: string, options?: any): AxiosPromise<ResponseListIssue> {
            return IssueApiFp(configuration).getIssuesByTeamIdUsingGET(teamId, page, skipCloudify, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 重新打开问题
         * @param {IssueStatusBO} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reopenIssueUsingPOST(body: IssueStatusBO, options?: any): AxiosPromise<Responseint> {
            return IssueApiFp(configuration).reopenIssueUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 解决问题
         * @param {object} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        solveIssueUsingPOST(body: object, options?: any): AxiosPromise<Responseint> {
            return IssueApiFp(configuration).solveIssueUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 将问题改为待验证
         * @param {IssueStatusBO} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitIssueUsingPOST(body: IssueStatusBO, options?: any): AxiosPromise<Responseint> {
            return IssueApiFp(configuration).submitIssueUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 按问题类型和extraKey更新问题
         * @param {Array<IssueUpdateByExtraKeyBO>} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIssueByExtraKeyUsingPOST(body: Array<IssueUpdateByExtraKeyBO>, options?: any): AxiosPromise<Responseint> {
            return IssueApiFp(configuration).updateIssueByExtraKeyUsingPOST(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新问题
         * @param {IssueUpdateBO} body body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIssueUsingPOST(body: IssueUpdateBO, options?: any): AxiosPromise<Responseint> {
            return IssueApiFp(configuration).updateIssueUsingPOST(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IssueApi - object-oriented interface
 * @export
 * @class IssueApi
 * @extends {BaseAPI}
 */
export class IssueApi extends BaseAPI {
    /**
     * 
     * @summary 关闭问题
     * @param {object} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public closeIssueUsingPOST(body: object, options?: any) {
        return IssueApiFp(this.configuration).closeIssueUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建问题
     * @param {IssueBO} issueBO issueBO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public createIssueUsingPUT(issueBO: IssueBO, options?: any) {
        return IssueApiFp(this.configuration).createIssueUsingPUT(issueBO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建多条问题
     * @param {Array<IssueBO>} issueBos issueBos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public createIssuesUsingPUT(issueBos: Array<IssueBO>, options?: any) {
        return IssueApiFp(this.configuration).createIssuesUsingPUT(issueBos, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 解决问题后转为待上传状态
     * @param {IssueStatusBO} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public dealIssueUsingPOST(body: IssueStatusBO, options?: any) {
        return IssueApiFp(this.configuration).dealIssueUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询问题详情
     * @param {number} issueId issueId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public getIssueVoByIdUsingGET(issueId: number, options?: any) {
        return IssueApiFp(this.configuration).getIssueVoByIdUsingGET(issueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 按工作单元id查询问题（带数据集和创建人信息）
     * @param {Array<string>} datasetIds datasetIds
     * @param {number} [page] page
     * @param {string} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public getIssueVosByDatasetIdUsingPOST(datasetIds: Array<string>, page?: number, type?: string, options?: any) {
        return IssueApiFp(this.configuration).getIssueVosByDatasetIdUsingPOST(datasetIds, page, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 按照团队Id查询问题（带工作单元和创建人信息）
     * @param {string} teamId teamId
     * @param {number} [page] page
     * @param {boolean} [skipCloudify] skipCloudify
     * @param {string} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public getIssueVosByTeamIdUsingGET(teamId: string, page?: number, skipCloudify?: boolean, type?: string, options?: any) {
        return IssueApiFp(this.configuration).getIssueVosByTeamIdUsingGET(teamId, page, skipCloudify, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 按工作单元id查询问题
     * @param {Array<string>} datasetIds datasetIds
     * @param {number} [page] page
     * @param {string} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public getIssuesByDatasetIdUsingPOST(datasetIds: Array<string>, page?: number, type?: string, options?: any) {
        return IssueApiFp(this.configuration).getIssuesByDatasetIdUsingPOST(datasetIds, page, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 按问题类型和extraKey查询问题
     * @param {Array<IssueQueryByExtraKeyBO>} queries queries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public getIssuesByExtraKeysUsingPOST(queries: Array<IssueQueryByExtraKeyBO>, options?: any) {
        return IssueApiFp(this.configuration).getIssuesByExtraKeysUsingPOST(queries, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 按照团队Id查询问题
     * @param {string} teamId teamId
     * @param {number} [page] page
     * @param {boolean} [skipCloudify] skipCloudify
     * @param {string} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public getIssuesByTeamIdUsingGET(teamId: string, page?: number, skipCloudify?: boolean, type?: string, options?: any) {
        return IssueApiFp(this.configuration).getIssuesByTeamIdUsingGET(teamId, page, skipCloudify, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 重新打开问题
     * @param {IssueStatusBO} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public reopenIssueUsingPOST(body: IssueStatusBO, options?: any) {
        return IssueApiFp(this.configuration).reopenIssueUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 解决问题
     * @param {object} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public solveIssueUsingPOST(body: object, options?: any) {
        return IssueApiFp(this.configuration).solveIssueUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 将问题改为待验证
     * @param {IssueStatusBO} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public submitIssueUsingPOST(body: IssueStatusBO, options?: any) {
        return IssueApiFp(this.configuration).submitIssueUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 按问题类型和extraKey更新问题
     * @param {Array<IssueUpdateByExtraKeyBO>} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public updateIssueByExtraKeyUsingPOST(body: Array<IssueUpdateByExtraKeyBO>, options?: any) {
        return IssueApiFp(this.configuration).updateIssueByExtraKeyUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新问题
     * @param {IssueUpdateBO} body body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public updateIssueUsingPOST(body: IssueUpdateBO, options?: any) {
        return IssueApiFp(this.configuration).updateIssueUsingPOST(body, options).then((request) => request(this.axios, this.basePath));
    }

}

// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetRelationshipForLinkType } from '../model';
// @ts-ignore
import { Relationship } from '../model';
// @ts-ignore
import { RelationshipQuery } from '../model';
// @ts-ignore
import { ResponseListRelationship } from '../model';
/**
 * RelationshipApi - axios parameter creator
 * @export
 */
export const RelationshipApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createRelationship
         * @param {Relationship} relationship relationship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRelationshipUsingPUT: async (relationship: Relationship, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'relationship' is not null or undefined
            if (relationship === null || relationship === undefined) {
                throw new RequiredError('relationship','Required parameter relationship was null or undefined when calling createRelationshipUsingPUT.');
            }
            const localVarPath = `/relationship`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof relationship !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(relationship !== undefined ? relationship : {}) : (relationship || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getRelationShip
         * @param {RelationshipQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationShipUsingPOST: async (query: RelationshipQuery, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query','Required parameter query was null or undefined when calling getRelationShipUsingPOST.');
            }
            const localVarPath = `/relationship/query`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof query !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(query !== undefined ? query : {}) : (query || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getRelations
         * @param {number} [fromVersionId] fromVersionId
         * @param {'Dependency' | 'Link' | 'Publish'} [relationShipType] relationShipType
         * @param {number} [toVersionId] toVersionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationsUsingGET: async (fromVersionId?: number, relationShipType?: 'Dependency' | 'Link' | 'Publish', toVersionId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/relationships`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromVersionId !== undefined) {
                localVarQueryParameter['fromVersionId'] = fromVersionId;
            }

            if (relationShipType !== undefined) {
                localVarQueryParameter['relationShipType'] = relationShipType;
            }

            if (toVersionId !== undefined) {
                localVarQueryParameter['toVersionId'] = toVersionId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getRelationshipForLinkType
         * @param {GetRelationshipForLinkType} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipForLinkTypeUsingPOST: async (args: GetRelationshipForLinkType, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'args' is not null or undefined
            if (args === null || args === undefined) {
                throw new RequiredError('args','Required parameter args was null or undefined when calling getRelationshipForLinkTypeUsingPOST.');
            }
            const localVarPath = `/relationship/query-link-type`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof args !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(args !== undefined ? args : {}) : (args || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RelationshipApi - functional programming interface
 * @export
 */
export const RelationshipApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createRelationship
         * @param {Relationship} relationship relationship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRelationshipUsingPUT(relationship: Relationship, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Relationship>> {
            const localVarAxiosArgs = await RelationshipApiAxiosParamCreator(configuration).createRelationshipUsingPUT(relationship, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getRelationShip
         * @param {RelationshipQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationShipUsingPOST(query: RelationshipQuery, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Relationship>>> {
            const localVarAxiosArgs = await RelationshipApiAxiosParamCreator(configuration).getRelationShipUsingPOST(query, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getRelations
         * @param {number} [fromVersionId] fromVersionId
         * @param {'Dependency' | 'Link' | 'Publish'} [relationShipType] relationShipType
         * @param {number} [toVersionId] toVersionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationsUsingGET(fromVersionId?: number, relationShipType?: 'Dependency' | 'Link' | 'Publish', toVersionId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseListRelationship>> {
            const localVarAxiosArgs = await RelationshipApiAxiosParamCreator(configuration).getRelationsUsingGET(fromVersionId, relationShipType, toVersionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getRelationshipForLinkType
         * @param {GetRelationshipForLinkType} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelationshipForLinkTypeUsingPOST(args: GetRelationshipForLinkType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Relationship>> {
            const localVarAxiosArgs = await RelationshipApiAxiosParamCreator(configuration).getRelationshipForLinkTypeUsingPOST(args, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RelationshipApi - factory interface
 * @export
 */
export const RelationshipApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary createRelationship
         * @param {Relationship} relationship relationship
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRelationshipUsingPUT(relationship: Relationship, options?: any): AxiosPromise<Relationship> {
            return RelationshipApiFp(configuration).createRelationshipUsingPUT(relationship, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getRelationShip
         * @param {RelationshipQuery} query query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationShipUsingPOST(query: RelationshipQuery, options?: any): AxiosPromise<Array<Relationship>> {
            return RelationshipApiFp(configuration).getRelationShipUsingPOST(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getRelations
         * @param {number} [fromVersionId] fromVersionId
         * @param {'Dependency' | 'Link' | 'Publish'} [relationShipType] relationShipType
         * @param {number} [toVersionId] toVersionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationsUsingGET(fromVersionId?: number, relationShipType?: 'Dependency' | 'Link' | 'Publish', toVersionId?: number, options?: any): AxiosPromise<ResponseListRelationship> {
            return RelationshipApiFp(configuration).getRelationsUsingGET(fromVersionId, relationShipType, toVersionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getRelationshipForLinkType
         * @param {GetRelationshipForLinkType} args args
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelationshipForLinkTypeUsingPOST(args: GetRelationshipForLinkType, options?: any): AxiosPromise<Relationship> {
            return RelationshipApiFp(configuration).getRelationshipForLinkTypeUsingPOST(args, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RelationshipApi - object-oriented interface
 * @export
 * @class RelationshipApi
 * @extends {BaseAPI}
 */
export class RelationshipApi extends BaseAPI {
    /**
     * 
     * @summary createRelationship
     * @param {Relationship} relationship relationship
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipApi
     */
    public createRelationshipUsingPUT(relationship: Relationship, options?: any) {
        return RelationshipApiFp(this.configuration).createRelationshipUsingPUT(relationship, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getRelationShip
     * @param {RelationshipQuery} query query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipApi
     */
    public getRelationShipUsingPOST(query: RelationshipQuery, options?: any) {
        return RelationshipApiFp(this.configuration).getRelationShipUsingPOST(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getRelations
     * @param {number} [fromVersionId] fromVersionId
     * @param {'Dependency' | 'Link' | 'Publish'} [relationShipType] relationShipType
     * @param {number} [toVersionId] toVersionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipApi
     */
    public getRelationsUsingGET(fromVersionId?: number, relationShipType?: 'Dependency' | 'Link' | 'Publish', toVersionId?: number, options?: any) {
        return RelationshipApiFp(this.configuration).getRelationsUsingGET(fromVersionId, relationShipType, toVersionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getRelationshipForLinkType
     * @param {GetRelationshipForLinkType} args args
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RelationshipApi
     */
    public getRelationshipForLinkTypeUsingPOST(args: GetRelationshipForLinkType, options?: any) {
        return RelationshipApiFp(this.configuration).getRelationshipForLinkTypeUsingPOST(args, options).then((request) => request(this.axios, this.basePath));
    }

}
